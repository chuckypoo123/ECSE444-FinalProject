
gyro_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1cc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000894  0800a35c  0800a35c  0001a35c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800abf0  0800abf0  000200f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800abf0  0800abf0  0001abf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800abf8  0800abf8  000200f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800abf8  0800abf8  0001abf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800abfc  0800abfc  0001abfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f8  20000000  0800ac00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002c40  200000f8  0800acf8  000200f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002d38  0800acf8  00022d38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f389  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b07  00000000  00000000  0003f569  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a78  00000000  00000000  00043070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000149a  00000000  00000000  00044ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ae1e  00000000  00000000  00045f82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f943  00000000  00000000  00070da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010f260  00000000  00000000  000906e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007800  00000000  00000000  0019f944  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  001a7144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000000fa  00000000  00000000  001a71ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000010  00000000  00000000  001a72a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000f8 	.word	0x200000f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a344 	.word	0x0800a344

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000fc 	.word	0x200000fc
 80001cc:	0800a344 	.word	0x0800a344

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	; 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__aeabi_d2uiz>:
 800083c:	004a      	lsls	r2, r1, #1
 800083e:	d211      	bcs.n	8000864 <__aeabi_d2uiz+0x28>
 8000840:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000844:	d211      	bcs.n	800086a <__aeabi_d2uiz+0x2e>
 8000846:	d50d      	bpl.n	8000864 <__aeabi_d2uiz+0x28>
 8000848:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800084c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000850:	d40e      	bmi.n	8000870 <__aeabi_d2uiz+0x34>
 8000852:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000856:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800085a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800085e:	fa23 f002 	lsr.w	r0, r3, r2
 8000862:	4770      	bx	lr
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	4770      	bx	lr
 800086a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800086e:	d102      	bne.n	8000876 <__aeabi_d2uiz+0x3a>
 8000870:	f04f 30ff 	mov.w	r0, #4294967295
 8000874:	4770      	bx	lr
 8000876:	f04f 0000 	mov.w	r0, #0
 800087a:	4770      	bx	lr

0800087c <__aeabi_d2f>:
 800087c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000880:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000884:	bf24      	itt	cs
 8000886:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800088a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800088e:	d90d      	bls.n	80008ac <__aeabi_d2f+0x30>
 8000890:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000894:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000898:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800089c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80008a0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008a4:	bf08      	it	eq
 80008a6:	f020 0001 	biceq.w	r0, r0, #1
 80008aa:	4770      	bx	lr
 80008ac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80008b0:	d121      	bne.n	80008f6 <__aeabi_d2f+0x7a>
 80008b2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80008b6:	bfbc      	itt	lt
 80008b8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80008bc:	4770      	bxlt	lr
 80008be:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008c2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008c6:	f1c2 0218 	rsb	r2, r2, #24
 80008ca:	f1c2 0c20 	rsb	ip, r2, #32
 80008ce:	fa10 f30c 	lsls.w	r3, r0, ip
 80008d2:	fa20 f002 	lsr.w	r0, r0, r2
 80008d6:	bf18      	it	ne
 80008d8:	f040 0001 	orrne.w	r0, r0, #1
 80008dc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008e0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008e4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008e8:	ea40 000c 	orr.w	r0, r0, ip
 80008ec:	fa23 f302 	lsr.w	r3, r3, r2
 80008f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008f4:	e7cc      	b.n	8000890 <__aeabi_d2f+0x14>
 80008f6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008fa:	d107      	bne.n	800090c <__aeabi_d2f+0x90>
 80008fc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000900:	bf1e      	ittt	ne
 8000902:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000906:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800090a:	4770      	bxne	lr
 800090c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000910:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000914:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop

0800091c <__aeabi_uldivmod>:
 800091c:	b953      	cbnz	r3, 8000934 <__aeabi_uldivmod+0x18>
 800091e:	b94a      	cbnz	r2, 8000934 <__aeabi_uldivmod+0x18>
 8000920:	2900      	cmp	r1, #0
 8000922:	bf08      	it	eq
 8000924:	2800      	cmpeq	r0, #0
 8000926:	bf1c      	itt	ne
 8000928:	f04f 31ff 	movne.w	r1, #4294967295
 800092c:	f04f 30ff 	movne.w	r0, #4294967295
 8000930:	f000 b970 	b.w	8000c14 <__aeabi_idiv0>
 8000934:	f1ad 0c08 	sub.w	ip, sp, #8
 8000938:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800093c:	f000 f806 	bl	800094c <__udivmoddi4>
 8000940:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000944:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000948:	b004      	add	sp, #16
 800094a:	4770      	bx	lr

0800094c <__udivmoddi4>:
 800094c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000950:	9e08      	ldr	r6, [sp, #32]
 8000952:	460d      	mov	r5, r1
 8000954:	4604      	mov	r4, r0
 8000956:	460f      	mov	r7, r1
 8000958:	2b00      	cmp	r3, #0
 800095a:	d14a      	bne.n	80009f2 <__udivmoddi4+0xa6>
 800095c:	428a      	cmp	r2, r1
 800095e:	4694      	mov	ip, r2
 8000960:	d965      	bls.n	8000a2e <__udivmoddi4+0xe2>
 8000962:	fab2 f382 	clz	r3, r2
 8000966:	b143      	cbz	r3, 800097a <__udivmoddi4+0x2e>
 8000968:	fa02 fc03 	lsl.w	ip, r2, r3
 800096c:	f1c3 0220 	rsb	r2, r3, #32
 8000970:	409f      	lsls	r7, r3
 8000972:	fa20 f202 	lsr.w	r2, r0, r2
 8000976:	4317      	orrs	r7, r2
 8000978:	409c      	lsls	r4, r3
 800097a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800097e:	fa1f f58c 	uxth.w	r5, ip
 8000982:	fbb7 f1fe 	udiv	r1, r7, lr
 8000986:	0c22      	lsrs	r2, r4, #16
 8000988:	fb0e 7711 	mls	r7, lr, r1, r7
 800098c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000990:	fb01 f005 	mul.w	r0, r1, r5
 8000994:	4290      	cmp	r0, r2
 8000996:	d90a      	bls.n	80009ae <__udivmoddi4+0x62>
 8000998:	eb1c 0202 	adds.w	r2, ip, r2
 800099c:	f101 37ff 	add.w	r7, r1, #4294967295
 80009a0:	f080 811c 	bcs.w	8000bdc <__udivmoddi4+0x290>
 80009a4:	4290      	cmp	r0, r2
 80009a6:	f240 8119 	bls.w	8000bdc <__udivmoddi4+0x290>
 80009aa:	3902      	subs	r1, #2
 80009ac:	4462      	add	r2, ip
 80009ae:	1a12      	subs	r2, r2, r0
 80009b0:	b2a4      	uxth	r4, r4
 80009b2:	fbb2 f0fe 	udiv	r0, r2, lr
 80009b6:	fb0e 2210 	mls	r2, lr, r0, r2
 80009ba:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009be:	fb00 f505 	mul.w	r5, r0, r5
 80009c2:	42a5      	cmp	r5, r4
 80009c4:	d90a      	bls.n	80009dc <__udivmoddi4+0x90>
 80009c6:	eb1c 0404 	adds.w	r4, ip, r4
 80009ca:	f100 32ff 	add.w	r2, r0, #4294967295
 80009ce:	f080 8107 	bcs.w	8000be0 <__udivmoddi4+0x294>
 80009d2:	42a5      	cmp	r5, r4
 80009d4:	f240 8104 	bls.w	8000be0 <__udivmoddi4+0x294>
 80009d8:	4464      	add	r4, ip
 80009da:	3802      	subs	r0, #2
 80009dc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80009e0:	1b64      	subs	r4, r4, r5
 80009e2:	2100      	movs	r1, #0
 80009e4:	b11e      	cbz	r6, 80009ee <__udivmoddi4+0xa2>
 80009e6:	40dc      	lsrs	r4, r3
 80009e8:	2300      	movs	r3, #0
 80009ea:	e9c6 4300 	strd	r4, r3, [r6]
 80009ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009f2:	428b      	cmp	r3, r1
 80009f4:	d908      	bls.n	8000a08 <__udivmoddi4+0xbc>
 80009f6:	2e00      	cmp	r6, #0
 80009f8:	f000 80ed 	beq.w	8000bd6 <__udivmoddi4+0x28a>
 80009fc:	2100      	movs	r1, #0
 80009fe:	e9c6 0500 	strd	r0, r5, [r6]
 8000a02:	4608      	mov	r0, r1
 8000a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a08:	fab3 f183 	clz	r1, r3
 8000a0c:	2900      	cmp	r1, #0
 8000a0e:	d149      	bne.n	8000aa4 <__udivmoddi4+0x158>
 8000a10:	42ab      	cmp	r3, r5
 8000a12:	d302      	bcc.n	8000a1a <__udivmoddi4+0xce>
 8000a14:	4282      	cmp	r2, r0
 8000a16:	f200 80f8 	bhi.w	8000c0a <__udivmoddi4+0x2be>
 8000a1a:	1a84      	subs	r4, r0, r2
 8000a1c:	eb65 0203 	sbc.w	r2, r5, r3
 8000a20:	2001      	movs	r0, #1
 8000a22:	4617      	mov	r7, r2
 8000a24:	2e00      	cmp	r6, #0
 8000a26:	d0e2      	beq.n	80009ee <__udivmoddi4+0xa2>
 8000a28:	e9c6 4700 	strd	r4, r7, [r6]
 8000a2c:	e7df      	b.n	80009ee <__udivmoddi4+0xa2>
 8000a2e:	b902      	cbnz	r2, 8000a32 <__udivmoddi4+0xe6>
 8000a30:	deff      	udf	#255	; 0xff
 8000a32:	fab2 f382 	clz	r3, r2
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	f040 8090 	bne.w	8000b5c <__udivmoddi4+0x210>
 8000a3c:	1a8a      	subs	r2, r1, r2
 8000a3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a42:	fa1f fe8c 	uxth.w	lr, ip
 8000a46:	2101      	movs	r1, #1
 8000a48:	fbb2 f5f7 	udiv	r5, r2, r7
 8000a4c:	fb07 2015 	mls	r0, r7, r5, r2
 8000a50:	0c22      	lsrs	r2, r4, #16
 8000a52:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000a56:	fb0e f005 	mul.w	r0, lr, r5
 8000a5a:	4290      	cmp	r0, r2
 8000a5c:	d908      	bls.n	8000a70 <__udivmoddi4+0x124>
 8000a5e:	eb1c 0202 	adds.w	r2, ip, r2
 8000a62:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a66:	d202      	bcs.n	8000a6e <__udivmoddi4+0x122>
 8000a68:	4290      	cmp	r0, r2
 8000a6a:	f200 80cb 	bhi.w	8000c04 <__udivmoddi4+0x2b8>
 8000a6e:	4645      	mov	r5, r8
 8000a70:	1a12      	subs	r2, r2, r0
 8000a72:	b2a4      	uxth	r4, r4
 8000a74:	fbb2 f0f7 	udiv	r0, r2, r7
 8000a78:	fb07 2210 	mls	r2, r7, r0, r2
 8000a7c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a80:	fb0e fe00 	mul.w	lr, lr, r0
 8000a84:	45a6      	cmp	lr, r4
 8000a86:	d908      	bls.n	8000a9a <__udivmoddi4+0x14e>
 8000a88:	eb1c 0404 	adds.w	r4, ip, r4
 8000a8c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a90:	d202      	bcs.n	8000a98 <__udivmoddi4+0x14c>
 8000a92:	45a6      	cmp	lr, r4
 8000a94:	f200 80bb 	bhi.w	8000c0e <__udivmoddi4+0x2c2>
 8000a98:	4610      	mov	r0, r2
 8000a9a:	eba4 040e 	sub.w	r4, r4, lr
 8000a9e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000aa2:	e79f      	b.n	80009e4 <__udivmoddi4+0x98>
 8000aa4:	f1c1 0720 	rsb	r7, r1, #32
 8000aa8:	408b      	lsls	r3, r1
 8000aaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000aae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ab2:	fa05 f401 	lsl.w	r4, r5, r1
 8000ab6:	fa20 f307 	lsr.w	r3, r0, r7
 8000aba:	40fd      	lsrs	r5, r7
 8000abc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ac0:	4323      	orrs	r3, r4
 8000ac2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ac6:	fa1f fe8c 	uxth.w	lr, ip
 8000aca:	fb09 5518 	mls	r5, r9, r8, r5
 8000ace:	0c1c      	lsrs	r4, r3, #16
 8000ad0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ad4:	fb08 f50e 	mul.w	r5, r8, lr
 8000ad8:	42a5      	cmp	r5, r4
 8000ada:	fa02 f201 	lsl.w	r2, r2, r1
 8000ade:	fa00 f001 	lsl.w	r0, r0, r1
 8000ae2:	d90b      	bls.n	8000afc <__udivmoddi4+0x1b0>
 8000ae4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ae8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000aec:	f080 8088 	bcs.w	8000c00 <__udivmoddi4+0x2b4>
 8000af0:	42a5      	cmp	r5, r4
 8000af2:	f240 8085 	bls.w	8000c00 <__udivmoddi4+0x2b4>
 8000af6:	f1a8 0802 	sub.w	r8, r8, #2
 8000afa:	4464      	add	r4, ip
 8000afc:	1b64      	subs	r4, r4, r5
 8000afe:	b29d      	uxth	r5, r3
 8000b00:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b04:	fb09 4413 	mls	r4, r9, r3, r4
 8000b08:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000b0c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000b10:	45a6      	cmp	lr, r4
 8000b12:	d908      	bls.n	8000b26 <__udivmoddi4+0x1da>
 8000b14:	eb1c 0404 	adds.w	r4, ip, r4
 8000b18:	f103 35ff 	add.w	r5, r3, #4294967295
 8000b1c:	d26c      	bcs.n	8000bf8 <__udivmoddi4+0x2ac>
 8000b1e:	45a6      	cmp	lr, r4
 8000b20:	d96a      	bls.n	8000bf8 <__udivmoddi4+0x2ac>
 8000b22:	3b02      	subs	r3, #2
 8000b24:	4464      	add	r4, ip
 8000b26:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b2a:	fba3 9502 	umull	r9, r5, r3, r2
 8000b2e:	eba4 040e 	sub.w	r4, r4, lr
 8000b32:	42ac      	cmp	r4, r5
 8000b34:	46c8      	mov	r8, r9
 8000b36:	46ae      	mov	lr, r5
 8000b38:	d356      	bcc.n	8000be8 <__udivmoddi4+0x29c>
 8000b3a:	d053      	beq.n	8000be4 <__udivmoddi4+0x298>
 8000b3c:	b156      	cbz	r6, 8000b54 <__udivmoddi4+0x208>
 8000b3e:	ebb0 0208 	subs.w	r2, r0, r8
 8000b42:	eb64 040e 	sbc.w	r4, r4, lr
 8000b46:	fa04 f707 	lsl.w	r7, r4, r7
 8000b4a:	40ca      	lsrs	r2, r1
 8000b4c:	40cc      	lsrs	r4, r1
 8000b4e:	4317      	orrs	r7, r2
 8000b50:	e9c6 7400 	strd	r7, r4, [r6]
 8000b54:	4618      	mov	r0, r3
 8000b56:	2100      	movs	r1, #0
 8000b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5c:	f1c3 0120 	rsb	r1, r3, #32
 8000b60:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b64:	fa20 f201 	lsr.w	r2, r0, r1
 8000b68:	fa25 f101 	lsr.w	r1, r5, r1
 8000b6c:	409d      	lsls	r5, r3
 8000b6e:	432a      	orrs	r2, r5
 8000b70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b74:	fa1f fe8c 	uxth.w	lr, ip
 8000b78:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b7c:	fb07 1510 	mls	r5, r7, r0, r1
 8000b80:	0c11      	lsrs	r1, r2, #16
 8000b82:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000b86:	fb00 f50e 	mul.w	r5, r0, lr
 8000b8a:	428d      	cmp	r5, r1
 8000b8c:	fa04 f403 	lsl.w	r4, r4, r3
 8000b90:	d908      	bls.n	8000ba4 <__udivmoddi4+0x258>
 8000b92:	eb1c 0101 	adds.w	r1, ip, r1
 8000b96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b9a:	d22f      	bcs.n	8000bfc <__udivmoddi4+0x2b0>
 8000b9c:	428d      	cmp	r5, r1
 8000b9e:	d92d      	bls.n	8000bfc <__udivmoddi4+0x2b0>
 8000ba0:	3802      	subs	r0, #2
 8000ba2:	4461      	add	r1, ip
 8000ba4:	1b49      	subs	r1, r1, r5
 8000ba6:	b292      	uxth	r2, r2
 8000ba8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000bac:	fb07 1115 	mls	r1, r7, r5, r1
 8000bb0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000bb4:	fb05 f10e 	mul.w	r1, r5, lr
 8000bb8:	4291      	cmp	r1, r2
 8000bba:	d908      	bls.n	8000bce <__udivmoddi4+0x282>
 8000bbc:	eb1c 0202 	adds.w	r2, ip, r2
 8000bc0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bc4:	d216      	bcs.n	8000bf4 <__udivmoddi4+0x2a8>
 8000bc6:	4291      	cmp	r1, r2
 8000bc8:	d914      	bls.n	8000bf4 <__udivmoddi4+0x2a8>
 8000bca:	3d02      	subs	r5, #2
 8000bcc:	4462      	add	r2, ip
 8000bce:	1a52      	subs	r2, r2, r1
 8000bd0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000bd4:	e738      	b.n	8000a48 <__udivmoddi4+0xfc>
 8000bd6:	4631      	mov	r1, r6
 8000bd8:	4630      	mov	r0, r6
 8000bda:	e708      	b.n	80009ee <__udivmoddi4+0xa2>
 8000bdc:	4639      	mov	r1, r7
 8000bde:	e6e6      	b.n	80009ae <__udivmoddi4+0x62>
 8000be0:	4610      	mov	r0, r2
 8000be2:	e6fb      	b.n	80009dc <__udivmoddi4+0x90>
 8000be4:	4548      	cmp	r0, r9
 8000be6:	d2a9      	bcs.n	8000b3c <__udivmoddi4+0x1f0>
 8000be8:	ebb9 0802 	subs.w	r8, r9, r2
 8000bec:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000bf0:	3b01      	subs	r3, #1
 8000bf2:	e7a3      	b.n	8000b3c <__udivmoddi4+0x1f0>
 8000bf4:	4645      	mov	r5, r8
 8000bf6:	e7ea      	b.n	8000bce <__udivmoddi4+0x282>
 8000bf8:	462b      	mov	r3, r5
 8000bfa:	e794      	b.n	8000b26 <__udivmoddi4+0x1da>
 8000bfc:	4640      	mov	r0, r8
 8000bfe:	e7d1      	b.n	8000ba4 <__udivmoddi4+0x258>
 8000c00:	46d0      	mov	r8, sl
 8000c02:	e77b      	b.n	8000afc <__udivmoddi4+0x1b0>
 8000c04:	3d02      	subs	r5, #2
 8000c06:	4462      	add	r2, ip
 8000c08:	e732      	b.n	8000a70 <__udivmoddi4+0x124>
 8000c0a:	4608      	mov	r0, r1
 8000c0c:	e70a      	b.n	8000a24 <__udivmoddi4+0xd8>
 8000c0e:	4464      	add	r4, ip
 8000c10:	3802      	subs	r0, #2
 8000c12:	e742      	b.n	8000a9a <__udivmoddi4+0x14e>

08000c14 <__aeabi_idiv0>:
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <update_map>:

uint8_t top_row = 0;

uint8_t expected_lane = 5; // Character starts in lane 5

void update_map() {
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
  uint32_t rand_num;
  HAL_RNG_GenerateRandomNumber(&hrng, &rand_num);
 8000c1e:	1d3b      	adds	r3, r7, #4
 8000c20:	4619      	mov	r1, r3
 8000c22:	4854      	ldr	r0, [pc, #336]	; (8000d74 <update_map+0x15c>)
 8000c24:	f006 ff99 	bl	8007b5a <HAL_RNG_GenerateRandomNumber>

  uint8_t past_expected_lane = expected_lane;
 8000c28:	4b53      	ldr	r3, [pc, #332]	; (8000d78 <update_map+0x160>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	72fb      	strb	r3, [r7, #11]
  if (rand_num & 1) { // Determine if expected lane changes
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	f003 0301 	and.w	r3, r3, #1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d021      	beq.n	8000c7c <update_map+0x64>
    if (expected_lane == 1) {
 8000c38:	4b4f      	ldr	r3, [pc, #316]	; (8000d78 <update_map+0x160>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d103      	bne.n	8000c48 <update_map+0x30>
      expected_lane = 3;
 8000c40:	4b4d      	ldr	r3, [pc, #308]	; (8000d78 <update_map+0x160>)
 8000c42:	2203      	movs	r2, #3
 8000c44:	701a      	strb	r2, [r3, #0]
 8000c46:	e019      	b.n	8000c7c <update_map+0x64>
    }
    else if (expected_lane == 9) {
 8000c48:	4b4b      	ldr	r3, [pc, #300]	; (8000d78 <update_map+0x160>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	2b09      	cmp	r3, #9
 8000c4e:	d103      	bne.n	8000c58 <update_map+0x40>
      expected_lane = 7;
 8000c50:	4b49      	ldr	r3, [pc, #292]	; (8000d78 <update_map+0x160>)
 8000c52:	2207      	movs	r2, #7
 8000c54:	701a      	strb	r2, [r3, #0]
 8000c56:	e011      	b.n	8000c7c <update_map+0x64>
    }
    else { // Determine if going right or left
      if ((rand_num >> 2) & 1) {
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	f003 0304 	and.w	r3, r3, #4
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d006      	beq.n	8000c70 <update_map+0x58>
        expected_lane += 2;
 8000c62:	4b45      	ldr	r3, [pc, #276]	; (8000d78 <update_map+0x160>)
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	3302      	adds	r3, #2
 8000c68:	b2da      	uxtb	r2, r3
 8000c6a:	4b43      	ldr	r3, [pc, #268]	; (8000d78 <update_map+0x160>)
 8000c6c:	701a      	strb	r2, [r3, #0]
 8000c6e:	e005      	b.n	8000c7c <update_map+0x64>
      }
      else {
        expected_lane -= 2;
 8000c70:	4b41      	ldr	r3, [pc, #260]	; (8000d78 <update_map+0x160>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	3b02      	subs	r3, #2
 8000c76:	b2da      	uxtb	r2, r3
 8000c78:	4b3f      	ldr	r3, [pc, #252]	; (8000d78 <update_map+0x160>)
 8000c7a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  for (int col = 1; col <= 2 * N_COLS - 1; col += 2) {
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	e03d      	b.n	8000cfe <update_map+0xe6>
    if (col == past_expected_lane || col == expected_lane) {
 8000c82:	7afb      	ldrb	r3, [r7, #11]
 8000c84:	68fa      	ldr	r2, [r7, #12]
 8000c86:	429a      	cmp	r2, r3
 8000c88:	d005      	beq.n	8000c96 <update_map+0x7e>
 8000c8a:	4b3b      	ldr	r3, [pc, #236]	; (8000d78 <update_map+0x160>)
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	461a      	mov	r2, r3
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d10d      	bne.n	8000cb2 <update_map+0x9a>
      map[top_row][col] = ' ';
 8000c96:	4b39      	ldr	r3, [pc, #228]	; (8000d7c <update_map+0x164>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4a38      	ldr	r2, [pc, #224]	; (8000d80 <update_map+0x168>)
 8000c9e:	460b      	mov	r3, r1
 8000ca0:	00db      	lsls	r3, r3, #3
 8000ca2:	1a5b      	subs	r3, r3, r1
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	441a      	add	r2, r3
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	4413      	add	r3, r2
 8000cac:	2220      	movs	r2, #32
 8000cae:	701a      	strb	r2, [r3, #0]
      continue;
 8000cb0:	e022      	b.n	8000cf8 <update_map+0xe0>
    }

    if ((rand_num >> col) & 1) {
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d00d      	beq.n	8000cde <update_map+0xc6>
      map[top_row][col] = 'X';
 8000cc2:	4b2e      	ldr	r3, [pc, #184]	; (8000d7c <update_map+0x164>)
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4a2d      	ldr	r2, [pc, #180]	; (8000d80 <update_map+0x168>)
 8000cca:	460b      	mov	r3, r1
 8000ccc:	00db      	lsls	r3, r3, #3
 8000cce:	1a5b      	subs	r3, r3, r1
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	441a      	add	r2, r3
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	2258      	movs	r2, #88	; 0x58
 8000cda:	701a      	strb	r2, [r3, #0]
 8000cdc:	e00c      	b.n	8000cf8 <update_map+0xe0>
    }
    else {
      map[top_row][col] = ' ';
 8000cde:	4b27      	ldr	r3, [pc, #156]	; (8000d7c <update_map+0x164>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4a26      	ldr	r2, [pc, #152]	; (8000d80 <update_map+0x168>)
 8000ce6:	460b      	mov	r3, r1
 8000ce8:	00db      	lsls	r3, r3, #3
 8000cea:	1a5b      	subs	r3, r3, r1
 8000cec:	005b      	lsls	r3, r3, #1
 8000cee:	441a      	add	r2, r3
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	2220      	movs	r2, #32
 8000cf6:	701a      	strb	r2, [r3, #0]
  for (int col = 1; col <= 2 * N_COLS - 1; col += 2) {
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	3302      	adds	r3, #2
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	2b09      	cmp	r3, #9
 8000d02:	ddbe      	ble.n	8000c82 <update_map+0x6a>
    }
  }
  top_row = (top_row + 1) % N_ROWS;
 8000d04:	4b1d      	ldr	r3, [pc, #116]	; (8000d7c <update_map+0x164>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	1c5a      	adds	r2, r3, #1
 8000d0a:	4b1e      	ldr	r3, [pc, #120]	; (8000d84 <update_map+0x16c>)
 8000d0c:	fb83 1302 	smull	r1, r3, r3, r2
 8000d10:	1099      	asrs	r1, r3, #2
 8000d12:	17d3      	asrs	r3, r2, #31
 8000d14:	1ac9      	subs	r1, r1, r3
 8000d16:	460b      	mov	r3, r1
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	440b      	add	r3, r1
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	1ad1      	subs	r1, r2, r3
 8000d20:	b2ca      	uxtb	r2, r1
 8000d22:	4b16      	ldr	r3, [pc, #88]	; (8000d7c <update_map+0x164>)
 8000d24:	701a      	strb	r2, [r3, #0]

  //   Detects collision
  if(map[(top_row + char_vert_pos) % N_ROWS][char_horz_pos] == 'X'){
 8000d26:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <update_map+0x164>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	4b16      	ldr	r3, [pc, #88]	; (8000d88 <update_map+0x170>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	18d1      	adds	r1, r2, r3
 8000d32:	4b14      	ldr	r3, [pc, #80]	; (8000d84 <update_map+0x16c>)
 8000d34:	fb83 2301 	smull	r2, r3, r3, r1
 8000d38:	109a      	asrs	r2, r3, #2
 8000d3a:	17cb      	asrs	r3, r1, #31
 8000d3c:	1ad2      	subs	r2, r2, r3
 8000d3e:	4613      	mov	r3, r2
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	4413      	add	r3, r2
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	1aca      	subs	r2, r1, r3
 8000d48:	4b10      	ldr	r3, [pc, #64]	; (8000d8c <update_map+0x174>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	4618      	mov	r0, r3
 8000d50:	490b      	ldr	r1, [pc, #44]	; (8000d80 <update_map+0x168>)
 8000d52:	4613      	mov	r3, r2
 8000d54:	00db      	lsls	r3, r3, #3
 8000d56:	1a9b      	subs	r3, r3, r2
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	440b      	add	r3, r1
 8000d5c:	4403      	add	r3, r0
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	2b58      	cmp	r3, #88	; 0x58
 8000d62:	d103      	bne.n	8000d6c <update_map+0x154>
	  collision = TRUE;
 8000d64:	4b0a      	ldr	r3, [pc, #40]	; (8000d90 <update_map+0x178>)
 8000d66:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000d6a:	601a      	str	r2, [r3, #0]
  }
}
 8000d6c:	bf00      	nop
 8000d6e:	3710      	adds	r7, #16
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	200002b4 	.word	0x200002b4
 8000d78:	20000098 	.word	0x20000098
 8000d7c:	20002ba0 	.word	0x20002ba0
 8000d80:	2000000c 	.word	0x2000000c
 8000d84:	66666667 	.word	0x66666667
 8000d88:	2000000a 	.word	0x2000000a
 8000d8c:	20000009 	.word	0x20000009
 8000d90:	2000048c 	.word	0x2000048c

08000d94 <display_map>:

void display_map(uint8_t start_row) {
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b09e      	sub	sp, #120	; 0x78
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	71fb      	strb	r3, [r7, #7]
  // First, clear console
  HAL_UART_Transmit(&huart1, (uint8_t*) clear_screen, sizeof(clear_screen), 1000);
 8000d9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000da2:	2205      	movs	r2, #5
 8000da4:	4953      	ldr	r1, [pc, #332]	; (8000ef4 <display_map+0x160>)
 8000da6:	4854      	ldr	r0, [pc, #336]	; (8000ef8 <display_map+0x164>)
 8000da8:	f008 f88a 	bl	8008ec0 <HAL_UART_Transmit>

  if(collision == FALSE){
 8000dac:	4b53      	ldr	r3, [pc, #332]	; (8000efc <display_map+0x168>)
 8000dae:	edd3 7a00 	vldr	s15, [r3]
 8000db2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dba:	d179      	bne.n	8000eb0 <display_map+0x11c>

	char real_char = map[(start_row + char_vert_pos) % N_ROWS][char_horz_pos];
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	4a50      	ldr	r2, [pc, #320]	; (8000f00 <display_map+0x16c>)
 8000dc0:	7812      	ldrb	r2, [r2, #0]
 8000dc2:	1899      	adds	r1, r3, r2
 8000dc4:	4b4f      	ldr	r3, [pc, #316]	; (8000f04 <display_map+0x170>)
 8000dc6:	fb83 2301 	smull	r2, r3, r3, r1
 8000dca:	109a      	asrs	r2, r3, #2
 8000dcc:	17cb      	asrs	r3, r1, #31
 8000dce:	1ad2      	subs	r2, r2, r3
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	4413      	add	r3, r2
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	1aca      	subs	r2, r1, r3
 8000dda:	4b4b      	ldr	r3, [pc, #300]	; (8000f08 <display_map+0x174>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	4618      	mov	r0, r3
 8000de2:	494a      	ldr	r1, [pc, #296]	; (8000f0c <display_map+0x178>)
 8000de4:	4613      	mov	r3, r2
 8000de6:	00db      	lsls	r3, r3, #3
 8000de8:	1a9b      	subs	r3, r3, r2
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	440b      	add	r3, r1
 8000dee:	4403      	add	r3, r0
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
	map[(start_row + char_vert_pos) % N_ROWS][char_horz_pos] = 'O';
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	4a41      	ldr	r2, [pc, #260]	; (8000f00 <display_map+0x16c>)
 8000dfa:	7812      	ldrb	r2, [r2, #0]
 8000dfc:	1899      	adds	r1, r3, r2
 8000dfe:	4b41      	ldr	r3, [pc, #260]	; (8000f04 <display_map+0x170>)
 8000e00:	fb83 2301 	smull	r2, r3, r3, r1
 8000e04:	109a      	asrs	r2, r3, #2
 8000e06:	17cb      	asrs	r3, r1, #31
 8000e08:	1ad2      	subs	r2, r2, r3
 8000e0a:	4613      	mov	r3, r2
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	4413      	add	r3, r2
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	1aca      	subs	r2, r1, r3
 8000e14:	4b3c      	ldr	r3, [pc, #240]	; (8000f08 <display_map+0x174>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	493b      	ldr	r1, [pc, #236]	; (8000f0c <display_map+0x178>)
 8000e1e:	4613      	mov	r3, r2
 8000e20:	00db      	lsls	r3, r3, #3
 8000e22:	1a9b      	subs	r3, r3, r2
 8000e24:	005b      	lsls	r3, r3, #1
 8000e26:	440b      	add	r3, r1
 8000e28:	4403      	add	r3, r0
 8000e2a:	224f      	movs	r2, #79	; 0x4f
 8000e2c:	701a      	strb	r2, [r3, #0]

	// Display map
	for (int row = 0; row < N_ROWS; row++) {
 8000e2e:	2300      	movs	r3, #0
 8000e30:	677b      	str	r3, [r7, #116]	; 0x74
 8000e32:	e01c      	b.n	8000e6e <display_map+0xda>
	HAL_UART_Transmit(&huart1, (uint8_t*) map[(start_row + row) % N_ROWS], sizeof(map[row]), 1000);
 8000e34:	79fa      	ldrb	r2, [r7, #7]
 8000e36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000e38:	18d1      	adds	r1, r2, r3
 8000e3a:	4b32      	ldr	r3, [pc, #200]	; (8000f04 <display_map+0x170>)
 8000e3c:	fb83 2301 	smull	r2, r3, r3, r1
 8000e40:	109a      	asrs	r2, r3, #2
 8000e42:	17cb      	asrs	r3, r1, #31
 8000e44:	1ad2      	subs	r2, r2, r3
 8000e46:	4613      	mov	r3, r2
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	4413      	add	r3, r2
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	1aca      	subs	r2, r1, r3
 8000e50:	4613      	mov	r3, r2
 8000e52:	00db      	lsls	r3, r3, #3
 8000e54:	1a9b      	subs	r3, r3, r2
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	4a2c      	ldr	r2, [pc, #176]	; (8000f0c <display_map+0x178>)
 8000e5a:	1899      	adds	r1, r3, r2
 8000e5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e60:	220e      	movs	r2, #14
 8000e62:	4825      	ldr	r0, [pc, #148]	; (8000ef8 <display_map+0x164>)
 8000e64:	f008 f82c 	bl	8008ec0 <HAL_UART_Transmit>
	for (int row = 0; row < N_ROWS; row++) {
 8000e68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	677b      	str	r3, [r7, #116]	; 0x74
 8000e6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000e70:	2b09      	cmp	r3, #9
 8000e72:	dddf      	ble.n	8000e34 <display_map+0xa0>
	}

	map[(start_row + char_vert_pos) % N_ROWS][char_horz_pos] = real_char;
 8000e74:	79fb      	ldrb	r3, [r7, #7]
 8000e76:	4a22      	ldr	r2, [pc, #136]	; (8000f00 <display_map+0x16c>)
 8000e78:	7812      	ldrb	r2, [r2, #0]
 8000e7a:	1899      	adds	r1, r3, r2
 8000e7c:	4b21      	ldr	r3, [pc, #132]	; (8000f04 <display_map+0x170>)
 8000e7e:	fb83 2301 	smull	r2, r3, r3, r1
 8000e82:	109a      	asrs	r2, r3, #2
 8000e84:	17cb      	asrs	r3, r1, #31
 8000e86:	1ad2      	subs	r2, r2, r3
 8000e88:	4613      	mov	r3, r2
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	4413      	add	r3, r2
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	1aca      	subs	r2, r1, r3
 8000e92:	4b1d      	ldr	r3, [pc, #116]	; (8000f08 <display_map+0x174>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	4618      	mov	r0, r3
 8000e9a:	491c      	ldr	r1, [pc, #112]	; (8000f0c <display_map+0x178>)
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	00db      	lsls	r3, r3, #3
 8000ea0:	1a9b      	subs	r3, r3, r2
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	440b      	add	r3, r1
 8000ea6:	4403      	add	r3, r0
 8000ea8:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8000eac:	701a      	strb	r2, [r3, #0]
	// Wait for new game to start...
	while(1){

	}
  }
}
 8000eae:	e01e      	b.n	8000eee <display_map+0x15a>
	char buf[100] = "";
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	f107 0310 	add.w	r3, r7, #16
 8000eb8:	2260      	movs	r2, #96	; 0x60
 8000eba:	2100      	movs	r1, #0
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f008 fdbd 	bl	8009a3c <memset>
	sprintf(buf, "Score: %d points", (int) score);
 8000ec2:	4b13      	ldr	r3, [pc, #76]	; (8000f10 <display_map+0x17c>)
 8000ec4:	edd3 7a00 	vldr	s15, [r3]
 8000ec8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ecc:	f107 030c 	add.w	r3, r7, #12
 8000ed0:	ee17 2a90 	vmov	r2, s15
 8000ed4:	490f      	ldr	r1, [pc, #60]	; (8000f14 <display_map+0x180>)
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f008 fd90 	bl	80099fc <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) buf, sizeof(buf), 1000);
 8000edc:	f107 010c 	add.w	r1, r7, #12
 8000ee0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ee4:	2264      	movs	r2, #100	; 0x64
 8000ee6:	4804      	ldr	r0, [pc, #16]	; (8000ef8 <display_map+0x164>)
 8000ee8:	f007 ffea 	bl	8008ec0 <HAL_UART_Transmit>
	while(1){
 8000eec:	e7fe      	b.n	8000eec <display_map+0x158>
}
 8000eee:	3778      	adds	r7, #120	; 0x78
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	20000004 	.word	0x20000004
 8000ef8:	200003f4 	.word	0x200003f4
 8000efc:	2000048c 	.word	0x2000048c
 8000f00:	2000000a 	.word	0x2000000a
 8000f04:	66666667 	.word	0x66666667
 8000f08:	20000009 	.word	0x20000009
 8000f0c:	2000000c 	.word	0x2000000c
 8000f10:	20000488 	.word	0x20000488
 8000f14:	0800a35c 	.word	0x0800a35c

08000f18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f1c:	f002 f8f6 	bl	800310c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f20:	f000 f866 	bl	8000ff0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000f24:	f000 f8b6 	bl	8001094 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f28:	f000 fbcc 	bl	80016c4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f2c:	f000 fba4 	bl	8001678 <MX_DMA_Init>
  MX_I2C2_Init();
 8000f30:	f000 f998 	bl	8001264 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000f34:	f000 fb70 	bl	8001618 <MX_USART1_UART_Init>
  MX_QUADSPI_Init();
 8000f38:	f000 f9d4 	bl	80012e4 <MX_QUADSPI_Init>
  MX_ADC1_Init();
 8000f3c:	f000 f8d8 	bl	80010f0 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000f40:	f000 fa58 	bl	80013f4 <MX_TIM3_Init>
  MX_RNG_Init();
 8000f44:	f000 f9f4 	bl	8001330 <MX_RNG_Init>
  MX_TIM2_Init();
 8000f48:	f000 fa06 	bl	8001358 <MX_TIM2_Init>
  MX_TIM5_Init();
 8000f4c:	f000 fb14 	bl	8001578 <MX_TIM5_Init>
  MX_DAC1_Init();
 8000f50:	f000 f956 	bl	8001200 <MX_DAC1_Init>
  MX_TIM4_Init();
 8000f54:	f000 fac2 	bl	80014dc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1, (uint32_t* ) joystickXY, 2);
 8000f58:	2202      	movs	r2, #2
 8000f5a:	491c      	ldr	r1, [pc, #112]	; (8000fcc <main+0xb4>)
 8000f5c:	481c      	ldr	r0, [pc, #112]	; (8000fd0 <main+0xb8>)
 8000f5e:	f002 fc93 	bl	8003888 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim3);
 8000f62:	481c      	ldr	r0, [pc, #112]	; (8000fd4 <main+0xbc>)
 8000f64:	f006 fea6 	bl	8007cb4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8000f68:	481b      	ldr	r0, [pc, #108]	; (8000fd8 <main+0xc0>)
 8000f6a:	f006 fea3 	bl	8007cb4 <HAL_TIM_Base_Start_IT>
//  enum state mode = straight;

  BSP_QSPI_Init();
 8000f6e:	f001 fcdd 	bl	800292c <BSP_QSPI_Init>

  HAL_GPIO_WritePin(errorLED_GPIO_Port, errorLED_Pin, GPIO_PIN_SET);
 8000f72:	2201      	movs	r2, #1
 8000f74:	2108      	movs	r1, #8
 8000f76:	4819      	ldr	r0, [pc, #100]	; (8000fdc <main+0xc4>)
 8000f78:	f004 fc2a 	bl	80057d0 <HAL_GPIO_WritePin>

  if(BSP_QSPI_Erase_Block(0) != QSPI_OK){
 8000f7c:	2000      	movs	r0, #0
 8000f7e:	f001 fe05 	bl	8002b8c <BSP_QSPI_Erase_Block>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <main+0x74>
	  Error_Handler();
 8000f88:	f001 f93e 	bl	8002208 <Error_Handler>
  }

  gen_notes();
 8000f8c:	f000 fc60 	bl	8001850 <gen_notes>
  gen_music();
 8000f90:	f000 fc06 	bl	80017a0 <gen_music>

  HAL_TIM_Base_Start_IT(&htim2);
 8000f94:	4812      	ldr	r0, [pc, #72]	; (8000fe0 <main+0xc8>)
 8000f96:	f006 fe8d 	bl	8007cb4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 8000f9a:	4812      	ldr	r0, [pc, #72]	; (8000fe4 <main+0xcc>)
 8000f9c:	f006 fe8a 	bl	8007cb4 <HAL_TIM_Base_Start_IT>
////	  		HAL_Delay(100);
//	  		break;
//	  	  default:
//	  }

	  HAL_Delay(500);
 8000fa0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fa4:	f002 f926 	bl	80031f4 <HAL_Delay>
	  display_map(top_row);
 8000fa8:	4b0f      	ldr	r3, [pc, #60]	; (8000fe8 <main+0xd0>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff fef1 	bl	8000d94 <display_map>
	  update_map();
 8000fb2:	f7ff fe31 	bl	8000c18 <update_map>
//	   Start keeping score
	  score++;
 8000fb6:	4b0d      	ldr	r3, [pc, #52]	; (8000fec <main+0xd4>)
 8000fb8:	edd3 7a00 	vldr	s15, [r3]
 8000fbc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000fc0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000fc4:	4b09      	ldr	r3, [pc, #36]	; (8000fec <main+0xd4>)
 8000fc6:	edc3 7a00 	vstr	s15, [r3]
	  HAL_Delay(500);
 8000fca:	e7e9      	b.n	8000fa0 <main+0x88>
 8000fcc:	2000047c 	.word	0x2000047c
 8000fd0:	20000114 	.word	0x20000114
 8000fd4:	20000310 	.word	0x20000310
 8000fd8:	2000035c 	.word	0x2000035c
 8000fdc:	48001000 	.word	0x48001000
 8000fe0:	200002c4 	.word	0x200002c4
 8000fe4:	200003a8 	.word	0x200003a8
 8000fe8:	20002ba0 	.word	0x20002ba0
 8000fec:	20000488 	.word	0x20000488

08000ff0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b096      	sub	sp, #88	; 0x58
 8000ff4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ff6:	f107 0314 	add.w	r3, r7, #20
 8000ffa:	2244      	movs	r2, #68	; 0x44
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4618      	mov	r0, r3
 8001000:	f008 fd1c 	bl	8009a3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001004:	463b      	mov	r3, r7
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	605a      	str	r2, [r3, #4]
 800100c:	609a      	str	r2, [r3, #8]
 800100e:	60da      	str	r2, [r3, #12]
 8001010:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001012:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001016:	f004 fd4b 	bl	8005ab0 <HAL_PWREx_ControlVoltageScaling>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001020:	f001 f8f2 	bl	8002208 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001024:	2310      	movs	r3, #16
 8001026:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001028:	2301      	movs	r3, #1
 800102a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001030:	2360      	movs	r3, #96	; 0x60
 8001032:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001034:	2302      	movs	r3, #2
 8001036:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001038:	2301      	movs	r3, #1
 800103a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800103c:	2301      	movs	r3, #1
 800103e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001040:	2328      	movs	r3, #40	; 0x28
 8001042:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001044:	2307      	movs	r3, #7
 8001046:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001048:	2302      	movs	r3, #2
 800104a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800104c:	2302      	movs	r3, #2
 800104e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001050:	f107 0314 	add.w	r3, r7, #20
 8001054:	4618      	mov	r0, r3
 8001056:	f005 fa6d 	bl	8006534 <HAL_RCC_OscConfig>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001060:	f001 f8d2 	bl	8002208 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001064:	230f      	movs	r3, #15
 8001066:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001068:	2303      	movs	r3, #3
 800106a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800106c:	2300      	movs	r3, #0
 800106e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001070:	2300      	movs	r3, #0
 8001072:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001074:	2300      	movs	r3, #0
 8001076:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001078:	463b      	mov	r3, r7
 800107a:	2104      	movs	r1, #4
 800107c:	4618      	mov	r0, r3
 800107e:	f005 fe35 	bl	8006cec <HAL_RCC_ClockConfig>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001088:	f001 f8be 	bl	8002208 <Error_Handler>
  }
}
 800108c:	bf00      	nop
 800108e:	3758      	adds	r7, #88	; 0x58
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b0a2      	sub	sp, #136	; 0x88
 8001098:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800109a:	463b      	mov	r3, r7
 800109c:	2288      	movs	r2, #136	; 0x88
 800109e:	2100      	movs	r1, #0
 80010a0:	4618      	mov	r0, r3
 80010a2:	f008 fccb 	bl	8009a3c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC;
 80010a6:	f44f 2388 	mov.w	r3, #278528	; 0x44000
 80010aa:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80010ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80010b0:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 80010b2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80010b6:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80010b8:	2301      	movs	r3, #1
 80010ba:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80010bc:	2301      	movs	r3, #1
 80010be:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80010c0:	2318      	movs	r3, #24
 80010c2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80010c4:	2307      	movs	r3, #7
 80010c6:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80010c8:	2302      	movs	r3, #2
 80010ca:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80010cc:	2302      	movs	r3, #2
 80010ce:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 80010d0:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 80010d4:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010d6:	463b      	mov	r3, r7
 80010d8:	4618      	mov	r0, r3
 80010da:	f006 f82b 	bl	8007134 <HAL_RCCEx_PeriphCLKConfig>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 80010e4:	f001 f890 	bl	8002208 <Error_Handler>
  }
}
 80010e8:	bf00      	nop
 80010ea:	3788      	adds	r7, #136	; 0x88
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08a      	sub	sp, #40	; 0x28
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80010f6:	f107 031c 	add.w	r3, r7, #28
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	605a      	str	r2, [r3, #4]
 8001100:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001102:	1d3b      	adds	r3, r7, #4
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
 8001110:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001112:	4b37      	ldr	r3, [pc, #220]	; (80011f0 <MX_ADC1_Init+0x100>)
 8001114:	4a37      	ldr	r2, [pc, #220]	; (80011f4 <MX_ADC1_Init+0x104>)
 8001116:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001118:	4b35      	ldr	r3, [pc, #212]	; (80011f0 <MX_ADC1_Init+0x100>)
 800111a:	2200      	movs	r2, #0
 800111c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800111e:	4b34      	ldr	r3, [pc, #208]	; (80011f0 <MX_ADC1_Init+0x100>)
 8001120:	2200      	movs	r2, #0
 8001122:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001124:	4b32      	ldr	r3, [pc, #200]	; (80011f0 <MX_ADC1_Init+0x100>)
 8001126:	2200      	movs	r2, #0
 8001128:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800112a:	4b31      	ldr	r3, [pc, #196]	; (80011f0 <MX_ADC1_Init+0x100>)
 800112c:	2201      	movs	r2, #1
 800112e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001130:	4b2f      	ldr	r3, [pc, #188]	; (80011f0 <MX_ADC1_Init+0x100>)
 8001132:	2204      	movs	r2, #4
 8001134:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001136:	4b2e      	ldr	r3, [pc, #184]	; (80011f0 <MX_ADC1_Init+0x100>)
 8001138:	2200      	movs	r2, #0
 800113a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800113c:	4b2c      	ldr	r3, [pc, #176]	; (80011f0 <MX_ADC1_Init+0x100>)
 800113e:	2200      	movs	r2, #0
 8001140:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8001142:	4b2b      	ldr	r3, [pc, #172]	; (80011f0 <MX_ADC1_Init+0x100>)
 8001144:	2202      	movs	r2, #2
 8001146:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001148:	4b29      	ldr	r3, [pc, #164]	; (80011f0 <MX_ADC1_Init+0x100>)
 800114a:	2200      	movs	r2, #0
 800114c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 8001150:	4b27      	ldr	r3, [pc, #156]	; (80011f0 <MX_ADC1_Init+0x100>)
 8001152:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8001156:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001158:	4b25      	ldr	r3, [pc, #148]	; (80011f0 <MX_ADC1_Init+0x100>)
 800115a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800115e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001160:	4b23      	ldr	r3, [pc, #140]	; (80011f0 <MX_ADC1_Init+0x100>)
 8001162:	2201      	movs	r2, #1
 8001164:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001168:	4b21      	ldr	r3, [pc, #132]	; (80011f0 <MX_ADC1_Init+0x100>)
 800116a:	2200      	movs	r2, #0
 800116c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800116e:	4b20      	ldr	r3, [pc, #128]	; (80011f0 <MX_ADC1_Init+0x100>)
 8001170:	2200      	movs	r2, #0
 8001172:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001176:	481e      	ldr	r0, [pc, #120]	; (80011f0 <MX_ADC1_Init+0x100>)
 8001178:	f002 fa36 	bl	80035e8 <HAL_ADC_Init>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8001182:	f001 f841 	bl	8002208 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001186:	2300      	movs	r3, #0
 8001188:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800118a:	f107 031c 	add.w	r3, r7, #28
 800118e:	4619      	mov	r1, r3
 8001190:	4817      	ldr	r0, [pc, #92]	; (80011f0 <MX_ADC1_Init+0x100>)
 8001192:	f003 f985 	bl	80044a0 <HAL_ADCEx_MultiModeConfigChannel>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 800119c:	f001 f834 	bl	8002208 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80011a0:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <MX_ADC1_Init+0x108>)
 80011a2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011a4:	2306      	movs	r3, #6
 80011a6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 80011a8:	2303      	movs	r3, #3
 80011aa:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011ac:	237f      	movs	r3, #127	; 0x7f
 80011ae:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011b0:	2304      	movs	r3, #4
 80011b2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011b8:	1d3b      	adds	r3, r7, #4
 80011ba:	4619      	mov	r1, r3
 80011bc:	480c      	ldr	r0, [pc, #48]	; (80011f0 <MX_ADC1_Init+0x100>)
 80011be:	f002 fc3d 	bl	8003a3c <HAL_ADC_ConfigChannel>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80011c8:	f001 f81e 	bl	8002208 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80011cc:	4b0b      	ldr	r3, [pc, #44]	; (80011fc <MX_ADC1_Init+0x10c>)
 80011ce:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80011d0:	230c      	movs	r3, #12
 80011d2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011d4:	1d3b      	adds	r3, r7, #4
 80011d6:	4619      	mov	r1, r3
 80011d8:	4805      	ldr	r0, [pc, #20]	; (80011f0 <MX_ADC1_Init+0x100>)
 80011da:	f002 fc2f 	bl	8003a3c <HAL_ADC_ConfigChannel>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 80011e4:	f001 f810 	bl	8002208 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011e8:	bf00      	nop
 80011ea:	3728      	adds	r7, #40	; 0x28
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20000114 	.word	0x20000114
 80011f4:	50040000 	.word	0x50040000
 80011f8:	36902000 	.word	0x36902000
 80011fc:	3ac04000 	.word	0x3ac04000

08001200 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08a      	sub	sp, #40	; 0x28
 8001204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001206:	1d3b      	adds	r3, r7, #4
 8001208:	2224      	movs	r2, #36	; 0x24
 800120a:	2100      	movs	r1, #0
 800120c:	4618      	mov	r0, r3
 800120e:	f008 fc15 	bl	8009a3c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001212:	4b12      	ldr	r3, [pc, #72]	; (800125c <MX_DAC1_Init+0x5c>)
 8001214:	4a12      	ldr	r2, [pc, #72]	; (8001260 <MX_DAC1_Init+0x60>)
 8001216:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001218:	4810      	ldr	r0, [pc, #64]	; (800125c <MX_DAC1_Init+0x5c>)
 800121a:	f003 fb02 	bl	8004822 <HAL_DAC_Init>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001224:	f000 fff0 	bl	8002208 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001228:	2300      	movs	r3, #0
 800122a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 800122c:	2324      	movs	r3, #36	; 0x24
 800122e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001230:	2300      	movs	r3, #0
 8001232:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001234:	2300      	movs	r3, #0
 8001236:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800123c:	1d3b      	adds	r3, r7, #4
 800123e:	2200      	movs	r2, #0
 8001240:	4619      	mov	r1, r3
 8001242:	4806      	ldr	r0, [pc, #24]	; (800125c <MX_DAC1_Init+0x5c>)
 8001244:	f003 fc3f 	bl	8004ac6 <HAL_DAC_ConfigChannel>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800124e:	f000 ffdb 	bl	8002208 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001252:	bf00      	nop
 8001254:	3728      	adds	r7, #40	; 0x28
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	200001c0 	.word	0x200001c0
 8001260:	40007400 	.word	0x40007400

08001264 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001268:	4b1b      	ldr	r3, [pc, #108]	; (80012d8 <MX_I2C2_Init+0x74>)
 800126a:	4a1c      	ldr	r2, [pc, #112]	; (80012dc <MX_I2C2_Init+0x78>)
 800126c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 800126e:	4b1a      	ldr	r3, [pc, #104]	; (80012d8 <MX_I2C2_Init+0x74>)
 8001270:	4a1b      	ldr	r2, [pc, #108]	; (80012e0 <MX_I2C2_Init+0x7c>)
 8001272:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001274:	4b18      	ldr	r3, [pc, #96]	; (80012d8 <MX_I2C2_Init+0x74>)
 8001276:	2200      	movs	r2, #0
 8001278:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800127a:	4b17      	ldr	r3, [pc, #92]	; (80012d8 <MX_I2C2_Init+0x74>)
 800127c:	2201      	movs	r2, #1
 800127e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001280:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <MX_I2C2_Init+0x74>)
 8001282:	2200      	movs	r2, #0
 8001284:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001286:	4b14      	ldr	r3, [pc, #80]	; (80012d8 <MX_I2C2_Init+0x74>)
 8001288:	2200      	movs	r2, #0
 800128a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800128c:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <MX_I2C2_Init+0x74>)
 800128e:	2200      	movs	r2, #0
 8001290:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001292:	4b11      	ldr	r3, [pc, #68]	; (80012d8 <MX_I2C2_Init+0x74>)
 8001294:	2200      	movs	r2, #0
 8001296:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001298:	4b0f      	ldr	r3, [pc, #60]	; (80012d8 <MX_I2C2_Init+0x74>)
 800129a:	2200      	movs	r2, #0
 800129c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800129e:	480e      	ldr	r0, [pc, #56]	; (80012d8 <MX_I2C2_Init+0x74>)
 80012a0:	f004 fac6 	bl	8005830 <HAL_I2C_Init>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80012aa:	f000 ffad 	bl	8002208 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012ae:	2100      	movs	r1, #0
 80012b0:	4809      	ldr	r0, [pc, #36]	; (80012d8 <MX_I2C2_Init+0x74>)
 80012b2:	f004 fb58 	bl	8005966 <HAL_I2CEx_ConfigAnalogFilter>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80012bc:	f000 ffa4 	bl	8002208 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80012c0:	2100      	movs	r1, #0
 80012c2:	4805      	ldr	r0, [pc, #20]	; (80012d8 <MX_I2C2_Init+0x74>)
 80012c4:	f004 fb9a 	bl	80059fc <HAL_I2CEx_ConfigDigitalFilter>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80012ce:	f000 ff9b 	bl	8002208 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	2000021c 	.word	0x2000021c
 80012dc:	40005800 	.word	0x40005800
 80012e0:	10909cec 	.word	0x10909cec

080012e4 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80012e8:	4b0f      	ldr	r3, [pc, #60]	; (8001328 <MX_QUADSPI_Init+0x44>)
 80012ea:	4a10      	ldr	r2, [pc, #64]	; (800132c <MX_QUADSPI_Init+0x48>)
 80012ec:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80012ee:	4b0e      	ldr	r3, [pc, #56]	; (8001328 <MX_QUADSPI_Init+0x44>)
 80012f0:	22ff      	movs	r2, #255	; 0xff
 80012f2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80012f4:	4b0c      	ldr	r3, [pc, #48]	; (8001328 <MX_QUADSPI_Init+0x44>)
 80012f6:	2201      	movs	r2, #1
 80012f8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80012fa:	4b0b      	ldr	r3, [pc, #44]	; (8001328 <MX_QUADSPI_Init+0x44>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8001300:	4b09      	ldr	r3, [pc, #36]	; (8001328 <MX_QUADSPI_Init+0x44>)
 8001302:	2201      	movs	r2, #1
 8001304:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001306:	4b08      	ldr	r3, [pc, #32]	; (8001328 <MX_QUADSPI_Init+0x44>)
 8001308:	2200      	movs	r2, #0
 800130a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800130c:	4b06      	ldr	r3, [pc, #24]	; (8001328 <MX_QUADSPI_Init+0x44>)
 800130e:	2200      	movs	r2, #0
 8001310:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001312:	4805      	ldr	r0, [pc, #20]	; (8001328 <MX_QUADSPI_Init+0x44>)
 8001314:	f004 fc22 	bl	8005b5c <HAL_QSPI_Init>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800131e:	f000 ff73 	bl	8002208 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20000270 	.word	0x20000270
 800132c:	a0001000 	.word	0xa0001000

08001330 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001334:	4b06      	ldr	r3, [pc, #24]	; (8001350 <MX_RNG_Init+0x20>)
 8001336:	4a07      	ldr	r2, [pc, #28]	; (8001354 <MX_RNG_Init+0x24>)
 8001338:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800133a:	4805      	ldr	r0, [pc, #20]	; (8001350 <MX_RNG_Init+0x20>)
 800133c:	f006 fbb6 	bl	8007aac <HAL_RNG_Init>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001346:	f000 ff5f 	bl	8002208 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	200002b4 	.word	0x200002b4
 8001354:	50060800 	.word	0x50060800

08001358 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b088      	sub	sp, #32
 800135c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800135e:	f107 0310 	add.w	r3, r7, #16
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	609a      	str	r2, [r3, #8]
 800136a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800136c:	1d3b      	adds	r3, r7, #4
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001376:	4b1e      	ldr	r3, [pc, #120]	; (80013f0 <MX_TIM2_Init+0x98>)
 8001378:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800137c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800137e:	4b1c      	ldr	r3, [pc, #112]	; (80013f0 <MX_TIM2_Init+0x98>)
 8001380:	2200      	movs	r2, #0
 8001382:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001384:	4b1a      	ldr	r3, [pc, #104]	; (80013f0 <MX_TIM2_Init+0x98>)
 8001386:	2200      	movs	r2, #0
 8001388:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 305;
 800138a:	4b19      	ldr	r3, [pc, #100]	; (80013f0 <MX_TIM2_Init+0x98>)
 800138c:	f240 1231 	movw	r2, #305	; 0x131
 8001390:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001392:	4b17      	ldr	r3, [pc, #92]	; (80013f0 <MX_TIM2_Init+0x98>)
 8001394:	2200      	movs	r2, #0
 8001396:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001398:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <MX_TIM2_Init+0x98>)
 800139a:	2200      	movs	r2, #0
 800139c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800139e:	4814      	ldr	r0, [pc, #80]	; (80013f0 <MX_TIM2_Init+0x98>)
 80013a0:	f006 fc31 	bl	8007c06 <HAL_TIM_Base_Init>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80013aa:	f000 ff2d 	bl	8002208 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013b2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013b4:	f107 0310 	add.w	r3, r7, #16
 80013b8:	4619      	mov	r1, r3
 80013ba:	480d      	ldr	r0, [pc, #52]	; (80013f0 <MX_TIM2_Init+0x98>)
 80013bc:	f006 ff90 	bl	80082e0 <HAL_TIM_ConfigClockSource>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80013c6:	f000 ff1f 	bl	8002208 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80013ca:	2320      	movs	r3, #32
 80013cc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ce:	2300      	movs	r3, #0
 80013d0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013d2:	1d3b      	adds	r3, r7, #4
 80013d4:	4619      	mov	r1, r3
 80013d6:	4806      	ldr	r0, [pc, #24]	; (80013f0 <MX_TIM2_Init+0x98>)
 80013d8:	f007 fc7e 	bl	8008cd8 <HAL_TIMEx_MasterConfigSynchronization>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80013e2:	f000 ff11 	bl	8002208 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013e6:	bf00      	nop
 80013e8:	3720      	adds	r7, #32
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	200002c4 	.word	0x200002c4

080013f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08e      	sub	sp, #56	; 0x38
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	609a      	str	r2, [r3, #8]
 8001406:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001408:	f107 031c 	add.w	r3, r7, #28
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001414:	463b      	mov	r3, r7
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]
 800141c:	609a      	str	r2, [r3, #8]
 800141e:	60da      	str	r2, [r3, #12]
 8001420:	611a      	str	r2, [r3, #16]
 8001422:	615a      	str	r2, [r3, #20]
 8001424:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001426:	4b2b      	ldr	r3, [pc, #172]	; (80014d4 <MX_TIM3_Init+0xe0>)
 8001428:	4a2b      	ldr	r2, [pc, #172]	; (80014d8 <MX_TIM3_Init+0xe4>)
 800142a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1-1;
 800142c:	4b29      	ldr	r3, [pc, #164]	; (80014d4 <MX_TIM3_Init+0xe0>)
 800142e:	2200      	movs	r2, #0
 8001430:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001432:	4b28      	ldr	r3, [pc, #160]	; (80014d4 <MX_TIM3_Init+0xe0>)
 8001434:	2200      	movs	r2, #0
 8001436:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8000-1;
 8001438:	4b26      	ldr	r3, [pc, #152]	; (80014d4 <MX_TIM3_Init+0xe0>)
 800143a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800143e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001440:	4b24      	ldr	r3, [pc, #144]	; (80014d4 <MX_TIM3_Init+0xe0>)
 8001442:	2200      	movs	r2, #0
 8001444:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001446:	4b23      	ldr	r3, [pc, #140]	; (80014d4 <MX_TIM3_Init+0xe0>)
 8001448:	2200      	movs	r2, #0
 800144a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800144c:	4821      	ldr	r0, [pc, #132]	; (80014d4 <MX_TIM3_Init+0xe0>)
 800144e:	f006 fbda 	bl	8007c06 <HAL_TIM_Base_Init>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001458:	f000 fed6 	bl	8002208 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800145c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001460:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001462:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001466:	4619      	mov	r1, r3
 8001468:	481a      	ldr	r0, [pc, #104]	; (80014d4 <MX_TIM3_Init+0xe0>)
 800146a:	f006 ff39 	bl	80082e0 <HAL_TIM_ConfigClockSource>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001474:	f000 fec8 	bl	8002208 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001478:	4816      	ldr	r0, [pc, #88]	; (80014d4 <MX_TIM3_Init+0xe0>)
 800147a:	f006 fcba 	bl	8007df2 <HAL_TIM_PWM_Init>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001484:	f000 fec0 	bl	8002208 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001488:	2320      	movs	r3, #32
 800148a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800148c:	2300      	movs	r3, #0
 800148e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001490:	f107 031c 	add.w	r3, r7, #28
 8001494:	4619      	mov	r1, r3
 8001496:	480f      	ldr	r0, [pc, #60]	; (80014d4 <MX_TIM3_Init+0xe0>)
 8001498:	f007 fc1e 	bl	8008cd8 <HAL_TIMEx_MasterConfigSynchronization>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80014a2:	f000 feb1 	bl	8002208 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014a6:	2360      	movs	r3, #96	; 0x60
 80014a8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80014aa:	2300      	movs	r3, #0
 80014ac:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014ae:	2300      	movs	r3, #0
 80014b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014b6:	463b      	mov	r3, r7
 80014b8:	2200      	movs	r2, #0
 80014ba:	4619      	mov	r1, r3
 80014bc:	4805      	ldr	r0, [pc, #20]	; (80014d4 <MX_TIM3_Init+0xe0>)
 80014be:	f006 fdfb 	bl	80080b8 <HAL_TIM_PWM_ConfigChannel>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80014c8:	f000 fe9e 	bl	8002208 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014cc:	bf00      	nop
 80014ce:	3738      	adds	r7, #56	; 0x38
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	20000310 	.word	0x20000310
 80014d8:	40000400 	.word	0x40000400

080014dc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b088      	sub	sp, #32
 80014e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014e2:	f107 0310 	add.w	r3, r7, #16
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014f0:	1d3b      	adds	r3, r7, #4
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]
 80014f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80014fa:	4b1d      	ldr	r3, [pc, #116]	; (8001570 <MX_TIM4_Init+0x94>)
 80014fc:	4a1d      	ldr	r2, [pc, #116]	; (8001574 <MX_TIM4_Init+0x98>)
 80014fe:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10-1;
 8001500:	4b1b      	ldr	r3, [pc, #108]	; (8001570 <MX_TIM4_Init+0x94>)
 8001502:	2209      	movs	r2, #9
 8001504:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001506:	4b1a      	ldr	r3, [pc, #104]	; (8001570 <MX_TIM4_Init+0x94>)
 8001508:	2200      	movs	r2, #0
 800150a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 8000-1;
 800150c:	4b18      	ldr	r3, [pc, #96]	; (8001570 <MX_TIM4_Init+0x94>)
 800150e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001512:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001514:	4b16      	ldr	r3, [pc, #88]	; (8001570 <MX_TIM4_Init+0x94>)
 8001516:	2200      	movs	r2, #0
 8001518:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800151a:	4b15      	ldr	r3, [pc, #84]	; (8001570 <MX_TIM4_Init+0x94>)
 800151c:	2200      	movs	r2, #0
 800151e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001520:	4813      	ldr	r0, [pc, #76]	; (8001570 <MX_TIM4_Init+0x94>)
 8001522:	f006 fb70 	bl	8007c06 <HAL_TIM_Base_Init>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 800152c:	f000 fe6c 	bl	8002208 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001530:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001534:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001536:	f107 0310 	add.w	r3, r7, #16
 800153a:	4619      	mov	r1, r3
 800153c:	480c      	ldr	r0, [pc, #48]	; (8001570 <MX_TIM4_Init+0x94>)
 800153e:	f006 fecf 	bl	80082e0 <HAL_TIM_ConfigClockSource>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001548:	f000 fe5e 	bl	8002208 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800154c:	2300      	movs	r3, #0
 800154e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001550:	2300      	movs	r3, #0
 8001552:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001554:	1d3b      	adds	r3, r7, #4
 8001556:	4619      	mov	r1, r3
 8001558:	4805      	ldr	r0, [pc, #20]	; (8001570 <MX_TIM4_Init+0x94>)
 800155a:	f007 fbbd 	bl	8008cd8 <HAL_TIMEx_MasterConfigSynchronization>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001564:	f000 fe50 	bl	8002208 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001568:	bf00      	nop
 800156a:	3720      	adds	r7, #32
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	2000035c 	.word	0x2000035c
 8001574:	40000800 	.word	0x40000800

08001578 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b088      	sub	sp, #32
 800157c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800157e:	f107 0310 	add.w	r3, r7, #16
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]
 8001588:	609a      	str	r2, [r3, #8]
 800158a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800158c:	1d3b      	adds	r3, r7, #4
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]
 8001594:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001596:	4b1e      	ldr	r3, [pc, #120]	; (8001610 <MX_TIM5_Init+0x98>)
 8001598:	4a1e      	ldr	r2, [pc, #120]	; (8001614 <MX_TIM5_Init+0x9c>)
 800159a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 40000;
 800159c:	4b1c      	ldr	r3, [pc, #112]	; (8001610 <MX_TIM5_Init+0x98>)
 800159e:	f649 4240 	movw	r2, #40000	; 0x9c40
 80015a2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a4:	4b1a      	ldr	r3, [pc, #104]	; (8001610 <MX_TIM5_Init+0x98>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000;
 80015aa:	4b19      	ldr	r3, [pc, #100]	; (8001610 <MX_TIM5_Init+0x98>)
 80015ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015b0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015b2:	4b17      	ldr	r3, [pc, #92]	; (8001610 <MX_TIM5_Init+0x98>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015b8:	4b15      	ldr	r3, [pc, #84]	; (8001610 <MX_TIM5_Init+0x98>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80015be:	4814      	ldr	r0, [pc, #80]	; (8001610 <MX_TIM5_Init+0x98>)
 80015c0:	f006 fb21 	bl	8007c06 <HAL_TIM_Base_Init>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 80015ca:	f000 fe1d 	bl	8002208 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80015d4:	f107 0310 	add.w	r3, r7, #16
 80015d8:	4619      	mov	r1, r3
 80015da:	480d      	ldr	r0, [pc, #52]	; (8001610 <MX_TIM5_Init+0x98>)
 80015dc:	f006 fe80 	bl	80082e0 <HAL_TIM_ConfigClockSource>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 80015e6:	f000 fe0f 	bl	8002208 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ea:	2300      	movs	r3, #0
 80015ec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ee:	2300      	movs	r3, #0
 80015f0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80015f2:	1d3b      	adds	r3, r7, #4
 80015f4:	4619      	mov	r1, r3
 80015f6:	4806      	ldr	r0, [pc, #24]	; (8001610 <MX_TIM5_Init+0x98>)
 80015f8:	f007 fb6e 	bl	8008cd8 <HAL_TIMEx_MasterConfigSynchronization>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8001602:	f000 fe01 	bl	8002208 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001606:	bf00      	nop
 8001608:	3720      	adds	r7, #32
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	200003a8 	.word	0x200003a8
 8001614:	40000c00 	.word	0x40000c00

08001618 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800161c:	4b14      	ldr	r3, [pc, #80]	; (8001670 <MX_USART1_UART_Init+0x58>)
 800161e:	4a15      	ldr	r2, [pc, #84]	; (8001674 <MX_USART1_UART_Init+0x5c>)
 8001620:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001622:	4b13      	ldr	r3, [pc, #76]	; (8001670 <MX_USART1_UART_Init+0x58>)
 8001624:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001628:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800162a:	4b11      	ldr	r3, [pc, #68]	; (8001670 <MX_USART1_UART_Init+0x58>)
 800162c:	2200      	movs	r2, #0
 800162e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001630:	4b0f      	ldr	r3, [pc, #60]	; (8001670 <MX_USART1_UART_Init+0x58>)
 8001632:	2200      	movs	r2, #0
 8001634:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001636:	4b0e      	ldr	r3, [pc, #56]	; (8001670 <MX_USART1_UART_Init+0x58>)
 8001638:	2200      	movs	r2, #0
 800163a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800163c:	4b0c      	ldr	r3, [pc, #48]	; (8001670 <MX_USART1_UART_Init+0x58>)
 800163e:	220c      	movs	r2, #12
 8001640:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001642:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <MX_USART1_UART_Init+0x58>)
 8001644:	2200      	movs	r2, #0
 8001646:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001648:	4b09      	ldr	r3, [pc, #36]	; (8001670 <MX_USART1_UART_Init+0x58>)
 800164a:	2200      	movs	r2, #0
 800164c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800164e:	4b08      	ldr	r3, [pc, #32]	; (8001670 <MX_USART1_UART_Init+0x58>)
 8001650:	2200      	movs	r2, #0
 8001652:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001654:	4b06      	ldr	r3, [pc, #24]	; (8001670 <MX_USART1_UART_Init+0x58>)
 8001656:	2200      	movs	r2, #0
 8001658:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800165a:	4805      	ldr	r0, [pc, #20]	; (8001670 <MX_USART1_UART_Init+0x58>)
 800165c:	f007 fbe2 	bl	8008e24 <HAL_UART_Init>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001666:	f000 fdcf 	bl	8002208 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	200003f4 	.word	0x200003f4
 8001674:	40013800 	.word	0x40013800

08001678 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800167e:	4b10      	ldr	r3, [pc, #64]	; (80016c0 <MX_DMA_Init+0x48>)
 8001680:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001682:	4a0f      	ldr	r2, [pc, #60]	; (80016c0 <MX_DMA_Init+0x48>)
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	6493      	str	r3, [r2, #72]	; 0x48
 800168a:	4b0d      	ldr	r3, [pc, #52]	; (80016c0 <MX_DMA_Init+0x48>)
 800168c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	607b      	str	r3, [r7, #4]
 8001694:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001696:	2200      	movs	r2, #0
 8001698:	2100      	movs	r1, #0
 800169a:	200b      	movs	r0, #11
 800169c:	f003 f88b 	bl	80047b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80016a0:	200b      	movs	r0, #11
 80016a2:	f003 f8a4 	bl	80047ee <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80016a6:	2200      	movs	r2, #0
 80016a8:	2100      	movs	r1, #0
 80016aa:	200d      	movs	r0, #13
 80016ac:	f003 f883 	bl	80047b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80016b0:	200d      	movs	r0, #13
 80016b2:	f003 f89c 	bl	80047ee <HAL_NVIC_EnableIRQ>

}
 80016b6:	bf00      	nop
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40021000 	.word	0x40021000

080016c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b08a      	sub	sp, #40	; 0x28
 80016c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ca:	f107 0314 	add.w	r3, r7, #20
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	605a      	str	r2, [r3, #4]
 80016d4:	609a      	str	r2, [r3, #8]
 80016d6:	60da      	str	r2, [r3, #12]
 80016d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016da:	4b2e      	ldr	r3, [pc, #184]	; (8001794 <MX_GPIO_Init+0xd0>)
 80016dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016de:	4a2d      	ldr	r2, [pc, #180]	; (8001794 <MX_GPIO_Init+0xd0>)
 80016e0:	f043 0310 	orr.w	r3, r3, #16
 80016e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016e6:	4b2b      	ldr	r3, [pc, #172]	; (8001794 <MX_GPIO_Init+0xd0>)
 80016e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ea:	f003 0310 	and.w	r3, r3, #16
 80016ee:	613b      	str	r3, [r7, #16]
 80016f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016f2:	4b28      	ldr	r3, [pc, #160]	; (8001794 <MX_GPIO_Init+0xd0>)
 80016f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f6:	4a27      	ldr	r2, [pc, #156]	; (8001794 <MX_GPIO_Init+0xd0>)
 80016f8:	f043 0304 	orr.w	r3, r3, #4
 80016fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016fe:	4b25      	ldr	r3, [pc, #148]	; (8001794 <MX_GPIO_Init+0xd0>)
 8001700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001702:	f003 0304 	and.w	r3, r3, #4
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800170a:	4b22      	ldr	r3, [pc, #136]	; (8001794 <MX_GPIO_Init+0xd0>)
 800170c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800170e:	4a21      	ldr	r2, [pc, #132]	; (8001794 <MX_GPIO_Init+0xd0>)
 8001710:	f043 0301 	orr.w	r3, r3, #1
 8001714:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001716:	4b1f      	ldr	r3, [pc, #124]	; (8001794 <MX_GPIO_Init+0xd0>)
 8001718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	60bb      	str	r3, [r7, #8]
 8001720:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001722:	4b1c      	ldr	r3, [pc, #112]	; (8001794 <MX_GPIO_Init+0xd0>)
 8001724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001726:	4a1b      	ldr	r2, [pc, #108]	; (8001794 <MX_GPIO_Init+0xd0>)
 8001728:	f043 0302 	orr.w	r3, r3, #2
 800172c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800172e:	4b19      	ldr	r3, [pc, #100]	; (8001794 <MX_GPIO_Init+0xd0>)
 8001730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	607b      	str	r3, [r7, #4]
 8001738:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(errorLED_GPIO_Port, errorLED_Pin, GPIO_PIN_RESET);
 800173a:	2200      	movs	r2, #0
 800173c:	2108      	movs	r1, #8
 800173e:	4816      	ldr	r0, [pc, #88]	; (8001798 <MX_GPIO_Init+0xd4>)
 8001740:	f004 f846 	bl	80057d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : errorLED_Pin */
  GPIO_InitStruct.Pin = errorLED_Pin;
 8001744:	2308      	movs	r3, #8
 8001746:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001748:	2301      	movs	r3, #1
 800174a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001750:	2300      	movs	r3, #0
 8001752:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(errorLED_GPIO_Port, &GPIO_InitStruct);
 8001754:	f107 0314 	add.w	r3, r7, #20
 8001758:	4619      	mov	r1, r3
 800175a:	480f      	ldr	r0, [pc, #60]	; (8001798 <MX_GPIO_Init+0xd4>)
 800175c:	f003 fd9a 	bl	8005294 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB_Pin */
  GPIO_InitStruct.Pin = PB_Pin;
 8001760:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001764:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001766:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800176a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PB_GPIO_Port, &GPIO_InitStruct);
 8001770:	f107 0314 	add.w	r3, r7, #20
 8001774:	4619      	mov	r1, r3
 8001776:	4809      	ldr	r0, [pc, #36]	; (800179c <MX_GPIO_Init+0xd8>)
 8001778:	f003 fd8c 	bl	8005294 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800177c:	2200      	movs	r2, #0
 800177e:	2100      	movs	r1, #0
 8001780:	2028      	movs	r0, #40	; 0x28
 8001782:	f003 f818 	bl	80047b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001786:	2028      	movs	r0, #40	; 0x28
 8001788:	f003 f831 	bl	80047ee <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800178c:	bf00      	nop
 800178e:	3728      	adds	r7, #40	; 0x28
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40021000 	.word	0x40021000
 8001798:	48001000 	.word	0x48001000
 800179c:	48000800 	.word	0x48000800

080017a0 <gen_music>:

/* USER CODE BEGIN 4 */

void gen_music(void){
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0

	if(BSP_QSPI_Read(note_0, NOTE_0_ADD, sizeof(uint32_t)*(NOTE_0_SIZE))!= QSPI_OK){
 80017a4:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80017a8:	2164      	movs	r1, #100	; 0x64
 80017aa:	4823      	ldr	r0, [pc, #140]	; (8001838 <gen_music+0x98>)
 80017ac:	f001 f92a 	bl	8002a04 <BSP_QSPI_Read>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <gen_music+0x1a>
		Error_Handler();
 80017b6:	f000 fd27 	bl	8002208 <Error_Handler>
	}
	if(BSP_QSPI_Read(note_1, NOTE_1_ADD, sizeof(uint32_t)*(NOTE_1_SIZE))!= QSPI_OK){
 80017ba:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80017be:	f240 5114 	movw	r1, #1300	; 0x514
 80017c2:	481e      	ldr	r0, [pc, #120]	; (800183c <gen_music+0x9c>)
 80017c4:	f001 f91e 	bl	8002a04 <BSP_QSPI_Read>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <gen_music+0x32>
		Error_Handler();
 80017ce:	f000 fd1b 	bl	8002208 <Error_Handler>
	}
	if(BSP_QSPI_Read(note_2, NOTE_2_ADD, sizeof(uint32_t)*(NOTE_2_SIZE))!= QSPI_OK){
 80017d2:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 80017d6:	f640 3154 	movw	r1, #2900	; 0xb54
 80017da:	4819      	ldr	r0, [pc, #100]	; (8001840 <gen_music+0xa0>)
 80017dc:	f001 f912 	bl	8002a04 <BSP_QSPI_Read>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <gen_music+0x4a>
		Error_Handler();
 80017e6:	f000 fd0f 	bl	8002208 <Error_Handler>
	}
	if(BSP_QSPI_Read(note_3, NOTE_3_ADD, sizeof(uint32_t)*(NOTE_3_SIZE))!= QSPI_OK){
 80017ea:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80017ee:	f241 71d4 	movw	r1, #6100	; 0x17d4
 80017f2:	4814      	ldr	r0, [pc, #80]	; (8001844 <gen_music+0xa4>)
 80017f4:	f001 f906 	bl	8002a04 <BSP_QSPI_Read>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <gen_music+0x62>
		Error_Handler();
 80017fe:	f000 fd03 	bl	8002208 <Error_Handler>
	}
	if(BSP_QSPI_Read(note_4, NOTE_4_ADD, sizeof(uint32_t)*(NOTE_4_SIZE))!= QSPI_OK){
 8001802:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001806:	f641 4184 	movw	r1, #7300	; 0x1c84
 800180a:	480f      	ldr	r0, [pc, #60]	; (8001848 <gen_music+0xa8>)
 800180c:	f001 f8fa 	bl	8002a04 <BSP_QSPI_Read>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <gen_music+0x7a>
		Error_Handler();
 8001816:	f000 fcf7 	bl	8002208 <Error_Handler>
	}
	if(BSP_QSPI_Read(note_5, NOTE_5_ADD, sizeof(uint32_t)*(NOTE_5_SIZE))!= QSPI_OK){
 800181a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800181e:	f641 71a4 	movw	r1, #8100	; 0x1fa4
 8001822:	480a      	ldr	r0, [pc, #40]	; (800184c <gen_music+0xac>)
 8001824:	f001 f8ee 	bl	8002a04 <BSP_QSPI_Read>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <gen_music+0x92>
		Error_Handler();
 800182e:	f000 fceb 	bl	8002208 <Error_Handler>
	}

}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	20000490 	.word	0x20000490
 800183c:	20000940 	.word	0x20000940
 8001840:	20000f80 	.word	0x20000f80
 8001844:	20001c00 	.word	0x20001c00
 8001848:	200020b0 	.word	0x200020b0
 800184c:	200023d0 	.word	0x200023d0

08001850 <gen_notes>:

void gen_notes(void){
 8001850:	b580      	push	{r7, lr}
 8001852:	f5ad 5d1c 	sub.w	sp, sp, #9984	; 0x2700
 8001856:	b08e      	sub	sp, #56	; 0x38
 8001858:	af00      	add	r7, sp, #0
	uint32_t note_2_temp[NOTE_2_SIZE];
	uint32_t note_3_temp[NOTE_3_SIZE];
	uint32_t note_4_temp[NOTE_4_SIZE];
	uint32_t note_5_temp[NOTE_5_SIZE];

	float theta = 0.0;
 800185a:	f04f 0300 	mov.w	r3, #0
 800185e:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 8001862:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8001866:	6013      	str	r3, [r2, #0]
	float val = 0.0;
 8001868:	f04f 0300 	mov.w	r3, #0
 800186c:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 8001870:	f102 0218 	add.w	r2, r2, #24
 8001874:	6013      	str	r3, [r2, #0]
	uint32_t size = NOTE_0_SIZE;
 8001876:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800187a:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 800187e:	f102 0214 	add.w	r2, r2, #20
 8001882:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < size; i++){
 8001884:	2300      	movs	r3, #0
 8001886:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 800188a:	f102 0230 	add.w	r2, r2, #48	; 0x30
 800188e:	6013      	str	r3, [r2, #0]
 8001890:	e063      	b.n	800195a <gen_notes+0x10a>
		val = (VALUE_LIMIT/2.0)*arm_sin_f32(theta);
 8001892:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 8001896:	f103 0334 	add.w	r3, r3, #52	; 0x34
 800189a:	ed93 0a00 	vldr	s0, [r3]
 800189e:	f008 f867 	bl	8009970 <arm_sin_f32>
 80018a2:	ee10 3a10 	vmov	r3, s0
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7fe ff70 	bl	800078c <__aeabi_f2d>
 80018ac:	f04f 0200 	mov.w	r2, #0
 80018b0:	4bd4      	ldr	r3, [pc, #848]	; (8001c04 <gen_notes+0x3b4>)
 80018b2:	f7fe fcdd 	bl	8000270 <__aeabi_dmul>
 80018b6:	4602      	mov	r2, r0
 80018b8:	460b      	mov	r3, r1
 80018ba:	4610      	mov	r0, r2
 80018bc:	4619      	mov	r1, r3
 80018be:	f7fe ffdd 	bl	800087c <__aeabi_d2f>
 80018c2:	4603      	mov	r3, r0
 80018c4:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 80018c8:	f102 0218 	add.w	r2, r2, #24
 80018cc:	6013      	str	r3, [r2, #0]
		note_0_temp[i] = (uint32_t)(val + (VALUE_LIMIT/2.0));
 80018ce:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 80018d2:	f103 0318 	add.w	r3, r3, #24
 80018d6:	6818      	ldr	r0, [r3, #0]
 80018d8:	f7fe ff58 	bl	800078c <__aeabi_f2d>
 80018dc:	f04f 0200 	mov.w	r2, #0
 80018e0:	4bc8      	ldr	r3, [pc, #800]	; (8001c04 <gen_notes+0x3b4>)
 80018e2:	f7fe fdf5 	bl	80004d0 <__adddf3>
 80018e6:	4602      	mov	r2, r0
 80018e8:	460b      	mov	r3, r1
 80018ea:	4610      	mov	r0, r2
 80018ec:	4619      	mov	r1, r3
 80018ee:	f7fe ffa5 	bl	800083c <__aeabi_d2uiz>
 80018f2:	4601      	mov	r1, r0
 80018f4:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 80018f8:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80018fc:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 8001900:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 8001904:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8001908:	6812      	ldr	r2, [r2, #0]
 800190a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		theta += (2*PI)/(size);
 800190e:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 8001912:	f103 0314 	add.w	r3, r3, #20
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	ee07 3a90 	vmov	s15, r3
 800191c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001920:	eddf 6ab9 	vldr	s13, [pc, #740]	; 8001c08 <gen_notes+0x3b8>
 8001924:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001928:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 800192c:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8001930:	ed93 7a00 	vldr	s14, [r3]
 8001934:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001938:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 800193c:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8001940:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < size; i++){
 8001944:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 8001948:	f103 0330 	add.w	r3, r3, #48	; 0x30
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	3301      	adds	r3, #1
 8001950:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 8001954:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8001958:	6013      	str	r3, [r2, #0]
 800195a:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 800195e:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 8001968:	f102 0214 	add.w	r2, r2, #20
 800196c:	6812      	ldr	r2, [r2, #0]
 800196e:	429a      	cmp	r2, r3
 8001970:	d88f      	bhi.n	8001892 <gen_notes+0x42>
	}
	theta = 0.0;
 8001972:	f04f 0300 	mov.w	r3, #0
 8001976:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 800197a:	f102 0234 	add.w	r2, r2, #52	; 0x34
 800197e:	6013      	str	r3, [r2, #0]
	val = 0.0;
 8001980:	f04f 0300 	mov.w	r3, #0
 8001984:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 8001988:	f102 0218 	add.w	r2, r2, #24
 800198c:	6013      	str	r3, [r2, #0]
	size = NOTE_1_SIZE;
 800198e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001992:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 8001996:	f102 0214 	add.w	r2, r2, #20
 800199a:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < size; i++){
 800199c:	2300      	movs	r3, #0
 800199e:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 80019a2:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 80019a6:	6013      	str	r3, [r2, #0]
 80019a8:	e076      	b.n	8001a98 <gen_notes+0x248>
		val = (VALUE_LIMIT/2.0)*arm_sin_f32(theta);
 80019aa:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 80019ae:	f103 0334 	add.w	r3, r3, #52	; 0x34
 80019b2:	ed93 0a00 	vldr	s0, [r3]
 80019b6:	f007 ffdb 	bl	8009970 <arm_sin_f32>
 80019ba:	ee10 3a10 	vmov	r3, s0
 80019be:	4618      	mov	r0, r3
 80019c0:	f7fe fee4 	bl	800078c <__aeabi_f2d>
 80019c4:	f04f 0200 	mov.w	r2, #0
 80019c8:	4b8e      	ldr	r3, [pc, #568]	; (8001c04 <gen_notes+0x3b4>)
 80019ca:	f7fe fc51 	bl	8000270 <__aeabi_dmul>
 80019ce:	4602      	mov	r2, r0
 80019d0:	460b      	mov	r3, r1
 80019d2:	4610      	mov	r0, r2
 80019d4:	4619      	mov	r1, r3
 80019d6:	f7fe ff51 	bl	800087c <__aeabi_d2f>
 80019da:	4603      	mov	r3, r0
 80019dc:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 80019e0:	f102 0218 	add.w	r2, r2, #24
 80019e4:	6013      	str	r3, [r2, #0]
		val = (uint32_t)(val + (VALUE_LIMIT/2.0));
 80019e6:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 80019ea:	f103 0318 	add.w	r3, r3, #24
 80019ee:	6818      	ldr	r0, [r3, #0]
 80019f0:	f7fe fecc 	bl	800078c <__aeabi_f2d>
 80019f4:	f04f 0200 	mov.w	r2, #0
 80019f8:	4b82      	ldr	r3, [pc, #520]	; (8001c04 <gen_notes+0x3b4>)
 80019fa:	f7fe fd69 	bl	80004d0 <__adddf3>
 80019fe:	4602      	mov	r2, r0
 8001a00:	460b      	mov	r3, r1
 8001a02:	4610      	mov	r0, r2
 8001a04:	4619      	mov	r1, r3
 8001a06:	f7fe ff19 	bl	800083c <__aeabi_d2uiz>
 8001a0a:	ee07 0a90 	vmov	s15, r0
 8001a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a12:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 8001a16:	f103 0318 	add.w	r3, r3, #24
 8001a1a:	edc3 7a00 	vstr	s15, [r3]
		note_1_temp[i] = val;
 8001a1e:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 8001a22:	f103 0318 	add.w	r3, r3, #24
 8001a26:	edd3 7a00 	vldr	s15, [r3]
 8001a2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a2e:	ee17 1a90 	vmov	r1, s15
 8001a32:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 8001a36:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8001a3a:	f6a3 3314 	subw	r3, r3, #2836	; 0xb14
 8001a3e:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 8001a42:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8001a46:	6812      	ldr	r2, [r2, #0]
 8001a48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		theta += (2*PI)/(size);
 8001a4c:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 8001a50:	f103 0314 	add.w	r3, r3, #20
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	ee07 3a90 	vmov	s15, r3
 8001a5a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a5e:	eddf 6a6a 	vldr	s13, [pc, #424]	; 8001c08 <gen_notes+0x3b8>
 8001a62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a66:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 8001a6a:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8001a6e:	ed93 7a00 	vldr	s14, [r3]
 8001a72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a76:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 8001a7a:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8001a7e:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < size; i++){
 8001a82:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 8001a86:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 8001a92:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8001a96:	6013      	str	r3, [r2, #0]
 8001a98:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 8001a9c:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 8001aa6:	f102 0214 	add.w	r2, r2, #20
 8001aaa:	6812      	ldr	r2, [r2, #0]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	f63f af7c 	bhi.w	80019aa <gen_notes+0x15a>
	}
	theta = 0.0;
 8001ab2:	f04f 0300 	mov.w	r3, #0
 8001ab6:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 8001aba:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8001abe:	6013      	str	r3, [r2, #0]
	val = 0.0;
 8001ac0:	f04f 0300 	mov.w	r3, #0
 8001ac4:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 8001ac8:	f102 0218 	add.w	r2, r2, #24
 8001acc:	6013      	str	r3, [r2, #0]
	size = NOTE_2_SIZE;
 8001ace:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001ad2:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 8001ad6:	f102 0214 	add.w	r2, r2, #20
 8001ada:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < size; i++){
 8001adc:	2300      	movs	r3, #0
 8001ade:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 8001ae2:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8001ae6:	6013      	str	r3, [r2, #0]
 8001ae8:	e063      	b.n	8001bb2 <gen_notes+0x362>
		val = (VALUE_LIMIT/2.0)*arm_sin_f32(theta);
 8001aea:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 8001aee:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8001af2:	ed93 0a00 	vldr	s0, [r3]
 8001af6:	f007 ff3b 	bl	8009970 <arm_sin_f32>
 8001afa:	ee10 3a10 	vmov	r3, s0
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7fe fe44 	bl	800078c <__aeabi_f2d>
 8001b04:	f04f 0200 	mov.w	r2, #0
 8001b08:	4b3e      	ldr	r3, [pc, #248]	; (8001c04 <gen_notes+0x3b4>)
 8001b0a:	f7fe fbb1 	bl	8000270 <__aeabi_dmul>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	460b      	mov	r3, r1
 8001b12:	4610      	mov	r0, r2
 8001b14:	4619      	mov	r1, r3
 8001b16:	f7fe feb1 	bl	800087c <__aeabi_d2f>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 8001b20:	f102 0218 	add.w	r2, r2, #24
 8001b24:	6013      	str	r3, [r2, #0]
		note_2_temp[i] = (uint32_t)(val + (VALUE_LIMIT/2.0));
 8001b26:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 8001b2a:	f103 0318 	add.w	r3, r3, #24
 8001b2e:	6818      	ldr	r0, [r3, #0]
 8001b30:	f7fe fe2c 	bl	800078c <__aeabi_f2d>
 8001b34:	f04f 0200 	mov.w	r2, #0
 8001b38:	4b32      	ldr	r3, [pc, #200]	; (8001c04 <gen_notes+0x3b4>)
 8001b3a:	f7fe fcc9 	bl	80004d0 <__adddf3>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	460b      	mov	r3, r1
 8001b42:	4610      	mov	r0, r2
 8001b44:	4619      	mov	r1, r3
 8001b46:	f7fe fe79 	bl	800083c <__aeabi_d2uiz>
 8001b4a:	4601      	mov	r1, r0
 8001b4c:	f507 53b9 	add.w	r3, r7, #5920	; 0x1720
 8001b50:	f103 0318 	add.w	r3, r3, #24
 8001b54:	f2a3 7394 	subw	r3, r3, #1940	; 0x794
 8001b58:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 8001b5c:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8001b60:	6812      	ldr	r2, [r2, #0]
 8001b62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		theta += (2*PI)/(size);
 8001b66:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 8001b6a:	f103 0314 	add.w	r3, r3, #20
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	ee07 3a90 	vmov	s15, r3
 8001b74:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b78:	eddf 6a23 	vldr	s13, [pc, #140]	; 8001c08 <gen_notes+0x3b8>
 8001b7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b80:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 8001b84:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8001b88:	ed93 7a00 	vldr	s14, [r3]
 8001b8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b90:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 8001b94:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8001b98:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < size; i++){
 8001b9c:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 8001ba0:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 8001bac:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8001bb0:	6013      	str	r3, [r2, #0]
 8001bb2:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 8001bb6:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 8001bc0:	f102 0214 	add.w	r2, r2, #20
 8001bc4:	6812      	ldr	r2, [r2, #0]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d88f      	bhi.n	8001aea <gen_notes+0x29a>
	}
	theta = 0.0;
 8001bca:	f04f 0300 	mov.w	r3, #0
 8001bce:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 8001bd2:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8001bd6:	6013      	str	r3, [r2, #0]
	val = 0.0;
 8001bd8:	f04f 0300 	mov.w	r3, #0
 8001bdc:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 8001be0:	f102 0218 	add.w	r2, r2, #24
 8001be4:	6013      	str	r3, [r2, #0]
	size = NOTE_3_SIZE;
 8001be6:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001bea:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 8001bee:	f102 0214 	add.w	r2, r2, #20
 8001bf2:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < size; i++){
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 8001bfa:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8001bfe:	6013      	str	r3, [r2, #0]
 8001c00:	e068      	b.n	8001cd4 <gen_notes+0x484>
 8001c02:	bf00      	nop
 8001c04:	409f4000 	.word	0x409f4000
 8001c08:	40c90fdb 	.word	0x40c90fdb
		val = (VALUE_LIMIT/2.0)*arm_sin_f32(theta);
 8001c0c:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 8001c10:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8001c14:	ed93 0a00 	vldr	s0, [r3]
 8001c18:	f007 feaa 	bl	8009970 <arm_sin_f32>
 8001c1c:	ee10 3a10 	vmov	r3, s0
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7fe fdb3 	bl	800078c <__aeabi_f2d>
 8001c26:	f04f 0200 	mov.w	r2, #0
 8001c2a:	4b84      	ldr	r3, [pc, #528]	; (8001e3c <gen_notes+0x5ec>)
 8001c2c:	f7fe fb20 	bl	8000270 <__aeabi_dmul>
 8001c30:	4602      	mov	r2, r0
 8001c32:	460b      	mov	r3, r1
 8001c34:	4610      	mov	r0, r2
 8001c36:	4619      	mov	r1, r3
 8001c38:	f7fe fe20 	bl	800087c <__aeabi_d2f>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 8001c42:	f102 0218 	add.w	r2, r2, #24
 8001c46:	6013      	str	r3, [r2, #0]
		note_3_temp[i] = (uint32_t)(val + (VALUE_LIMIT/2.0));
 8001c48:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 8001c4c:	f103 0318 	add.w	r3, r3, #24
 8001c50:	6818      	ldr	r0, [r3, #0]
 8001c52:	f7fe fd9b 	bl	800078c <__aeabi_f2d>
 8001c56:	f04f 0200 	mov.w	r2, #0
 8001c5a:	4b78      	ldr	r3, [pc, #480]	; (8001e3c <gen_notes+0x5ec>)
 8001c5c:	f7fe fc38 	bl	80004d0 <__adddf3>
 8001c60:	4602      	mov	r2, r0
 8001c62:	460b      	mov	r3, r1
 8001c64:	4610      	mov	r0, r2
 8001c66:	4619      	mov	r1, r3
 8001c68:	f7fe fde8 	bl	800083c <__aeabi_d2uiz>
 8001c6c:	4601      	mov	r1, r0
 8001c6e:	f507 53b9 	add.w	r3, r7, #5920	; 0x1720
 8001c72:	f103 0318 	add.w	r3, r3, #24
 8001c76:	f6a3 4344 	subw	r3, r3, #3140	; 0xc44
 8001c7a:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 8001c7e:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8001c82:	6812      	ldr	r2, [r2, #0]
 8001c84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		theta += (2*PI)/(size);
 8001c88:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 8001c8c:	f103 0314 	add.w	r3, r3, #20
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	ee07 3a90 	vmov	s15, r3
 8001c96:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c9a:	eddf 6a69 	vldr	s13, [pc, #420]	; 8001e40 <gen_notes+0x5f0>
 8001c9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ca2:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 8001ca6:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8001caa:	ed93 7a00 	vldr	s14, [r3]
 8001cae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cb2:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 8001cb6:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8001cba:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < size; i++){
 8001cbe:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 8001cc2:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	3301      	adds	r3, #1
 8001cca:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 8001cce:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8001cd2:	6013      	str	r3, [r2, #0]
 8001cd4:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 8001cd8:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 8001ce2:	f102 0214 	add.w	r2, r2, #20
 8001ce6:	6812      	ldr	r2, [r2, #0]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d88f      	bhi.n	8001c0c <gen_notes+0x3bc>
	}
	theta = 0.0;
 8001cec:	f04f 0300 	mov.w	r3, #0
 8001cf0:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 8001cf4:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8001cf8:	6013      	str	r3, [r2, #0]
	val = 0.0;
 8001cfa:	f04f 0300 	mov.w	r3, #0
 8001cfe:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 8001d02:	f102 0218 	add.w	r2, r2, #24
 8001d06:	6013      	str	r3, [r2, #0]
	size = NOTE_4_SIZE;
 8001d08:	23c8      	movs	r3, #200	; 0xc8
 8001d0a:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 8001d0e:	f102 0214 	add.w	r2, r2, #20
 8001d12:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < size; i++){
 8001d14:	2300      	movs	r3, #0
 8001d16:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 8001d1a:	f102 0220 	add.w	r2, r2, #32
 8001d1e:	6013      	str	r3, [r2, #0]
 8001d20:	e063      	b.n	8001dea <gen_notes+0x59a>
		val = (VALUE_LIMIT/2.0)*arm_sin_f32(theta);
 8001d22:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 8001d26:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8001d2a:	ed93 0a00 	vldr	s0, [r3]
 8001d2e:	f007 fe1f 	bl	8009970 <arm_sin_f32>
 8001d32:	ee10 3a10 	vmov	r3, s0
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7fe fd28 	bl	800078c <__aeabi_f2d>
 8001d3c:	f04f 0200 	mov.w	r2, #0
 8001d40:	4b3e      	ldr	r3, [pc, #248]	; (8001e3c <gen_notes+0x5ec>)
 8001d42:	f7fe fa95 	bl	8000270 <__aeabi_dmul>
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	4610      	mov	r0, r2
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	f7fe fd95 	bl	800087c <__aeabi_d2f>
 8001d52:	4603      	mov	r3, r0
 8001d54:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 8001d58:	f102 0218 	add.w	r2, r2, #24
 8001d5c:	6013      	str	r3, [r2, #0]
		note_4_temp[i] = (uint32_t)(val + (VALUE_LIMIT/2.0));
 8001d5e:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 8001d62:	f103 0318 	add.w	r3, r3, #24
 8001d66:	6818      	ldr	r0, [r3, #0]
 8001d68:	f7fe fd10 	bl	800078c <__aeabi_f2d>
 8001d6c:	f04f 0200 	mov.w	r2, #0
 8001d70:	4b32      	ldr	r3, [pc, #200]	; (8001e3c <gen_notes+0x5ec>)
 8001d72:	f7fe fbad 	bl	80004d0 <__adddf3>
 8001d76:	4602      	mov	r2, r0
 8001d78:	460b      	mov	r3, r1
 8001d7a:	4610      	mov	r0, r2
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	f7fe fd5d 	bl	800083c <__aeabi_d2uiz>
 8001d82:	4601      	mov	r1, r0
 8001d84:	f507 53b9 	add.w	r3, r7, #5920	; 0x1720
 8001d88:	f103 0318 	add.w	r3, r3, #24
 8001d8c:	f6a3 7364 	subw	r3, r3, #3940	; 0xf64
 8001d90:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 8001d94:	f102 0220 	add.w	r2, r2, #32
 8001d98:	6812      	ldr	r2, [r2, #0]
 8001d9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		theta += (2*PI)/(size);
 8001d9e:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 8001da2:	f103 0314 	add.w	r3, r3, #20
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	ee07 3a90 	vmov	s15, r3
 8001dac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001db0:	eddf 6a23 	vldr	s13, [pc, #140]	; 8001e40 <gen_notes+0x5f0>
 8001db4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001db8:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 8001dbc:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8001dc0:	ed93 7a00 	vldr	s14, [r3]
 8001dc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dc8:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 8001dcc:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8001dd0:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < size; i++){
 8001dd4:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 8001dd8:	f103 0320 	add.w	r3, r3, #32
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	3301      	adds	r3, #1
 8001de0:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 8001de4:	f102 0220 	add.w	r2, r2, #32
 8001de8:	6013      	str	r3, [r2, #0]
 8001dea:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 8001dee:	f103 0320 	add.w	r3, r3, #32
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 8001df8:	f102 0214 	add.w	r2, r2, #20
 8001dfc:	6812      	ldr	r2, [r2, #0]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d88f      	bhi.n	8001d22 <gen_notes+0x4d2>
	}
	theta = 0.0;
 8001e02:	f04f 0300 	mov.w	r3, #0
 8001e06:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 8001e0a:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8001e0e:	6013      	str	r3, [r2, #0]
	val = 0.0;
 8001e10:	f04f 0300 	mov.w	r3, #0
 8001e14:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 8001e18:	f102 0218 	add.w	r2, r2, #24
 8001e1c:	6013      	str	r3, [r2, #0]
	size = NOTE_5_SIZE;
 8001e1e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001e22:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 8001e26:	f102 0214 	add.w	r2, r2, #20
 8001e2a:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < size; i++){
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 8001e32:	f102 021c 	add.w	r2, r2, #28
 8001e36:	6013      	str	r3, [r2, #0]
 8001e38:	e066      	b.n	8001f08 <gen_notes+0x6b8>
 8001e3a:	bf00      	nop
 8001e3c:	409f4000 	.word	0x409f4000
 8001e40:	40c90fdb 	.word	0x40c90fdb
		val = (VALUE_LIMIT/2.0)*arm_sin_f32(theta);
 8001e44:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 8001e48:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8001e4c:	ed93 0a00 	vldr	s0, [r3]
 8001e50:	f007 fd8e 	bl	8009970 <arm_sin_f32>
 8001e54:	ee10 3a10 	vmov	r3, s0
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7fe fc97 	bl	800078c <__aeabi_f2d>
 8001e5e:	f04f 0200 	mov.w	r2, #0
 8001e62:	4b60      	ldr	r3, [pc, #384]	; (8001fe4 <gen_notes+0x794>)
 8001e64:	f7fe fa04 	bl	8000270 <__aeabi_dmul>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	4610      	mov	r0, r2
 8001e6e:	4619      	mov	r1, r3
 8001e70:	f7fe fd04 	bl	800087c <__aeabi_d2f>
 8001e74:	4603      	mov	r3, r0
 8001e76:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 8001e7a:	f102 0218 	add.w	r2, r2, #24
 8001e7e:	6013      	str	r3, [r2, #0]
		note_5_temp[i] = (uint32_t)(val + (VALUE_LIMIT/2.0));
 8001e80:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 8001e84:	f103 0318 	add.w	r3, r3, #24
 8001e88:	6818      	ldr	r0, [r3, #0]
 8001e8a:	f7fe fc7f 	bl	800078c <__aeabi_f2d>
 8001e8e:	f04f 0200 	mov.w	r2, #0
 8001e92:	4b54      	ldr	r3, [pc, #336]	; (8001fe4 <gen_notes+0x794>)
 8001e94:	f7fe fb1c 	bl	80004d0 <__adddf3>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	4610      	mov	r0, r2
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	f7fe fccc 	bl	800083c <__aeabi_d2uiz>
 8001ea4:	4601      	mov	r1, r0
 8001ea6:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 8001eaa:	f2a3 7334 	subw	r3, r3, #1844	; 0x734
 8001eae:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 8001eb2:	f102 021c 	add.w	r2, r2, #28
 8001eb6:	6812      	ldr	r2, [r2, #0]
 8001eb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		theta += (2*PI)/(size);
 8001ebc:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 8001ec0:	f103 0314 	add.w	r3, r3, #20
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	ee07 3a90 	vmov	s15, r3
 8001eca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ece:	eddf 6a46 	vldr	s13, [pc, #280]	; 8001fe8 <gen_notes+0x798>
 8001ed2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ed6:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 8001eda:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8001ede:	ed93 7a00 	vldr	s14, [r3]
 8001ee2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ee6:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 8001eea:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8001eee:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < size; i++){
 8001ef2:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 8001ef6:	f103 031c 	add.w	r3, r3, #28
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	3301      	adds	r3, #1
 8001efe:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 8001f02:	f102 021c 	add.w	r2, r2, #28
 8001f06:	6013      	str	r3, [r2, #0]
 8001f08:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 8001f0c:	f103 031c 	add.w	r3, r3, #28
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 8001f16:	f102 0214 	add.w	r2, r2, #20
 8001f1a:	6812      	ldr	r2, [r2, #0]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d891      	bhi.n	8001e44 <gen_notes+0x5f4>
	}

	if(BSP_QSPI_Write(note_0_temp, NOTE_0_ADD, sizeof(uint32_t)*(NOTE_0_SIZE))!= QSPI_OK){
 8001f20:	f507 5309 	add.w	r3, r7, #8768	; 0x2240
 8001f24:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8001f28:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001f2c:	2164      	movs	r1, #100	; 0x64
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f000 fdae 	bl	8002a90 <BSP_QSPI_Write>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <gen_notes+0x6ee>
		Error_Handler();
 8001f3a:	f000 f965 	bl	8002208 <Error_Handler>
	}
	if(BSP_QSPI_Write(note_1_temp, NOTE_1_ADD, sizeof(uint32_t)*(NOTE_1_SIZE))!= QSPI_OK){
 8001f3e:	f507 53e1 	add.w	r3, r7, #7200	; 0x1c20
 8001f42:	f103 0304 	add.w	r3, r3, #4
 8001f46:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8001f4a:	f240 5114 	movw	r1, #1300	; 0x514
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f000 fd9e 	bl	8002a90 <BSP_QSPI_Write>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <gen_notes+0x70e>
		Error_Handler();
 8001f5a:	f000 f955 	bl	8002208 <Error_Handler>
	}
	if(BSP_QSPI_Write(note_2_temp, NOTE_2_ADD, sizeof(uint32_t)*(NOTE_2_SIZE))!= QSPI_OK){
 8001f5e:	f607 73b8 	addw	r3, r7, #4024	; 0xfb8
 8001f62:	3b14      	subs	r3, #20
 8001f64:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8001f68:	f640 3154 	movw	r1, #2900	; 0xb54
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f000 fd8f 	bl	8002a90 <BSP_QSPI_Write>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <gen_notes+0x72c>
		Error_Handler();
 8001f78:	f000 f946 	bl	8002208 <Error_Handler>
	}
	if(BSP_QSPI_Write(note_3_temp, NOTE_3_ADD, sizeof(uint32_t)*(NOTE_3_SIZE))!= QSPI_OK){
 8001f7c:	f607 23f8 	addw	r3, r7, #2808	; 0xaf8
 8001f80:	3b04      	subs	r3, #4
 8001f82:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001f86:	f241 71d4 	movw	r1, #6100	; 0x17d4
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f000 fd80 	bl	8002a90 <BSP_QSPI_Write>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <gen_notes+0x74a>
		Error_Handler();
 8001f96:	f000 f937 	bl	8002208 <Error_Handler>
	}
	if(BSP_QSPI_Write(note_4_temp, NOTE_4_ADD, sizeof(uint32_t)*(NOTE_4_SIZE))!= QSPI_OK){
 8001f9a:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 8001f9e:	3b04      	subs	r3, #4
 8001fa0:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001fa4:	f641 4184 	movw	r1, #7300	; 0x1c84
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f000 fd71 	bl	8002a90 <BSP_QSPI_Write>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <gen_notes+0x768>
		Error_Handler();
 8001fb4:	f000 f928 	bl	8002208 <Error_Handler>
	}
	if(BSP_QSPI_Write(note_5_temp, NOTE_5_ADD, sizeof(uint32_t)*(NOTE_5_SIZE))!= QSPI_OK){
 8001fb8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001fbc:	3b34      	subs	r3, #52	; 0x34
 8001fbe:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001fc2:	f641 71a4 	movw	r1, #8100	; 0x1fa4
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f000 fd62 	bl	8002a90 <BSP_QSPI_Write>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <gen_notes+0x786>
		Error_Handler();
 8001fd2:	f000 f919 	bl	8002208 <Error_Handler>
	}
}
 8001fd6:	bf00      	nop
 8001fd8:	f507 571c 	add.w	r7, r7, #9984	; 0x2700
 8001fdc:	3738      	adds	r7, #56	; 0x38
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	409f4000 	.word	0x409f4000
 8001fe8:	40c90fdb 	.word	0x40c90fdb

08001fec <HAL_GPIO_EXTI_Callback>:

// TODO: USE
void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin){
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	80fb      	strh	r3, [r7, #6]
	state = (state + 1)%2;
 8001ff6:	4b11      	ldr	r3, [pc, #68]	; (800203c <HAL_GPIO_EXTI_Callback+0x50>)
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	bfb8      	it	lt
 8002004:	425b      	neglt	r3, r3
 8002006:	b2da      	uxtb	r2, r3
 8002008:	4b0c      	ldr	r3, [pc, #48]	; (800203c <HAL_GPIO_EXTI_Callback+0x50>)
 800200a:	701a      	strb	r2, [r3, #0]
	if (state == 0){
 800200c:	4b0b      	ldr	r3, [pc, #44]	; (800203c <HAL_GPIO_EXTI_Callback+0x50>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d103      	bne.n	800201c <HAL_GPIO_EXTI_Callback+0x30>
		HAL_TIM_Base_Start_IT(&htim5);
 8002014:	480a      	ldr	r0, [pc, #40]	; (8002040 <HAL_GPIO_EXTI_Callback+0x54>)
 8002016:	f005 fe4d 	bl	8007cb4 <HAL_TIM_Base_Start_IT>
	}
	else if(state == 1){
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
		HAL_TIM_Base_Stop_IT(&htim5);
	}
}
 800201a:	e00a      	b.n	8002032 <HAL_GPIO_EXTI_Callback+0x46>
	else if(state == 1){
 800201c:	4b07      	ldr	r3, [pc, #28]	; (800203c <HAL_GPIO_EXTI_Callback+0x50>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d106      	bne.n	8002032 <HAL_GPIO_EXTI_Callback+0x46>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8002024:	2100      	movs	r1, #0
 8002026:	4807      	ldr	r0, [pc, #28]	; (8002044 <HAL_GPIO_EXTI_Callback+0x58>)
 8002028:	f002 fcea 	bl	8004a00 <HAL_DAC_Stop_DMA>
		HAL_TIM_Base_Stop_IT(&htim5);
 800202c:	4804      	ldr	r0, [pc, #16]	; (8002040 <HAL_GPIO_EXTI_Callback+0x54>)
 800202e:	f005 feb1 	bl	8007d94 <HAL_TIM_Base_Stop_IT>
}
 8002032:	bf00      	nop
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	20000484 	.word	0x20000484
 8002040:	200003a8 	.word	0x200003a8
 8002044:	200001c0 	.word	0x200001c0

08002048 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af02      	add	r7, sp, #8
 800204e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	// TODO: USE
	if (htim == &htim5){
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a5e      	ldr	r2, [pc, #376]	; (80021cc <HAL_TIM_PeriodElapsedCallback+0x184>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d160      	bne.n	800211a <HAL_TIM_PeriodElapsedCallback+0xd2>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);	// Stop playing looped audio
 8002058:	2100      	movs	r1, #0
 800205a:	485d      	ldr	r0, [pc, #372]	; (80021d0 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800205c:	f002 fcd0 	bl	8004a00 <HAL_DAC_Stop_DMA>
		switch(song_index) {
 8002060:	4b5c      	ldr	r3, [pc, #368]	; (80021d4 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2b05      	cmp	r3, #5
 8002066:	d84a      	bhi.n	80020fe <HAL_TIM_PeriodElapsedCallback+0xb6>
 8002068:	a201      	add	r2, pc, #4	; (adr r2, 8002070 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800206a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800206e:	bf00      	nop
 8002070:	08002089 	.word	0x08002089
 8002074:	0800209d 	.word	0x0800209d
 8002078:	080020b1 	.word	0x080020b1
 800207c:	080020c5 	.word	0x080020c5
 8002080:	080020d9 	.word	0x080020d9
 8002084:	080020eb 	.word	0x080020eb
			case 0:
				HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, note_0, NOTE_0_SIZE, DAC_ALIGN_12B_R);
 8002088:	2300      	movs	r3, #0
 800208a:	9300      	str	r3, [sp, #0]
 800208c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002090:	4a51      	ldr	r2, [pc, #324]	; (80021d8 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002092:	2100      	movs	r1, #0
 8002094:	484e      	ldr	r0, [pc, #312]	; (80021d0 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002096:	f002 fbe7 	bl	8004868 <HAL_DAC_Start_DMA>
				 break;
 800209a:	e030      	b.n	80020fe <HAL_TIM_PeriodElapsedCallback+0xb6>
			case 1:
				HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, note_1, NOTE_1_SIZE, DAC_ALIGN_12B_R);
 800209c:	2300      	movs	r3, #0
 800209e:	9300      	str	r3, [sp, #0]
 80020a0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80020a4:	4a4d      	ldr	r2, [pc, #308]	; (80021dc <HAL_TIM_PeriodElapsedCallback+0x194>)
 80020a6:	2100      	movs	r1, #0
 80020a8:	4849      	ldr	r0, [pc, #292]	; (80021d0 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80020aa:	f002 fbdd 	bl	8004868 <HAL_DAC_Start_DMA>
				 break;
 80020ae:	e026      	b.n	80020fe <HAL_TIM_PeriodElapsedCallback+0xb6>
			case 2:
				HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, note_2, NOTE_2_SIZE, DAC_ALIGN_12B_R);
 80020b0:	2300      	movs	r3, #0
 80020b2:	9300      	str	r3, [sp, #0]
 80020b4:	f44f 7348 	mov.w	r3, #800	; 0x320
 80020b8:	4a49      	ldr	r2, [pc, #292]	; (80021e0 <HAL_TIM_PeriodElapsedCallback+0x198>)
 80020ba:	2100      	movs	r1, #0
 80020bc:	4844      	ldr	r0, [pc, #272]	; (80021d0 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80020be:	f002 fbd3 	bl	8004868 <HAL_DAC_Start_DMA>
				break;
 80020c2:	e01c      	b.n	80020fe <HAL_TIM_PeriodElapsedCallback+0xb6>
			case 3:
				HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, note_3, NOTE_3_SIZE, DAC_ALIGN_12B_R);
 80020c4:	2300      	movs	r3, #0
 80020c6:	9300      	str	r3, [sp, #0]
 80020c8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80020cc:	4a45      	ldr	r2, [pc, #276]	; (80021e4 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80020ce:	2100      	movs	r1, #0
 80020d0:	483f      	ldr	r0, [pc, #252]	; (80021d0 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80020d2:	f002 fbc9 	bl	8004868 <HAL_DAC_Start_DMA>
				break;
 80020d6:	e012      	b.n	80020fe <HAL_TIM_PeriodElapsedCallback+0xb6>
			case 4:
				HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, note_4, NOTE_4_SIZE, DAC_ALIGN_12B_R);
 80020d8:	2300      	movs	r3, #0
 80020da:	9300      	str	r3, [sp, #0]
 80020dc:	23c8      	movs	r3, #200	; 0xc8
 80020de:	4a42      	ldr	r2, [pc, #264]	; (80021e8 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80020e0:	2100      	movs	r1, #0
 80020e2:	483b      	ldr	r0, [pc, #236]	; (80021d0 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80020e4:	f002 fbc0 	bl	8004868 <HAL_DAC_Start_DMA>
				break;
 80020e8:	e009      	b.n	80020fe <HAL_TIM_PeriodElapsedCallback+0xb6>
			case 5:
				HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, note_5, NOTE_5_SIZE, DAC_ALIGN_12B_R);
 80020ea:	2300      	movs	r3, #0
 80020ec:	9300      	str	r3, [sp, #0]
 80020ee:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80020f2:	4a3e      	ldr	r2, [pc, #248]	; (80021ec <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80020f4:	2100      	movs	r1, #0
 80020f6:	4836      	ldr	r0, [pc, #216]	; (80021d0 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80020f8:	f002 fbb6 	bl	8004868 <HAL_DAC_Start_DMA>
				break;
 80020fc:	bf00      	nop
			default:

				 }
			song_index = (song_index + 1) % 6;
 80020fe:	4b35      	ldr	r3, [pc, #212]	; (80021d4 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	1c59      	adds	r1, r3, #1
 8002104:	4b3a      	ldr	r3, [pc, #232]	; (80021f0 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8002106:	fba3 2301 	umull	r2, r3, r3, r1
 800210a:	089a      	lsrs	r2, r3, #2
 800210c:	4613      	mov	r3, r2
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	4413      	add	r3, r2
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	1aca      	subs	r2, r1, r3
 8002116:	4b2f      	ldr	r3, [pc, #188]	; (80021d4 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8002118:	601a      	str	r2, [r3, #0]
	}

	if (htim == &htim4){
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a35      	ldr	r2, [pc, #212]	; (80021f4 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d148      	bne.n	80021b4 <HAL_TIM_PeriodElapsedCallback+0x16c>
		if(check_dir == 1){
 8002122:	4b35      	ldr	r3, [pc, #212]	; (80021f8 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d134      	bne.n	8002194 <HAL_TIM_PeriodElapsedCallback+0x14c>
			if(joystickXY[0] < 1000){
 800212a:	4b34      	ldr	r3, [pc, #208]	; (80021fc <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 800212c:	881b      	ldrh	r3, [r3, #0]
 800212e:	b29b      	uxth	r3, r3
 8002130:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002134:	d213      	bcs.n	800215e <HAL_TIM_PeriodElapsedCallback+0x116>
//				mode = right;
				char_horz_pos = (char_horz_pos < 9) ? (char_horz_pos + 2) : char_horz_pos;
 8002136:	4b32      	ldr	r3, [pc, #200]	; (8002200 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b08      	cmp	r3, #8
 800213e:	d805      	bhi.n	800214c <HAL_TIM_PeriodElapsedCallback+0x104>
 8002140:	4b2f      	ldr	r3, [pc, #188]	; (8002200 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	b2db      	uxtb	r3, r3
 8002146:	3302      	adds	r3, #2
 8002148:	b2db      	uxtb	r3, r3
 800214a:	e002      	b.n	8002152 <HAL_TIM_PeriodElapsedCallback+0x10a>
 800214c:	4b2c      	ldr	r3, [pc, #176]	; (8002200 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	b2db      	uxtb	r3, r3
 8002152:	4a2b      	ldr	r2, [pc, #172]	; (8002200 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8002154:	7013      	strb	r3, [r2, #0]
				check_dir = 0;
 8002156:	4b28      	ldr	r3, [pc, #160]	; (80021f8 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	e02a      	b.n	80021b4 <HAL_TIM_PeriodElapsedCallback+0x16c>
			}
			else if(joystickXY[0] > 3000){
 800215e:	4b27      	ldr	r3, [pc, #156]	; (80021fc <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8002160:	881b      	ldrh	r3, [r3, #0]
 8002162:	b29b      	uxth	r3, r3
 8002164:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002168:	4293      	cmp	r3, r2
 800216a:	d923      	bls.n	80021b4 <HAL_TIM_PeriodElapsedCallback+0x16c>
				char_horz_pos = (char_horz_pos > 1) ? (char_horz_pos - 2) : char_horz_pos;
 800216c:	4b24      	ldr	r3, [pc, #144]	; (8002200 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	b2db      	uxtb	r3, r3
 8002172:	2b01      	cmp	r3, #1
 8002174:	d905      	bls.n	8002182 <HAL_TIM_PeriodElapsedCallback+0x13a>
 8002176:	4b22      	ldr	r3, [pc, #136]	; (8002200 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	b2db      	uxtb	r3, r3
 800217c:	3b02      	subs	r3, #2
 800217e:	b2db      	uxtb	r3, r3
 8002180:	e002      	b.n	8002188 <HAL_TIM_PeriodElapsedCallback+0x140>
 8002182:	4b1f      	ldr	r3, [pc, #124]	; (8002200 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	b2db      	uxtb	r3, r3
 8002188:	4a1d      	ldr	r2, [pc, #116]	; (8002200 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 800218a:	7013      	strb	r3, [r2, #0]
//				mode = left;
				check_dir = 0;
 800218c:	4b1a      	ldr	r3, [pc, #104]	; (80021f8 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 800218e:	2200      	movs	r2, #0
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	e00f      	b.n	80021b4 <HAL_TIM_PeriodElapsedCallback+0x16c>
//			else{
//				//char_horz_pos = char_horz_pos;
//			}
		}
		else{
			if(joystickXY[0] >= 1000 && joystickXY[0] <= 3000){
 8002194:	4b19      	ldr	r3, [pc, #100]	; (80021fc <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8002196:	881b      	ldrh	r3, [r3, #0]
 8002198:	b29b      	uxth	r3, r3
 800219a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800219e:	d309      	bcc.n	80021b4 <HAL_TIM_PeriodElapsedCallback+0x16c>
 80021a0:	4b16      	ldr	r3, [pc, #88]	; (80021fc <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80021a2:	881b      	ldrh	r3, [r3, #0]
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d802      	bhi.n	80021b4 <HAL_TIM_PeriodElapsedCallback+0x16c>
				check_dir = 1;
 80021ae:	4b12      	ldr	r3, [pc, #72]	; (80021f8 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80021b0:	2201      	movs	r2, #1
 80021b2:	601a      	str	r2, [r3, #0]
		}
	}


  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a12      	ldr	r2, [pc, #72]	; (8002204 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d101      	bne.n	80021c2 <HAL_TIM_PeriodElapsedCallback+0x17a>
    HAL_IncTick();
 80021be:	f000 fff9 	bl	80031b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80021c2:	bf00      	nop
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	200003a8 	.word	0x200003a8
 80021d0:	200001c0 	.word	0x200001c0
 80021d4:	20000480 	.word	0x20000480
 80021d8:	20000490 	.word	0x20000490
 80021dc:	20000940 	.word	0x20000940
 80021e0:	20000f80 	.word	0x20000f80
 80021e4:	20001c00 	.word	0x20001c00
 80021e8:	200020b0 	.word	0x200020b0
 80021ec:	200023d0 	.word	0x200023d0
 80021f0:	aaaaaaab 	.word	0xaaaaaaab
 80021f4:	2000035c 	.word	0x2000035c
 80021f8:	20000000 	.word	0x20000000
 80021fc:	2000047c 	.word	0x2000047c
 8002200:	20000009 	.word	0x20000009
 8002204:	40001000 	.word	0x40001000

08002208 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	HAL_GPIO_WritePin(errorLED_GPIO_Port, errorLED_Pin, GPIO_PIN_RESET);
 800220c:	2200      	movs	r2, #0
 800220e:	2108      	movs	r1, #8
 8002210:	4803      	ldr	r0, [pc, #12]	; (8002220 <Error_Handler+0x18>)
 8002212:	f003 fadd 	bl	80057d0 <HAL_GPIO_WritePin>
	__BKPT();
 8002216:	be00      	bkpt	0x0000
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002218:	b672      	cpsid	i
}
 800221a:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800221c:	e7fe      	b.n	800221c <Error_Handler+0x14>
 800221e:	bf00      	nop
 8002220:	48001000 	.word	0x48001000

08002224 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800222a:	4b0f      	ldr	r3, [pc, #60]	; (8002268 <HAL_MspInit+0x44>)
 800222c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800222e:	4a0e      	ldr	r2, [pc, #56]	; (8002268 <HAL_MspInit+0x44>)
 8002230:	f043 0301 	orr.w	r3, r3, #1
 8002234:	6613      	str	r3, [r2, #96]	; 0x60
 8002236:	4b0c      	ldr	r3, [pc, #48]	; (8002268 <HAL_MspInit+0x44>)
 8002238:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	607b      	str	r3, [r7, #4]
 8002240:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002242:	4b09      	ldr	r3, [pc, #36]	; (8002268 <HAL_MspInit+0x44>)
 8002244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002246:	4a08      	ldr	r2, [pc, #32]	; (8002268 <HAL_MspInit+0x44>)
 8002248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800224c:	6593      	str	r3, [r2, #88]	; 0x58
 800224e:	4b06      	ldr	r3, [pc, #24]	; (8002268 <HAL_MspInit+0x44>)
 8002250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002256:	603b      	str	r3, [r7, #0]
 8002258:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800225a:	bf00      	nop
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	40021000 	.word	0x40021000

0800226c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b08a      	sub	sp, #40	; 0x28
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002274:	f107 0314 	add.w	r3, r7, #20
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	605a      	str	r2, [r3, #4]
 800227e:	609a      	str	r2, [r3, #8]
 8002280:	60da      	str	r2, [r3, #12]
 8002282:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a2a      	ldr	r2, [pc, #168]	; (8002334 <HAL_ADC_MspInit+0xc8>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d14e      	bne.n	800232c <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800228e:	4b2a      	ldr	r3, [pc, #168]	; (8002338 <HAL_ADC_MspInit+0xcc>)
 8002290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002292:	4a29      	ldr	r2, [pc, #164]	; (8002338 <HAL_ADC_MspInit+0xcc>)
 8002294:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002298:	64d3      	str	r3, [r2, #76]	; 0x4c
 800229a:	4b27      	ldr	r3, [pc, #156]	; (8002338 <HAL_ADC_MspInit+0xcc>)
 800229c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800229e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022a2:	613b      	str	r3, [r7, #16]
 80022a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022a6:	4b24      	ldr	r3, [pc, #144]	; (8002338 <HAL_ADC_MspInit+0xcc>)
 80022a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022aa:	4a23      	ldr	r2, [pc, #140]	; (8002338 <HAL_ADC_MspInit+0xcc>)
 80022ac:	f043 0304 	orr.w	r3, r3, #4
 80022b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022b2:	4b21      	ldr	r3, [pc, #132]	; (8002338 <HAL_ADC_MspInit+0xcc>)
 80022b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022b6:	f003 0304 	and.w	r3, r3, #4
 80022ba:	60fb      	str	r3, [r7, #12]
 80022bc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80022be:	2330      	movs	r3, #48	; 0x30
 80022c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80022c2:	230b      	movs	r3, #11
 80022c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c6:	2300      	movs	r3, #0
 80022c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022ca:	f107 0314 	add.w	r3, r7, #20
 80022ce:	4619      	mov	r1, r3
 80022d0:	481a      	ldr	r0, [pc, #104]	; (800233c <HAL_ADC_MspInit+0xd0>)
 80022d2:	f002 ffdf 	bl	8005294 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80022d6:	4b1a      	ldr	r3, [pc, #104]	; (8002340 <HAL_ADC_MspInit+0xd4>)
 80022d8:	4a1a      	ldr	r2, [pc, #104]	; (8002344 <HAL_ADC_MspInit+0xd8>)
 80022da:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80022dc:	4b18      	ldr	r3, [pc, #96]	; (8002340 <HAL_ADC_MspInit+0xd4>)
 80022de:	2200      	movs	r2, #0
 80022e0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022e2:	4b17      	ldr	r3, [pc, #92]	; (8002340 <HAL_ADC_MspInit+0xd4>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80022e8:	4b15      	ldr	r3, [pc, #84]	; (8002340 <HAL_ADC_MspInit+0xd4>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80022ee:	4b14      	ldr	r3, [pc, #80]	; (8002340 <HAL_ADC_MspInit+0xd4>)
 80022f0:	2280      	movs	r2, #128	; 0x80
 80022f2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80022f4:	4b12      	ldr	r3, [pc, #72]	; (8002340 <HAL_ADC_MspInit+0xd4>)
 80022f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022fa:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80022fc:	4b10      	ldr	r3, [pc, #64]	; (8002340 <HAL_ADC_MspInit+0xd4>)
 80022fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002302:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002304:	4b0e      	ldr	r3, [pc, #56]	; (8002340 <HAL_ADC_MspInit+0xd4>)
 8002306:	2220      	movs	r2, #32
 8002308:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800230a:	4b0d      	ldr	r3, [pc, #52]	; (8002340 <HAL_ADC_MspInit+0xd4>)
 800230c:	2200      	movs	r2, #0
 800230e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002310:	480b      	ldr	r0, [pc, #44]	; (8002340 <HAL_ADC_MspInit+0xd4>)
 8002312:	f002 fd89 	bl	8004e28 <HAL_DMA_Init>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <HAL_ADC_MspInit+0xb4>
    {
      Error_Handler();
 800231c:	f7ff ff74 	bl	8002208 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4a07      	ldr	r2, [pc, #28]	; (8002340 <HAL_ADC_MspInit+0xd4>)
 8002324:	64da      	str	r2, [r3, #76]	; 0x4c
 8002326:	4a06      	ldr	r2, [pc, #24]	; (8002340 <HAL_ADC_MspInit+0xd4>)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800232c:	bf00      	nop
 800232e:	3728      	adds	r7, #40	; 0x28
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	50040000 	.word	0x50040000
 8002338:	40021000 	.word	0x40021000
 800233c:	48000800 	.word	0x48000800
 8002340:	20000178 	.word	0x20000178
 8002344:	40020008 	.word	0x40020008

08002348 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b08a      	sub	sp, #40	; 0x28
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002350:	f107 0314 	add.w	r3, r7, #20
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	605a      	str	r2, [r3, #4]
 800235a:	609a      	str	r2, [r3, #8]
 800235c:	60da      	str	r2, [r3, #12]
 800235e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a2b      	ldr	r2, [pc, #172]	; (8002414 <HAL_DAC_MspInit+0xcc>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d14f      	bne.n	800240a <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800236a:	4b2b      	ldr	r3, [pc, #172]	; (8002418 <HAL_DAC_MspInit+0xd0>)
 800236c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800236e:	4a2a      	ldr	r2, [pc, #168]	; (8002418 <HAL_DAC_MspInit+0xd0>)
 8002370:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002374:	6593      	str	r3, [r2, #88]	; 0x58
 8002376:	4b28      	ldr	r3, [pc, #160]	; (8002418 <HAL_DAC_MspInit+0xd0>)
 8002378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800237a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800237e:	613b      	str	r3, [r7, #16]
 8002380:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002382:	4b25      	ldr	r3, [pc, #148]	; (8002418 <HAL_DAC_MspInit+0xd0>)
 8002384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002386:	4a24      	ldr	r2, [pc, #144]	; (8002418 <HAL_DAC_MspInit+0xd0>)
 8002388:	f043 0301 	orr.w	r3, r3, #1
 800238c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800238e:	4b22      	ldr	r3, [pc, #136]	; (8002418 <HAL_DAC_MspInit+0xd0>)
 8002390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	60fb      	str	r3, [r7, #12]
 8002398:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800239a:	2310      	movs	r3, #16
 800239c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800239e:	2303      	movs	r3, #3
 80023a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a2:	2300      	movs	r3, #0
 80023a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023a6:	f107 0314 	add.w	r3, r7, #20
 80023aa:	4619      	mov	r1, r3
 80023ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023b0:	f002 ff70 	bl	8005294 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 80023b4:	4b19      	ldr	r3, [pc, #100]	; (800241c <HAL_DAC_MspInit+0xd4>)
 80023b6:	4a1a      	ldr	r2, [pc, #104]	; (8002420 <HAL_DAC_MspInit+0xd8>)
 80023b8:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 80023ba:	4b18      	ldr	r3, [pc, #96]	; (800241c <HAL_DAC_MspInit+0xd4>)
 80023bc:	2206      	movs	r2, #6
 80023be:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023c0:	4b16      	ldr	r3, [pc, #88]	; (800241c <HAL_DAC_MspInit+0xd4>)
 80023c2:	2210      	movs	r2, #16
 80023c4:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80023c6:	4b15      	ldr	r3, [pc, #84]	; (800241c <HAL_DAC_MspInit+0xd4>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80023cc:	4b13      	ldr	r3, [pc, #76]	; (800241c <HAL_DAC_MspInit+0xd4>)
 80023ce:	2280      	movs	r2, #128	; 0x80
 80023d0:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80023d2:	4b12      	ldr	r3, [pc, #72]	; (800241c <HAL_DAC_MspInit+0xd4>)
 80023d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023d8:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80023da:	4b10      	ldr	r3, [pc, #64]	; (800241c <HAL_DAC_MspInit+0xd4>)
 80023dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80023e0:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 80023e2:	4b0e      	ldr	r3, [pc, #56]	; (800241c <HAL_DAC_MspInit+0xd4>)
 80023e4:	2220      	movs	r2, #32
 80023e6:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80023e8:	4b0c      	ldr	r3, [pc, #48]	; (800241c <HAL_DAC_MspInit+0xd4>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 80023ee:	480b      	ldr	r0, [pc, #44]	; (800241c <HAL_DAC_MspInit+0xd4>)
 80023f0:	f002 fd1a 	bl	8004e28 <HAL_DMA_Init>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 80023fa:	f7ff ff05 	bl	8002208 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a06      	ldr	r2, [pc, #24]	; (800241c <HAL_DAC_MspInit+0xd4>)
 8002402:	609a      	str	r2, [r3, #8]
 8002404:	4a05      	ldr	r2, [pc, #20]	; (800241c <HAL_DAC_MspInit+0xd4>)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800240a:	bf00      	nop
 800240c:	3728      	adds	r7, #40	; 0x28
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	40007400 	.word	0x40007400
 8002418:	40021000 	.word	0x40021000
 800241c:	200001d4 	.word	0x200001d4
 8002420:	40020030 	.word	0x40020030

08002424 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b0ac      	sub	sp, #176	; 0xb0
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800242c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	605a      	str	r2, [r3, #4]
 8002436:	609a      	str	r2, [r3, #8]
 8002438:	60da      	str	r2, [r3, #12]
 800243a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800243c:	f107 0314 	add.w	r3, r7, #20
 8002440:	2288      	movs	r2, #136	; 0x88
 8002442:	2100      	movs	r1, #0
 8002444:	4618      	mov	r0, r3
 8002446:	f007 faf9 	bl	8009a3c <memset>
  if(hi2c->Instance==I2C2)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a21      	ldr	r2, [pc, #132]	; (80024d4 <HAL_I2C_MspInit+0xb0>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d13b      	bne.n	80024cc <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002454:	2380      	movs	r3, #128	; 0x80
 8002456:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002458:	2300      	movs	r3, #0
 800245a:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800245c:	f107 0314 	add.w	r3, r7, #20
 8002460:	4618      	mov	r0, r3
 8002462:	f004 fe67 	bl	8007134 <HAL_RCCEx_PeriphCLKConfig>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800246c:	f7ff fecc 	bl	8002208 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002470:	4b19      	ldr	r3, [pc, #100]	; (80024d8 <HAL_I2C_MspInit+0xb4>)
 8002472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002474:	4a18      	ldr	r2, [pc, #96]	; (80024d8 <HAL_I2C_MspInit+0xb4>)
 8002476:	f043 0302 	orr.w	r3, r3, #2
 800247a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800247c:	4b16      	ldr	r3, [pc, #88]	; (80024d8 <HAL_I2C_MspInit+0xb4>)
 800247e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	613b      	str	r3, [r7, #16]
 8002486:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002488:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800248c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002490:	2312      	movs	r3, #18
 8002492:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002496:	2300      	movs	r3, #0
 8002498:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800249c:	2303      	movs	r3, #3
 800249e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80024a2:	2304      	movs	r3, #4
 80024a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024a8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80024ac:	4619      	mov	r1, r3
 80024ae:	480b      	ldr	r0, [pc, #44]	; (80024dc <HAL_I2C_MspInit+0xb8>)
 80024b0:	f002 fef0 	bl	8005294 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80024b4:	4b08      	ldr	r3, [pc, #32]	; (80024d8 <HAL_I2C_MspInit+0xb4>)
 80024b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b8:	4a07      	ldr	r2, [pc, #28]	; (80024d8 <HAL_I2C_MspInit+0xb4>)
 80024ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80024be:	6593      	str	r3, [r2, #88]	; 0x58
 80024c0:	4b05      	ldr	r3, [pc, #20]	; (80024d8 <HAL_I2C_MspInit+0xb4>)
 80024c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024c8:	60fb      	str	r3, [r7, #12]
 80024ca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80024cc:	bf00      	nop
 80024ce:	37b0      	adds	r7, #176	; 0xb0
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40005800 	.word	0x40005800
 80024d8:	40021000 	.word	0x40021000
 80024dc:	48000400 	.word	0x48000400

080024e0 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b08a      	sub	sp, #40	; 0x28
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e8:	f107 0314 	add.w	r3, r7, #20
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	605a      	str	r2, [r3, #4]
 80024f2:	609a      	str	r2, [r3, #8]
 80024f4:	60da      	str	r2, [r3, #12]
 80024f6:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a17      	ldr	r2, [pc, #92]	; (800255c <HAL_QSPI_MspInit+0x7c>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d128      	bne.n	8002554 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002502:	4b17      	ldr	r3, [pc, #92]	; (8002560 <HAL_QSPI_MspInit+0x80>)
 8002504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002506:	4a16      	ldr	r2, [pc, #88]	; (8002560 <HAL_QSPI_MspInit+0x80>)
 8002508:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800250c:	6513      	str	r3, [r2, #80]	; 0x50
 800250e:	4b14      	ldr	r3, [pc, #80]	; (8002560 <HAL_QSPI_MspInit+0x80>)
 8002510:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002516:	613b      	str	r3, [r7, #16]
 8002518:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800251a:	4b11      	ldr	r3, [pc, #68]	; (8002560 <HAL_QSPI_MspInit+0x80>)
 800251c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800251e:	4a10      	ldr	r2, [pc, #64]	; (8002560 <HAL_QSPI_MspInit+0x80>)
 8002520:	f043 0310 	orr.w	r3, r3, #16
 8002524:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002526:	4b0e      	ldr	r3, [pc, #56]	; (8002560 <HAL_QSPI_MspInit+0x80>)
 8002528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800252a:	f003 0310 	and.w	r3, r3, #16
 800252e:	60fb      	str	r3, [r7, #12]
 8002530:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8002532:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8002536:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002538:	2302      	movs	r3, #2
 800253a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253c:	2300      	movs	r3, #0
 800253e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002540:	2303      	movs	r3, #3
 8002542:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002544:	230a      	movs	r3, #10
 8002546:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002548:	f107 0314 	add.w	r3, r7, #20
 800254c:	4619      	mov	r1, r3
 800254e:	4805      	ldr	r0, [pc, #20]	; (8002564 <HAL_QSPI_MspInit+0x84>)
 8002550:	f002 fea0 	bl	8005294 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002554:	bf00      	nop
 8002556:	3728      	adds	r7, #40	; 0x28
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	a0001000 	.word	0xa0001000
 8002560:	40021000 	.word	0x40021000
 8002564:	48001000 	.word	0x48001000

08002568 <HAL_QSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  if(hqspi->Instance==QUADSPI)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a08      	ldr	r2, [pc, #32]	; (8002598 <HAL_QSPI_MspDeInit+0x30>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d10a      	bne.n	8002590 <HAL_QSPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 800257a:	4b08      	ldr	r3, [pc, #32]	; (800259c <HAL_QSPI_MspDeInit+0x34>)
 800257c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800257e:	4a07      	ldr	r2, [pc, #28]	; (800259c <HAL_QSPI_MspDeInit+0x34>)
 8002580:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002584:	6513      	str	r3, [r2, #80]	; 0x50
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8002586:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 800258a:	4805      	ldr	r0, [pc, #20]	; (80025a0 <HAL_QSPI_MspDeInit+0x38>)
 800258c:	f003 f82c 	bl	80055e8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 8002590:	bf00      	nop
 8002592:	3708      	adds	r7, #8
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	a0001000 	.word	0xa0001000
 800259c:	40021000 	.word	0x40021000
 80025a0:	48001000 	.word	0x48001000

080025a4 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a0a      	ldr	r2, [pc, #40]	; (80025dc <HAL_RNG_MspInit+0x38>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d10b      	bne.n	80025ce <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80025b6:	4b0a      	ldr	r3, [pc, #40]	; (80025e0 <HAL_RNG_MspInit+0x3c>)
 80025b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ba:	4a09      	ldr	r2, [pc, #36]	; (80025e0 <HAL_RNG_MspInit+0x3c>)
 80025bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025c2:	4b07      	ldr	r3, [pc, #28]	; (80025e0 <HAL_RNG_MspInit+0x3c>)
 80025c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025ca:	60fb      	str	r3, [r7, #12]
 80025cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 80025ce:	bf00      	nop
 80025d0:	3714      	adds	r7, #20
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	50060800 	.word	0x50060800
 80025e0:	40021000 	.word	0x40021000

080025e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b086      	sub	sp, #24
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025f4:	d114      	bne.n	8002620 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025f6:	4b2f      	ldr	r3, [pc, #188]	; (80026b4 <HAL_TIM_Base_MspInit+0xd0>)
 80025f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025fa:	4a2e      	ldr	r2, [pc, #184]	; (80026b4 <HAL_TIM_Base_MspInit+0xd0>)
 80025fc:	f043 0301 	orr.w	r3, r3, #1
 8002600:	6593      	str	r3, [r2, #88]	; 0x58
 8002602:	4b2c      	ldr	r3, [pc, #176]	; (80026b4 <HAL_TIM_Base_MspInit+0xd0>)
 8002604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	617b      	str	r3, [r7, #20]
 800260c:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800260e:	2200      	movs	r2, #0
 8002610:	2100      	movs	r1, #0
 8002612:	201c      	movs	r0, #28
 8002614:	f002 f8cf 	bl	80047b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002618:	201c      	movs	r0, #28
 800261a:	f002 f8e8 	bl	80047ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800261e:	e044      	b.n	80026aa <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM3)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a24      	ldr	r2, [pc, #144]	; (80026b8 <HAL_TIM_Base_MspInit+0xd4>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d10c      	bne.n	8002644 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800262a:	4b22      	ldr	r3, [pc, #136]	; (80026b4 <HAL_TIM_Base_MspInit+0xd0>)
 800262c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800262e:	4a21      	ldr	r2, [pc, #132]	; (80026b4 <HAL_TIM_Base_MspInit+0xd0>)
 8002630:	f043 0302 	orr.w	r3, r3, #2
 8002634:	6593      	str	r3, [r2, #88]	; 0x58
 8002636:	4b1f      	ldr	r3, [pc, #124]	; (80026b4 <HAL_TIM_Base_MspInit+0xd0>)
 8002638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	613b      	str	r3, [r7, #16]
 8002640:	693b      	ldr	r3, [r7, #16]
}
 8002642:	e032      	b.n	80026aa <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM4)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a1c      	ldr	r2, [pc, #112]	; (80026bc <HAL_TIM_Base_MspInit+0xd8>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d114      	bne.n	8002678 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800264e:	4b19      	ldr	r3, [pc, #100]	; (80026b4 <HAL_TIM_Base_MspInit+0xd0>)
 8002650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002652:	4a18      	ldr	r2, [pc, #96]	; (80026b4 <HAL_TIM_Base_MspInit+0xd0>)
 8002654:	f043 0304 	orr.w	r3, r3, #4
 8002658:	6593      	str	r3, [r2, #88]	; 0x58
 800265a:	4b16      	ldr	r3, [pc, #88]	; (80026b4 <HAL_TIM_Base_MspInit+0xd0>)
 800265c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800265e:	f003 0304 	and.w	r3, r3, #4
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002666:	2200      	movs	r2, #0
 8002668:	2100      	movs	r1, #0
 800266a:	201e      	movs	r0, #30
 800266c:	f002 f8a3 	bl	80047b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002670:	201e      	movs	r0, #30
 8002672:	f002 f8bc 	bl	80047ee <HAL_NVIC_EnableIRQ>
}
 8002676:	e018      	b.n	80026aa <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM5)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a10      	ldr	r2, [pc, #64]	; (80026c0 <HAL_TIM_Base_MspInit+0xdc>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d113      	bne.n	80026aa <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002682:	4b0c      	ldr	r3, [pc, #48]	; (80026b4 <HAL_TIM_Base_MspInit+0xd0>)
 8002684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002686:	4a0b      	ldr	r2, [pc, #44]	; (80026b4 <HAL_TIM_Base_MspInit+0xd0>)
 8002688:	f043 0308 	orr.w	r3, r3, #8
 800268c:	6593      	str	r3, [r2, #88]	; 0x58
 800268e:	4b09      	ldr	r3, [pc, #36]	; (80026b4 <HAL_TIM_Base_MspInit+0xd0>)
 8002690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002692:	f003 0308 	and.w	r3, r3, #8
 8002696:	60bb      	str	r3, [r7, #8]
 8002698:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800269a:	2200      	movs	r2, #0
 800269c:	2100      	movs	r1, #0
 800269e:	2032      	movs	r0, #50	; 0x32
 80026a0:	f002 f889 	bl	80047b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80026a4:	2032      	movs	r0, #50	; 0x32
 80026a6:	f002 f8a2 	bl	80047ee <HAL_NVIC_EnableIRQ>
}
 80026aa:	bf00      	nop
 80026ac:	3718      	adds	r7, #24
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	40021000 	.word	0x40021000
 80026b8:	40000400 	.word	0x40000400
 80026bc:	40000800 	.word	0x40000800
 80026c0:	40000c00 	.word	0x40000c00

080026c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b0ac      	sub	sp, #176	; 0xb0
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026cc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	605a      	str	r2, [r3, #4]
 80026d6:	609a      	str	r2, [r3, #8]
 80026d8:	60da      	str	r2, [r3, #12]
 80026da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026dc:	f107 0314 	add.w	r3, r7, #20
 80026e0:	2288      	movs	r2, #136	; 0x88
 80026e2:	2100      	movs	r1, #0
 80026e4:	4618      	mov	r0, r3
 80026e6:	f007 f9a9 	bl	8009a3c <memset>
  if(huart->Instance==USART1)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a21      	ldr	r2, [pc, #132]	; (8002774 <HAL_UART_MspInit+0xb0>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d13a      	bne.n	800276a <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80026f4:	2301      	movs	r3, #1
 80026f6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80026f8:	2300      	movs	r3, #0
 80026fa:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026fc:	f107 0314 	add.w	r3, r7, #20
 8002700:	4618      	mov	r0, r3
 8002702:	f004 fd17 	bl	8007134 <HAL_RCCEx_PeriphCLKConfig>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800270c:	f7ff fd7c 	bl	8002208 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002710:	4b19      	ldr	r3, [pc, #100]	; (8002778 <HAL_UART_MspInit+0xb4>)
 8002712:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002714:	4a18      	ldr	r2, [pc, #96]	; (8002778 <HAL_UART_MspInit+0xb4>)
 8002716:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800271a:	6613      	str	r3, [r2, #96]	; 0x60
 800271c:	4b16      	ldr	r3, [pc, #88]	; (8002778 <HAL_UART_MspInit+0xb4>)
 800271e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002720:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002724:	613b      	str	r3, [r7, #16]
 8002726:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002728:	4b13      	ldr	r3, [pc, #76]	; (8002778 <HAL_UART_MspInit+0xb4>)
 800272a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800272c:	4a12      	ldr	r2, [pc, #72]	; (8002778 <HAL_UART_MspInit+0xb4>)
 800272e:	f043 0302 	orr.w	r3, r3, #2
 8002732:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002734:	4b10      	ldr	r3, [pc, #64]	; (8002778 <HAL_UART_MspInit+0xb4>)
 8002736:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002738:	f003 0302 	and.w	r3, r3, #2
 800273c:	60fb      	str	r3, [r7, #12]
 800273e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002740:	23c0      	movs	r3, #192	; 0xc0
 8002742:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002746:	2302      	movs	r3, #2
 8002748:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274c:	2300      	movs	r3, #0
 800274e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002752:	2303      	movs	r3, #3
 8002754:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002758:	2307      	movs	r3, #7
 800275a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800275e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002762:	4619      	mov	r1, r3
 8002764:	4805      	ldr	r0, [pc, #20]	; (800277c <HAL_UART_MspInit+0xb8>)
 8002766:	f002 fd95 	bl	8005294 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800276a:	bf00      	nop
 800276c:	37b0      	adds	r7, #176	; 0xb0
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	40013800 	.word	0x40013800
 8002778:	40021000 	.word	0x40021000
 800277c:	48000400 	.word	0x48000400

08002780 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002784:	e7fe      	b.n	8002784 <NMI_Handler+0x4>

08002786 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002786:	b480      	push	{r7}
 8002788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800278a:	e7fe      	b.n	800278a <HardFault_Handler+0x4>

0800278c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002790:	e7fe      	b.n	8002790 <MemManage_Handler+0x4>

08002792 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002792:	b480      	push	{r7}
 8002794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002796:	e7fe      	b.n	8002796 <BusFault_Handler+0x4>

08002798 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800279c:	e7fe      	b.n	800279c <UsageFault_Handler+0x4>

0800279e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800279e:	b480      	push	{r7}
 80027a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027a2:	bf00      	nop
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027b0:	bf00      	nop
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr

080027ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027ba:	b480      	push	{r7}
 80027bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027be:	bf00      	nop
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027cc:	f000 fcf2 	bl	80031b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027d0:	bf00      	nop
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80027d8:	4802      	ldr	r0, [pc, #8]	; (80027e4 <DMA1_Channel1_IRQHandler+0x10>)
 80027da:	f002 fc7b 	bl	80050d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80027de:	bf00      	nop
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	20000178 	.word	0x20000178

080027e8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 80027ec:	4802      	ldr	r0, [pc, #8]	; (80027f8 <DMA1_Channel3_IRQHandler+0x10>)
 80027ee:	f002 fc71 	bl	80050d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80027f2:	bf00      	nop
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	200001d4 	.word	0x200001d4

080027fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002800:	4802      	ldr	r0, [pc, #8]	; (800280c <TIM2_IRQHandler+0x10>)
 8002802:	f005 fb57 	bl	8007eb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002806:	bf00      	nop
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	200002c4 	.word	0x200002c4

08002810 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002814:	4802      	ldr	r0, [pc, #8]	; (8002820 <TIM4_IRQHandler+0x10>)
 8002816:	f005 fb4d 	bl	8007eb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800281a:	bf00      	nop
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	2000035c 	.word	0x2000035c

08002824 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PB_Pin);
 8002828:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800282c:	f002 ffe8 	bl	8005800 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002830:	bf00      	nop
 8002832:	bd80      	pop	{r7, pc}

08002834 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002838:	4802      	ldr	r0, [pc, #8]	; (8002844 <TIM5_IRQHandler+0x10>)
 800283a:	f005 fb3b 	bl	8007eb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800283e:	bf00      	nop
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	200003a8 	.word	0x200003a8

08002848 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b086      	sub	sp, #24
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002850:	4a14      	ldr	r2, [pc, #80]	; (80028a4 <_sbrk+0x5c>)
 8002852:	4b15      	ldr	r3, [pc, #84]	; (80028a8 <_sbrk+0x60>)
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800285c:	4b13      	ldr	r3, [pc, #76]	; (80028ac <_sbrk+0x64>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d102      	bne.n	800286a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002864:	4b11      	ldr	r3, [pc, #68]	; (80028ac <_sbrk+0x64>)
 8002866:	4a12      	ldr	r2, [pc, #72]	; (80028b0 <_sbrk+0x68>)
 8002868:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800286a:	4b10      	ldr	r3, [pc, #64]	; (80028ac <_sbrk+0x64>)
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4413      	add	r3, r2
 8002872:	693a      	ldr	r2, [r7, #16]
 8002874:	429a      	cmp	r2, r3
 8002876:	d207      	bcs.n	8002888 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002878:	f007 f8e8 	bl	8009a4c <__errno>
 800287c:	4603      	mov	r3, r0
 800287e:	220c      	movs	r2, #12
 8002880:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002882:	f04f 33ff 	mov.w	r3, #4294967295
 8002886:	e009      	b.n	800289c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002888:	4b08      	ldr	r3, [pc, #32]	; (80028ac <_sbrk+0x64>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800288e:	4b07      	ldr	r3, [pc, #28]	; (80028ac <_sbrk+0x64>)
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4413      	add	r3, r2
 8002896:	4a05      	ldr	r2, [pc, #20]	; (80028ac <_sbrk+0x64>)
 8002898:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800289a:	68fb      	ldr	r3, [r7, #12]
}
 800289c:	4618      	mov	r0, r3
 800289e:	3718      	adds	r7, #24
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	20018000 	.word	0x20018000
 80028a8:	00000400 	.word	0x00000400
 80028ac:	20002ba4 	.word	0x20002ba4
 80028b0:	20002d38 	.word	0x20002d38

080028b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80028b8:	4b06      	ldr	r3, [pc, #24]	; (80028d4 <SystemInit+0x20>)
 80028ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028be:	4a05      	ldr	r2, [pc, #20]	; (80028d4 <SystemInit+0x20>)
 80028c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80028c8:	bf00      	nop
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	e000ed00 	.word	0xe000ed00

080028d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80028d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002910 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80028dc:	f7ff ffea 	bl	80028b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028e0:	480c      	ldr	r0, [pc, #48]	; (8002914 <LoopForever+0x6>)
  ldr r1, =_edata
 80028e2:	490d      	ldr	r1, [pc, #52]	; (8002918 <LoopForever+0xa>)
  ldr r2, =_sidata
 80028e4:	4a0d      	ldr	r2, [pc, #52]	; (800291c <LoopForever+0xe>)
  movs r3, #0
 80028e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028e8:	e002      	b.n	80028f0 <LoopCopyDataInit>

080028ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028ee:	3304      	adds	r3, #4

080028f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028f4:	d3f9      	bcc.n	80028ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028f6:	4a0a      	ldr	r2, [pc, #40]	; (8002920 <LoopForever+0x12>)
  ldr r4, =_ebss
 80028f8:	4c0a      	ldr	r4, [pc, #40]	; (8002924 <LoopForever+0x16>)
  movs r3, #0
 80028fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028fc:	e001      	b.n	8002902 <LoopFillZerobss>

080028fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002900:	3204      	adds	r2, #4

08002902 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002902:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002904:	d3fb      	bcc.n	80028fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002906:	f007 f8a7 	bl	8009a58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800290a:	f7fe fb05 	bl	8000f18 <main>

0800290e <LoopForever>:

LoopForever:
    b LoopForever
 800290e:	e7fe      	b.n	800290e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002910:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002914:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002918:	200000f8 	.word	0x200000f8
  ldr r2, =_sidata
 800291c:	0800ac00 	.word	0x0800ac00
  ldr r2, =_sbss
 8002920:	200000f8 	.word	0x200000f8
  ldr r4, =_ebss
 8002924:	20002d38 	.word	0x20002d38

08002928 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002928:	e7fe      	b.n	8002928 <ADC1_2_IRQHandler>
	...

0800292c <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
  QSPIHandle.Instance = QUADSPI;
 8002932:	4b32      	ldr	r3, [pc, #200]	; (80029fc <BSP_QSPI_Init+0xd0>)
 8002934:	4a32      	ldr	r2, [pc, #200]	; (8002a00 <BSP_QSPI_Init+0xd4>)
 8002936:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 8002938:	4830      	ldr	r0, [pc, #192]	; (80029fc <BSP_QSPI_Init+0xd0>)
 800293a:	f003 f985 	bl	8005c48 <HAL_QSPI_DeInit>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e054      	b.n	80029f2 <BSP_QSPI_Init+0xc6>
  }
        
  /* System level initialization */
  BSP_QSPI_MspInit();
 8002948:	f000 f964 	bl	8002c14 <BSP_QSPI_MspInit>
  
  /* QSPI initialization */
  QSPIHandle.Init.ClockPrescaler     = 2; /* QSPI clock = 80MHz / (ClockPrescaler+1) = 26.67MHz */
 800294c:	4b2b      	ldr	r3, [pc, #172]	; (80029fc <BSP_QSPI_Init+0xd0>)
 800294e:	2202      	movs	r2, #2
 8002950:	605a      	str	r2, [r3, #4]
  QSPIHandle.Init.FifoThreshold      = 4;
 8002952:	4b2a      	ldr	r3, [pc, #168]	; (80029fc <BSP_QSPI_Init+0xd0>)
 8002954:	2204      	movs	r2, #4
 8002956:	609a      	str	r2, [r3, #8]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8002958:	4b28      	ldr	r3, [pc, #160]	; (80029fc <BSP_QSPI_Init+0xd0>)
 800295a:	2210      	movs	r2, #16
 800295c:	60da      	str	r2, [r3, #12]
 800295e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8002962:	60bb      	str	r3, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	fa93 f3a3 	rbit	r3, r3
 800296a:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	60fb      	str	r3, [r7, #12]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <BSP_QSPI_Init+0x4e>
  {
    return 32U;
 8002976:	2320      	movs	r3, #32
 8002978:	e003      	b.n	8002982 <BSP_QSPI_Init+0x56>
  }
  return __builtin_clz(value);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	fab3 f383 	clz	r3, r3
 8002980:	b2db      	uxtb	r3, r3
  QSPIHandle.Init.FlashSize          = POSITION_VAL(MX25R6435F_FLASH_SIZE) - 1;
 8002982:	3b01      	subs	r3, #1
 8002984:	461a      	mov	r2, r3
 8002986:	4b1d      	ldr	r3, [pc, #116]	; (80029fc <BSP_QSPI_Init+0xd0>)
 8002988:	611a      	str	r2, [r3, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800298a:	4b1c      	ldr	r3, [pc, #112]	; (80029fc <BSP_QSPI_Init+0xd0>)
 800298c:	2200      	movs	r2, #0
 800298e:	615a      	str	r2, [r3, #20]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8002990:	4b1a      	ldr	r3, [pc, #104]	; (80029fc <BSP_QSPI_Init+0xd0>)
 8002992:	2200      	movs	r2, #0
 8002994:	619a      	str	r2, [r3, #24]

  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8002996:	4819      	ldr	r0, [pc, #100]	; (80029fc <BSP_QSPI_Init+0xd0>)
 8002998:	f003 f8e0 	bl	8005b5c <HAL_QSPI_Init>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <BSP_QSPI_Init+0x7a>
  {
    return QSPI_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e025      	b.n	80029f2 <BSP_QSPI_Init+0xc6>
  }

  /* QSPI memory reset */
  if (QSPI_ResetMemory(&QSPIHandle) != QSPI_OK)
 80029a6:	4815      	ldr	r0, [pc, #84]	; (80029fc <BSP_QSPI_Init+0xd0>)
 80029a8:	f000 f974 	bl	8002c94 <QSPI_ResetMemory>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <BSP_QSPI_Init+0x8a>
  {
    return QSPI_NOT_SUPPORTED;
 80029b2:	2304      	movs	r3, #4
 80029b4:	e01d      	b.n	80029f2 <BSP_QSPI_Init+0xc6>
  }
 
  /* QSPI quad enable */
  if (QSPI_QuadMode(&QSPIHandle, QSPI_QUAD_ENABLE) != QSPI_OK)
 80029b6:	2101      	movs	r1, #1
 80029b8:	4810      	ldr	r0, [pc, #64]	; (80029fc <BSP_QSPI_Init+0xd0>)
 80029ba:	f000 fa35 	bl	8002e28 <QSPI_QuadMode>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d001      	beq.n	80029c8 <BSP_QSPI_Init+0x9c>
  {
    return QSPI_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e014      	b.n	80029f2 <BSP_QSPI_Init+0xc6>
  }
 
  /* High performance mode enable */
  if (QSPI_HighPerfMode(&QSPIHandle, QSPI_HIGH_PERF_ENABLE) != QSPI_OK)
 80029c8:	2101      	movs	r1, #1
 80029ca:	480c      	ldr	r0, [pc, #48]	; (80029fc <BSP_QSPI_Init+0xd0>)
 80029cc:	f000 fad4 	bl	8002f78 <QSPI_HighPerfMode>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <BSP_QSPI_Init+0xae>
  {
    return QSPI_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e00b      	b.n	80029f2 <BSP_QSPI_Init+0xc6>
  }
  
  /* Re-configure the clock for the high performance mode */
  QSPIHandle.Init.ClockPrescaler = 1; /* QSPI clock = 80MHz / (ClockPrescaler+1) = 40MHz */
 80029da:	4b08      	ldr	r3, [pc, #32]	; (80029fc <BSP_QSPI_Init+0xd0>)
 80029dc:	2201      	movs	r2, #1
 80029de:	605a      	str	r2, [r3, #4]

  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 80029e0:	4806      	ldr	r0, [pc, #24]	; (80029fc <BSP_QSPI_Init+0xd0>)
 80029e2:	f003 f8bb 	bl	8005b5c <HAL_QSPI_Init>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <BSP_QSPI_Init+0xc4>
  {
    return QSPI_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e000      	b.n	80029f2 <BSP_QSPI_Init+0xc6>
  }

  return QSPI_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	20002ba8 	.word	0x20002ba8
 8002a00:	a0001000 	.word	0xa0001000

08002a04 <BSP_QSPI_Read>:
  * @param  ReadAddr : Read start address
  * @param  Size     : Size of data to read    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b092      	sub	sp, #72	; 0x48
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the read command */
  sCommand.InstructionMode    = QSPI_INSTRUCTION_1_LINE;
 8002a10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a14:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction        = QUAD_INOUT_READ_CMD;
 8002a16:	23eb      	movs	r3, #235	; 0xeb
 8002a18:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode        = QSPI_ADDRESS_4_LINES;
 8002a1a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressSize        = QSPI_ADDRESS_24_BITS;
 8002a20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a24:	61fb      	str	r3, [r7, #28]
  sCommand.Address            = ReadAddr;
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	617b      	str	r3, [r7, #20]
  sCommand.AlternateByteMode  = QSPI_ALTERNATE_BYTES_4_LINES;
 8002a2a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002a2e:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AlternateBytesSize = QSPI_ALTERNATE_BYTES_8_BITS;
 8002a30:	2300      	movs	r3, #0
 8002a32:	623b      	str	r3, [r7, #32]
  sCommand.AlternateBytes     = MX25R6435F_ALT_BYTES_NO_PE_MODE;
 8002a34:	23aa      	movs	r3, #170	; 0xaa
 8002a36:	61bb      	str	r3, [r7, #24]
  sCommand.DataMode           = QSPI_DATA_4_LINES;
 8002a38:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8002a3c:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles        = MX25R6435F_DUMMY_CYCLES_READ_QUAD;
 8002a3e:	2304      	movs	r3, #4
 8002a40:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData             = Size;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode            = QSPI_DDR_MODE_DISABLE;
 8002a46:	2300      	movs	r3, #0
 8002a48:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle   = QSPI_DDR_HHC_ANALOG_DELAY;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode           = QSPI_SIOO_INST_EVERY_CMD;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Configure the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002a52:	f107 0310 	add.w	r3, r7, #16
 8002a56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	480b      	ldr	r0, [pc, #44]	; (8002a8c <BSP_QSPI_Read+0x88>)
 8002a5e:	f003 f917 	bl	8005c90 <HAL_QSPI_Command>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <BSP_QSPI_Read+0x68>
  {
    return QSPI_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e00b      	b.n	8002a84 <BSP_QSPI_Read+0x80>
  }
  
  /* Reception of the data */
  if (HAL_QSPI_Receive(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a70:	68f9      	ldr	r1, [r7, #12]
 8002a72:	4806      	ldr	r0, [pc, #24]	; (8002a8c <BSP_QSPI_Read+0x88>)
 8002a74:	f003 fa01 	bl	8005e7a <HAL_QSPI_Receive>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <BSP_QSPI_Read+0x7e>
  {
    return QSPI_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e000      	b.n	8002a84 <BSP_QSPI_Read+0x80>
  }

  return QSPI_OK;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3748      	adds	r7, #72	; 0x48
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	20002ba8 	.word	0x20002ba8

08002a90 <BSP_QSPI_Write>:
  * @param  WriteAddr : Write start address
  * @param  Size      : Size of data to write    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b096      	sub	sp, #88	; 0x58
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef sCommand;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_size = MX25R6435F_PAGE_SIZE - (WriteAddr % MX25R6435F_PAGE_SIZE);
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002aa4:	657b      	str	r3, [r7, #84]	; 0x54

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 8002aa6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d901      	bls.n	8002ab2 <BSP_QSPI_Write+0x22>
  {
    current_size = Size;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	657b      	str	r3, [r7, #84]	; 0x54
  }

  /* Initialize the address variables */
  current_addr = WriteAddr;
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	653b      	str	r3, [r7, #80]	; 0x50
  end_addr = WriteAddr + Size;
 8002ab6:	68ba      	ldr	r2, [r7, #8]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4413      	add	r3, r2
 8002abc:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Initialize the program command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002abe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.Instruction       = QUAD_PAGE_PROG_CMD;
 8002ac4:	2338      	movs	r3, #56	; 0x38
 8002ac6:	617b      	str	r3, [r7, #20]
  sCommand.AddressMode       = QSPI_ADDRESS_4_LINES;
 8002ac8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002acc:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 8002ace:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ad2:	623b      	str	r3, [r7, #32]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode          = QSPI_DATA_4_LINES;
 8002ad8:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8002adc:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DummyCycles       = 0;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002aea:	2300      	movs	r3, #0
 8002aec:	64bb      	str	r3, [r7, #72]	; 0x48
  
  /* Perform the write page by page */
  do
  {
    sCommand.Address = current_addr;
 8002aee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002af0:	61bb      	str	r3, [r7, #24]
    sCommand.NbData  = current_size;
 8002af2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002af4:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Enable write operations */
    if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8002af6:	4824      	ldr	r0, [pc, #144]	; (8002b88 <BSP_QSPI_Write+0xf8>)
 8002af8:	f000 f910 	bl	8002d1c <QSPI_WriteEnable>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <BSP_QSPI_Write+0x76>
    {
      return QSPI_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e03b      	b.n	8002b7e <BSP_QSPI_Write+0xee>
    }
    
    /* Configure the command */
    if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002b06:	f107 0314 	add.w	r3, r7, #20
 8002b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b0e:	4619      	mov	r1, r3
 8002b10:	481d      	ldr	r0, [pc, #116]	; (8002b88 <BSP_QSPI_Write+0xf8>)
 8002b12:	f003 f8bd 	bl	8005c90 <HAL_QSPI_Command>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d001      	beq.n	8002b20 <BSP_QSPI_Write+0x90>
    {
      return QSPI_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e02e      	b.n	8002b7e <BSP_QSPI_Write+0xee>
    }
    
    /* Transmission of the data */
    if (HAL_QSPI_Transmit(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b24:	68f9      	ldr	r1, [r7, #12]
 8002b26:	4818      	ldr	r0, [pc, #96]	; (8002b88 <BSP_QSPI_Write+0xf8>)
 8002b28:	f003 f910 	bl	8005d4c <HAL_QSPI_Transmit>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <BSP_QSPI_Write+0xa6>
    {
      return QSPI_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e023      	b.n	8002b7e <BSP_QSPI_Write+0xee>
    }
    
    /* Configure automatic polling mode to wait for end of program */  
    if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8002b36:	f241 3188 	movw	r1, #5000	; 0x1388
 8002b3a:	4813      	ldr	r0, [pc, #76]	; (8002b88 <BSP_QSPI_Write+0xf8>)
 8002b3c:	f000 f93a 	bl	8002db4 <QSPI_AutoPollingMemReady>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <BSP_QSPI_Write+0xba>
    {
      return QSPI_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e019      	b.n	8002b7e <BSP_QSPI_Write+0xee>
    }
    
    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 8002b4a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002b4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b4e:	4413      	add	r3, r2
 8002b50:	653b      	str	r3, [r7, #80]	; 0x50
    pData += current_size;
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b56:	4413      	add	r3, r2
 8002b58:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + MX25R6435F_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : MX25R6435F_PAGE_SIZE;
 8002b5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b5c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002b60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d203      	bcs.n	8002b6e <BSP_QSPI_Write+0xde>
 8002b66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	e001      	b.n	8002b72 <BSP_QSPI_Write+0xe2>
 8002b6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b72:	657b      	str	r3, [r7, #84]	; 0x54
  } while (current_addr < end_addr);
 8002b74:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002b76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d3b8      	bcc.n	8002aee <BSP_QSPI_Write+0x5e>
  
  return QSPI_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3758      	adds	r7, #88	; 0x58
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	20002ba8 	.word	0x20002ba8

08002b8c <BSP_QSPI_Erase_Block>:
  * @brief  Erases the specified block of the QSPI memory. 
  * @param  BlockAddress : Block address to erase  
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Erase_Block(uint32_t BlockAddress)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b090      	sub	sp, #64	; 0x40
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the erase command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002b94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b98:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = BLOCK_ERASE_CMD;
 8002b9a:	23d8      	movs	r3, #216	; 0xd8
 8002b9c:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_1_LINE;
 8002b9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ba2:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 8002ba4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ba8:	617b      	str	r3, [r7, #20]
  sCommand.Address           = BlockAddress;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	60fb      	str	r3, [r7, #12]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_NONE;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	61fb      	str	r3, [r7, #28]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8002bc6:	4812      	ldr	r0, [pc, #72]	; (8002c10 <BSP_QSPI_Erase_Block+0x84>)
 8002bc8:	f000 f8a8 	bl	8002d1c <QSPI_WriteEnable>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <BSP_QSPI_Erase_Block+0x4a>
  {
    return QSPI_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e017      	b.n	8002c06 <BSP_QSPI_Erase_Block+0x7a>
  }

  /* Send the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002bd6:	f107 0308 	add.w	r3, r7, #8
 8002bda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bde:	4619      	mov	r1, r3
 8002be0:	480b      	ldr	r0, [pc, #44]	; (8002c10 <BSP_QSPI_Erase_Block+0x84>)
 8002be2:	f003 f855 	bl	8005c90 <HAL_QSPI_Command>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d001      	beq.n	8002bf0 <BSP_QSPI_Erase_Block+0x64>
  {
    return QSPI_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e00a      	b.n	8002c06 <BSP_QSPI_Erase_Block+0x7a>
  }
  
  /* Configure automatic polling mode to wait for end of erase */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, MX25R6435F_BLOCK_ERASE_MAX_TIME) != QSPI_OK)
 8002bf0:	f640 51ac 	movw	r1, #3500	; 0xdac
 8002bf4:	4806      	ldr	r0, [pc, #24]	; (8002c10 <BSP_QSPI_Erase_Block+0x84>)
 8002bf6:	f000 f8dd 	bl	8002db4 <QSPI_AutoPollingMemReady>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <BSP_QSPI_Erase_Block+0x78>
  {
    return QSPI_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e000      	b.n	8002c06 <BSP_QSPI_Erase_Block+0x7a>
  }

  return QSPI_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3740      	adds	r7, #64	; 0x40
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	20002ba8 	.word	0x20002ba8

08002c14 <BSP_QSPI_MspInit>:
/**
  * @brief  Initializes the QSPI MSP.
  * @retval None
  */
__weak void BSP_QSPI_MspInit(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b088      	sub	sp, #32
 8002c18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the QuadSPI memory interface clock */
  __HAL_RCC_QSPI_CLK_ENABLE();
 8002c1a:	4b1c      	ldr	r3, [pc, #112]	; (8002c8c <BSP_QSPI_MspInit+0x78>)
 8002c1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c1e:	4a1b      	ldr	r2, [pc, #108]	; (8002c8c <BSP_QSPI_MspInit+0x78>)
 8002c20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c24:	6513      	str	r3, [r2, #80]	; 0x50
 8002c26:	4b19      	ldr	r3, [pc, #100]	; (8002c8c <BSP_QSPI_MspInit+0x78>)
 8002c28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c2e:	60bb      	str	r3, [r7, #8]
 8002c30:	68bb      	ldr	r3, [r7, #8]

  /* Reset the QuadSPI memory interface */
  __HAL_RCC_QSPI_FORCE_RESET();
 8002c32:	4b16      	ldr	r3, [pc, #88]	; (8002c8c <BSP_QSPI_MspInit+0x78>)
 8002c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c36:	4a15      	ldr	r2, [pc, #84]	; (8002c8c <BSP_QSPI_MspInit+0x78>)
 8002c38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c3c:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_QSPI_RELEASE_RESET();
 8002c3e:	4b13      	ldr	r3, [pc, #76]	; (8002c8c <BSP_QSPI_MspInit+0x78>)
 8002c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c42:	4a12      	ldr	r2, [pc, #72]	; (8002c8c <BSP_QSPI_MspInit+0x78>)
 8002c44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c48:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c4a:	4b10      	ldr	r3, [pc, #64]	; (8002c8c <BSP_QSPI_MspInit+0x78>)
 8002c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c4e:	4a0f      	ldr	r2, [pc, #60]	; (8002c8c <BSP_QSPI_MspInit+0x78>)
 8002c50:	f043 0310 	orr.w	r3, r3, #16
 8002c54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c56:	4b0d      	ldr	r3, [pc, #52]	; (8002c8c <BSP_QSPI_MspInit+0x78>)
 8002c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c5a:	f003 0310 	and.w	r3, r3, #16
 8002c5e:	607b      	str	r3, [r7, #4]
 8002c60:	687b      	ldr	r3, [r7, #4]

  /* QSPI CLK, CS, D0, D1, D2 and D3 GPIO pins configuration  */
  GPIO_InitStruct.Pin       = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 |\
 8002c62:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8002c66:	60fb      	str	r3, [r7, #12]
                              GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8002c68:	2302      	movs	r3, #2
 8002c6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c70:	2303      	movs	r3, #3
 8002c72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002c74:	230a      	movs	r3, #10
 8002c76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c78:	f107 030c 	add.w	r3, r7, #12
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	4804      	ldr	r0, [pc, #16]	; (8002c90 <BSP_QSPI_MspInit+0x7c>)
 8002c80:	f002 fb08 	bl	8005294 <HAL_GPIO_Init>
}
 8002c84:	bf00      	nop
 8002c86:	3720      	adds	r7, #32
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	40021000 	.word	0x40021000
 8002c90:	48001000 	.word	0x48001000

08002c94 <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b090      	sub	sp, #64	; 0x40
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the reset enable command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002c9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ca0:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = RESET_ENABLE_CMD;
 8002ca2:	2366      	movs	r3, #102	; 0x66
 8002ca4:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002caa:	2300      	movs	r3, #0
 8002cac:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_NONE;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	61fb      	str	r3, [r7, #28]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002cc2:	f107 0308 	add.w	r3, r7, #8
 8002cc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cca:	4619      	mov	r1, r3
 8002ccc:	4812      	ldr	r0, [pc, #72]	; (8002d18 <QSPI_ResetMemory+0x84>)
 8002cce:	f002 ffdf 	bl	8005c90 <HAL_QSPI_Command>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <QSPI_ResetMemory+0x48>
  {
    return QSPI_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e019      	b.n	8002d10 <QSPI_ResetMemory+0x7c>
  }

  /* Send the reset memory command */
  sCommand.Instruction = RESET_MEMORY_CMD;
 8002cdc:	2399      	movs	r3, #153	; 0x99
 8002cde:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002ce0:	f107 0308 	add.w	r3, r7, #8
 8002ce4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ce8:	4619      	mov	r1, r3
 8002cea:	480b      	ldr	r0, [pc, #44]	; (8002d18 <QSPI_ResetMemory+0x84>)
 8002cec:	f002 ffd0 	bl	8005c90 <HAL_QSPI_Command>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <QSPI_ResetMemory+0x66>
  {
    return QSPI_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e00a      	b.n	8002d10 <QSPI_ResetMemory+0x7c>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8002cfa:	f241 3188 	movw	r1, #5000	; 0x1388
 8002cfe:	4806      	ldr	r0, [pc, #24]	; (8002d18 <QSPI_ResetMemory+0x84>)
 8002d00:	f000 f858 	bl	8002db4 <QSPI_AutoPollingMemReady>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <QSPI_ResetMemory+0x7a>
  {
    return QSPI_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e000      	b.n	8002d10 <QSPI_ResetMemory+0x7c>
  }

  return QSPI_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3740      	adds	r7, #64	; 0x40
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	20002ba8 	.word	0x20002ba8

08002d1c <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b096      	sub	sp, #88	; 0x58
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Enable write operations */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002d24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d28:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = WRITE_ENABLE_CMD;
 8002d2a:	2306      	movs	r3, #6
 8002d2c:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002d32:	2300      	movs	r3, #0
 8002d34:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_NONE;
 8002d36:	2300      	movs	r3, #0
 8002d38:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002d42:	2300      	movs	r3, #0
 8002d44:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002d46:	2300      	movs	r3, #0
 8002d48:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002d4a:	f107 0320 	add.w	r3, r7, #32
 8002d4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d52:	4619      	mov	r1, r3
 8002d54:	4816      	ldr	r0, [pc, #88]	; (8002db0 <QSPI_WriteEnable+0x94>)
 8002d56:	f002 ff9b 	bl	8005c90 <HAL_QSPI_Command>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d001      	beq.n	8002d64 <QSPI_WriteEnable+0x48>
  {
    return QSPI_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e020      	b.n	8002da6 <QSPI_WriteEnable+0x8a>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  sConfig.Match           = MX25R6435F_SR_WEL;
 8002d64:	2302      	movs	r3, #2
 8002d66:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = MX25R6435F_SR_WEL;
 8002d68:	2302      	movs	r3, #2
 8002d6a:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 8002d70:	2301      	movs	r3, #1
 8002d72:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 8002d74:	2310      	movs	r3, #16
 8002d76:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8002d78:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d7c:	61fb      	str	r3, [r7, #28]

  sCommand.Instruction    = READ_STATUS_REG_CMD;
 8002d7e:	2305      	movs	r3, #5
 8002d80:	623b      	str	r3, [r7, #32]
  sCommand.DataMode       = QSPI_DATA_1_LINE;
 8002d82:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d86:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002d88:	f107 0208 	add.w	r2, r7, #8
 8002d8c:	f107 0120 	add.w	r1, r7, #32
 8002d90:	f241 3388 	movw	r3, #5000	; 0x1388
 8002d94:	4806      	ldr	r0, [pc, #24]	; (8002db0 <QSPI_WriteEnable+0x94>)
 8002d96:	f003 f912 	bl	8005fbe <HAL_QSPI_AutoPolling>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d001      	beq.n	8002da4 <QSPI_WriteEnable+0x88>
  {
    return QSPI_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e000      	b.n	8002da6 <QSPI_WriteEnable+0x8a>
  }

  return QSPI_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3758      	adds	r7, #88	; 0x58
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	20002ba8 	.word	0x20002ba8

08002db4 <QSPI_AutoPollingMemReady>:
  * @param  hqspi   : QSPI handle
  * @param  Timeout : Timeout for auto-polling
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b096      	sub	sp, #88	; 0x58
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready */  
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002dbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002dc2:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 8002dc4:	2305      	movs	r3, #5
 8002dc6:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8002dd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002dd4:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002dde:	2300      	movs	r3, #0
 8002de0:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002de2:	2300      	movs	r3, #0
 8002de4:	657b      	str	r3, [r7, #84]	; 0x54

  sConfig.Match           = 0;
 8002de6:	2300      	movs	r3, #0
 8002de8:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = MX25R6435F_SR_WIP;
 8002dea:	2301      	movs	r3, #1
 8002dec:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 8002dee:	2300      	movs	r3, #0
 8002df0:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 8002df2:	2301      	movs	r3, #1
 8002df4:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 8002df6:	2310      	movs	r3, #16
 8002df8:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8002dfa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002dfe:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, Timeout) != HAL_OK)
 8002e00:	f107 0208 	add.w	r2, r7, #8
 8002e04:	f107 0120 	add.w	r1, r7, #32
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	4806      	ldr	r0, [pc, #24]	; (8002e24 <QSPI_AutoPollingMemReady+0x70>)
 8002e0c:	f003 f8d7 	bl	8005fbe <HAL_QSPI_AutoPolling>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <QSPI_AutoPollingMemReady+0x66>
  {
    return QSPI_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e000      	b.n	8002e1c <QSPI_AutoPollingMemReady+0x68>
  }

  return QSPI_OK;
 8002e1a:	2300      	movs	r3, #0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3758      	adds	r7, #88	; 0x58
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	20002ba8 	.word	0x20002ba8

08002e28 <QSPI_QuadMode>:
  * @param  hqspi     : QSPI handle
  * @param  Operation : QSPI_QUAD_ENABLE or QSPI_QUAD_DISABLE mode  
  * @retval None
  */
static uint8_t QSPI_QuadMode(QSPI_HandleTypeDef *hqspi, uint8_t Operation)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b092      	sub	sp, #72	; 0x48
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	460b      	mov	r3, r1
 8002e32:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef sCommand;
  uint8_t reg;

  /* Read status register */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002e34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e38:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 8002e3a:	2305      	movs	r3, #5
 8002e3c:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002e42:	2300      	movs	r3, #0
 8002e44:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8002e46:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e4a:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles       = 0;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData            = 1;
 8002e50:	2301      	movs	r3, #1
 8002e52:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002e54:	2300      	movs	r3, #0
 8002e56:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002e60:	f107 0310 	add.w	r3, r7, #16
 8002e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e68:	4619      	mov	r1, r3
 8002e6a:	4842      	ldr	r0, [pc, #264]	; (8002f74 <QSPI_QuadMode+0x14c>)
 8002e6c:	f002 ff10 	bl	8005c90 <HAL_QSPI_Command>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <QSPI_QuadMode+0x52>
  {
    return QSPI_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e077      	b.n	8002f6a <QSPI_QuadMode+0x142>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002e7a:	f107 030f 	add.w	r3, r7, #15
 8002e7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e82:	4619      	mov	r1, r3
 8002e84:	483b      	ldr	r0, [pc, #236]	; (8002f74 <QSPI_QuadMode+0x14c>)
 8002e86:	f002 fff8 	bl	8005e7a <HAL_QSPI_Receive>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d001      	beq.n	8002e94 <QSPI_QuadMode+0x6c>
  {
    return QSPI_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e06a      	b.n	8002f6a <QSPI_QuadMode+0x142>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8002e94:	4837      	ldr	r0, [pc, #220]	; (8002f74 <QSPI_QuadMode+0x14c>)
 8002e96:	f7ff ff41 	bl	8002d1c <QSPI_WriteEnable>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <QSPI_QuadMode+0x7c>
  {
    return QSPI_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e062      	b.n	8002f6a <QSPI_QuadMode+0x142>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_QUAD_ENABLE)
 8002ea4:	78fb      	ldrb	r3, [r7, #3]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d105      	bne.n	8002eb6 <QSPI_QuadMode+0x8e>
  {
    SET_BIT(reg, MX25R6435F_SR_QE);
 8002eaa:	7bfb      	ldrb	r3, [r7, #15]
 8002eac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	73fb      	strb	r3, [r7, #15]
 8002eb4:	e004      	b.n	8002ec0 <QSPI_QuadMode+0x98>
  }
  else
  {
    CLEAR_BIT(reg, MX25R6435F_SR_QE);
 8002eb6:	7bfb      	ldrb	r3, [r7, #15]
 8002eb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	73fb      	strb	r3, [r7, #15]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	613b      	str	r3, [r7, #16]

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002ec4:	f107 0310 	add.w	r3, r7, #16
 8002ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ecc:	4619      	mov	r1, r3
 8002ece:	4829      	ldr	r0, [pc, #164]	; (8002f74 <QSPI_QuadMode+0x14c>)
 8002ed0:	f002 fede 	bl	8005c90 <HAL_QSPI_Command>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <QSPI_QuadMode+0xb6>
  {
    return QSPI_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e045      	b.n	8002f6a <QSPI_QuadMode+0x142>
  }

  if (HAL_QSPI_Transmit(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002ede:	f107 030f 	add.w	r3, r7, #15
 8002ee2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	4822      	ldr	r0, [pc, #136]	; (8002f74 <QSPI_QuadMode+0x14c>)
 8002eea:	f002 ff2f 	bl	8005d4c <HAL_QSPI_Transmit>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d001      	beq.n	8002ef8 <QSPI_QuadMode+0xd0>
  {
    return QSPI_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e038      	b.n	8002f6a <QSPI_QuadMode+0x142>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8002ef8:	f241 3188 	movw	r1, #5000	; 0x1388
 8002efc:	481d      	ldr	r0, [pc, #116]	; (8002f74 <QSPI_QuadMode+0x14c>)
 8002efe:	f7ff ff59 	bl	8002db4 <QSPI_AutoPollingMemReady>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <QSPI_QuadMode+0xe4>
  {
    return QSPI_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e02e      	b.n	8002f6a <QSPI_QuadMode+0x142>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_STATUS_REG_CMD;
 8002f0c:	2305      	movs	r3, #5
 8002f0e:	613b      	str	r3, [r7, #16]

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002f10:	f107 0310 	add.w	r3, r7, #16
 8002f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f18:	4619      	mov	r1, r3
 8002f1a:	4816      	ldr	r0, [pc, #88]	; (8002f74 <QSPI_QuadMode+0x14c>)
 8002f1c:	f002 feb8 	bl	8005c90 <HAL_QSPI_Command>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d001      	beq.n	8002f2a <QSPI_QuadMode+0x102>
  {
    return QSPI_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e01f      	b.n	8002f6a <QSPI_QuadMode+0x142>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002f2a:	f107 030f 	add.w	r3, r7, #15
 8002f2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f32:	4619      	mov	r1, r3
 8002f34:	480f      	ldr	r0, [pc, #60]	; (8002f74 <QSPI_QuadMode+0x14c>)
 8002f36:	f002 ffa0 	bl	8005e7a <HAL_QSPI_Receive>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <QSPI_QuadMode+0x11c>
  {
    return QSPI_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e012      	b.n	8002f6a <QSPI_QuadMode+0x142>
  }
  
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 8002f44:	7bfb      	ldrb	r3, [r7, #15]
 8002f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d102      	bne.n	8002f54 <QSPI_QuadMode+0x12c>
 8002f4e:	78fb      	ldrb	r3, [r7, #3]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d007      	beq.n	8002f64 <QSPI_QuadMode+0x13c>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 8002f54:	7bfb      	ldrb	r3, [r7, #15]
 8002f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d004      	beq.n	8002f68 <QSPI_QuadMode+0x140>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 8002f5e:	78fb      	ldrb	r3, [r7, #3]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d101      	bne.n	8002f68 <QSPI_QuadMode+0x140>
  {
    return QSPI_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e000      	b.n	8002f6a <QSPI_QuadMode+0x142>
  }

  return QSPI_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3748      	adds	r7, #72	; 0x48
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	20002ba8 	.word	0x20002ba8

08002f78 <QSPI_HighPerfMode>:
  * @param  hqspi     : QSPI handle
  * @param  Operation : QSPI_HIGH_PERF_ENABLE or QSPI_HIGH_PERF_DISABLE high performance mode    
  * @retval None
  */
static uint8_t QSPI_HighPerfMode(QSPI_HandleTypeDef *hqspi, uint8_t Operation)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b092      	sub	sp, #72	; 0x48
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	460b      	mov	r3, r1
 8002f82:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef sCommand;
  uint8_t reg[3];

  /* Read status register */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002f84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f88:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 8002f8a:	2305      	movs	r3, #5
 8002f8c:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002f92:	2300      	movs	r3, #0
 8002f94:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8002f96:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f9a:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles       = 0;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData            = 1;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002fac:	2300      	movs	r3, #0
 8002fae:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002fb0:	f107 0310 	add.w	r3, r7, #16
 8002fb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fb8:	4619      	mov	r1, r3
 8002fba:	4853      	ldr	r0, [pc, #332]	; (8003108 <QSPI_HighPerfMode+0x190>)
 8002fbc:	f002 fe68 	bl	8005c90 <HAL_QSPI_Command>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <QSPI_HighPerfMode+0x52>
  {
    return QSPI_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e09a      	b.n	8003100 <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002fca:	f107 030c 	add.w	r3, r7, #12
 8002fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	484c      	ldr	r0, [pc, #304]	; (8003108 <QSPI_HighPerfMode+0x190>)
 8002fd6:	f002 ff50 	bl	8005e7a <HAL_QSPI_Receive>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d001      	beq.n	8002fe4 <QSPI_HighPerfMode+0x6c>
  {
    return QSPI_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e08d      	b.n	8003100 <QSPI_HighPerfMode+0x188>
  }

  /* Read configuration registers */
  sCommand.Instruction = READ_CFG_REG_CMD;
 8002fe4:	2315      	movs	r3, #21
 8002fe6:	613b      	str	r3, [r7, #16]
  sCommand.NbData      = 2;
 8002fe8:	2302      	movs	r3, #2
 8002fea:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002fec:	f107 0310 	add.w	r3, r7, #16
 8002ff0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	4844      	ldr	r0, [pc, #272]	; (8003108 <QSPI_HighPerfMode+0x190>)
 8002ff8:	f002 fe4a 	bl	8005c90 <HAL_QSPI_Command>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <QSPI_HighPerfMode+0x8e>
  {
    return QSPI_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e07c      	b.n	8003100 <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003006:	f107 030c 	add.w	r3, r7, #12
 800300a:	3301      	adds	r3, #1
 800300c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003010:	4619      	mov	r1, r3
 8003012:	483d      	ldr	r0, [pc, #244]	; (8003108 <QSPI_HighPerfMode+0x190>)
 8003014:	f002 ff31 	bl	8005e7a <HAL_QSPI_Receive>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <QSPI_HighPerfMode+0xaa>
  {
    return QSPI_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e06e      	b.n	8003100 <QSPI_HighPerfMode+0x188>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8003022:	4839      	ldr	r0, [pc, #228]	; (8003108 <QSPI_HighPerfMode+0x190>)
 8003024:	f7ff fe7a 	bl	8002d1c <QSPI_WriteEnable>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <QSPI_HighPerfMode+0xba>
  {
    return QSPI_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e066      	b.n	8003100 <QSPI_HighPerfMode+0x188>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_HIGH_PERF_ENABLE)
 8003032:	78fb      	ldrb	r3, [r7, #3]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d105      	bne.n	8003044 <QSPI_HighPerfMode+0xcc>
  {
    SET_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 8003038:	7bbb      	ldrb	r3, [r7, #14]
 800303a:	f043 0302 	orr.w	r3, r3, #2
 800303e:	b2db      	uxtb	r3, r3
 8003040:	73bb      	strb	r3, [r7, #14]
 8003042:	e004      	b.n	800304e <QSPI_HighPerfMode+0xd6>
  }
  else
  {
    CLEAR_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 8003044:	7bbb      	ldrb	r3, [r7, #14]
 8003046:	f023 0302 	bic.w	r3, r3, #2
 800304a:	b2db      	uxtb	r3, r3
 800304c:	73bb      	strb	r3, [r7, #14]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 800304e:	2301      	movs	r3, #1
 8003050:	613b      	str	r3, [r7, #16]
  sCommand.NbData      = 3;
 8003052:	2303      	movs	r3, #3
 8003054:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003056:	f107 0310 	add.w	r3, r7, #16
 800305a:	f241 3288 	movw	r2, #5000	; 0x1388
 800305e:	4619      	mov	r1, r3
 8003060:	4829      	ldr	r0, [pc, #164]	; (8003108 <QSPI_HighPerfMode+0x190>)
 8003062:	f002 fe15 	bl	8005c90 <HAL_QSPI_Command>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d001      	beq.n	8003070 <QSPI_HighPerfMode+0xf8>
  {
    return QSPI_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e047      	b.n	8003100 <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Transmit(&QSPIHandle, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003070:	f107 030c 	add.w	r3, r7, #12
 8003074:	f241 3288 	movw	r2, #5000	; 0x1388
 8003078:	4619      	mov	r1, r3
 800307a:	4823      	ldr	r0, [pc, #140]	; (8003108 <QSPI_HighPerfMode+0x190>)
 800307c:	f002 fe66 	bl	8005d4c <HAL_QSPI_Transmit>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <QSPI_HighPerfMode+0x112>
  {
    return QSPI_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e03a      	b.n	8003100 <QSPI_HighPerfMode+0x188>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 800308a:	f241 3188 	movw	r1, #5000	; 0x1388
 800308e:	481e      	ldr	r0, [pc, #120]	; (8003108 <QSPI_HighPerfMode+0x190>)
 8003090:	f7ff fe90 	bl	8002db4 <QSPI_AutoPollingMemReady>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <QSPI_HighPerfMode+0x126>
  {
    return QSPI_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e030      	b.n	8003100 <QSPI_HighPerfMode+0x188>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_CFG_REG_CMD;
 800309e:	2315      	movs	r3, #21
 80030a0:	613b      	str	r3, [r7, #16]
  sCommand.NbData      = 2;
 80030a2:	2302      	movs	r3, #2
 80030a4:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80030a6:	f107 0310 	add.w	r3, r7, #16
 80030aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ae:	4619      	mov	r1, r3
 80030b0:	4815      	ldr	r0, [pc, #84]	; (8003108 <QSPI_HighPerfMode+0x190>)
 80030b2:	f002 fded 	bl	8005c90 <HAL_QSPI_Command>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d001      	beq.n	80030c0 <QSPI_HighPerfMode+0x148>
  {
    return QSPI_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e01f      	b.n	8003100 <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80030c0:	f107 030c 	add.w	r3, r7, #12
 80030c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c8:	4619      	mov	r1, r3
 80030ca:	480f      	ldr	r0, [pc, #60]	; (8003108 <QSPI_HighPerfMode+0x190>)
 80030cc:	f002 fed5 	bl	8005e7a <HAL_QSPI_Receive>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <QSPI_HighPerfMode+0x162>
  {
    return QSPI_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e012      	b.n	8003100 <QSPI_HighPerfMode+0x188>
  }
  
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 80030da:	7b7b      	ldrb	r3, [r7, #13]
 80030dc:	f003 0302 	and.w	r3, r3, #2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d102      	bne.n	80030ea <QSPI_HighPerfMode+0x172>
 80030e4:	78fb      	ldrb	r3, [r7, #3]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d007      	beq.n	80030fa <QSPI_HighPerfMode+0x182>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 80030ea:	7b7b      	ldrb	r3, [r7, #13]
 80030ec:	f003 0302 	and.w	r3, r3, #2
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d004      	beq.n	80030fe <QSPI_HighPerfMode+0x186>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 80030f4:	78fb      	ldrb	r3, [r7, #3]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <QSPI_HighPerfMode+0x186>
  {
    return QSPI_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e000      	b.n	8003100 <QSPI_HighPerfMode+0x188>
  }

  return QSPI_OK;
 80030fe:	2300      	movs	r3, #0
}
 8003100:	4618      	mov	r0, r3
 8003102:	3748      	adds	r7, #72	; 0x48
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	20002ba8 	.word	0x20002ba8

0800310c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003112:	2300      	movs	r3, #0
 8003114:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003116:	2003      	movs	r0, #3
 8003118:	f001 fb42 	bl	80047a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800311c:	2000      	movs	r0, #0
 800311e:	f000 f80d 	bl	800313c <HAL_InitTick>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d002      	beq.n	800312e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	71fb      	strb	r3, [r7, #7]
 800312c:	e001      	b.n	8003132 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800312e:	f7ff f879 	bl	8002224 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003132:	79fb      	ldrb	r3, [r7, #7]
}
 8003134:	4618      	mov	r0, r3
 8003136:	3708      	adds	r7, #8
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003144:	2300      	movs	r3, #0
 8003146:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003148:	4b17      	ldr	r3, [pc, #92]	; (80031a8 <HAL_InitTick+0x6c>)
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d023      	beq.n	8003198 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003150:	4b16      	ldr	r3, [pc, #88]	; (80031ac <HAL_InitTick+0x70>)
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	4b14      	ldr	r3, [pc, #80]	; (80031a8 <HAL_InitTick+0x6c>)
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	4619      	mov	r1, r3
 800315a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800315e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003162:	fbb2 f3f3 	udiv	r3, r2, r3
 8003166:	4618      	mov	r0, r3
 8003168:	f001 fb4f 	bl	800480a <HAL_SYSTICK_Config>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10f      	bne.n	8003192 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2b0f      	cmp	r3, #15
 8003176:	d809      	bhi.n	800318c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003178:	2200      	movs	r2, #0
 800317a:	6879      	ldr	r1, [r7, #4]
 800317c:	f04f 30ff 	mov.w	r0, #4294967295
 8003180:	f001 fb19 	bl	80047b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003184:	4a0a      	ldr	r2, [pc, #40]	; (80031b0 <HAL_InitTick+0x74>)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6013      	str	r3, [r2, #0]
 800318a:	e007      	b.n	800319c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	73fb      	strb	r3, [r7, #15]
 8003190:	e004      	b.n	800319c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	73fb      	strb	r3, [r7, #15]
 8003196:	e001      	b.n	800319c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800319c:	7bfb      	ldrb	r3, [r7, #15]
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3710      	adds	r7, #16
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	200000a4 	.word	0x200000a4
 80031ac:	2000009c 	.word	0x2000009c
 80031b0:	200000a0 	.word	0x200000a0

080031b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80031b8:	4b06      	ldr	r3, [pc, #24]	; (80031d4 <HAL_IncTick+0x20>)
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	461a      	mov	r2, r3
 80031be:	4b06      	ldr	r3, [pc, #24]	; (80031d8 <HAL_IncTick+0x24>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4413      	add	r3, r2
 80031c4:	4a04      	ldr	r2, [pc, #16]	; (80031d8 <HAL_IncTick+0x24>)
 80031c6:	6013      	str	r3, [r2, #0]
}
 80031c8:	bf00      	nop
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	200000a4 	.word	0x200000a4
 80031d8:	20002bec 	.word	0x20002bec

080031dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031dc:	b480      	push	{r7}
 80031de:	af00      	add	r7, sp, #0
  return uwTick;
 80031e0:	4b03      	ldr	r3, [pc, #12]	; (80031f0 <HAL_GetTick+0x14>)
 80031e2:	681b      	ldr	r3, [r3, #0]
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	20002bec 	.word	0x20002bec

080031f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031fc:	f7ff ffee 	bl	80031dc <HAL_GetTick>
 8003200:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800320c:	d005      	beq.n	800321a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800320e:	4b0a      	ldr	r3, [pc, #40]	; (8003238 <HAL_Delay+0x44>)
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	461a      	mov	r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	4413      	add	r3, r2
 8003218:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800321a:	bf00      	nop
 800321c:	f7ff ffde 	bl	80031dc <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	429a      	cmp	r2, r3
 800322a:	d8f7      	bhi.n	800321c <HAL_Delay+0x28>
  {
  }
}
 800322c:	bf00      	nop
 800322e:	bf00      	nop
 8003230:	3710      	adds	r7, #16
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	200000a4 	.word	0x200000a4

0800323c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	431a      	orrs	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	609a      	str	r2, [r3, #8]
}
 8003256:	bf00      	nop
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr

08003262 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003262:	b480      	push	{r7}
 8003264:	b083      	sub	sp, #12
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
 800326a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	431a      	orrs	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	609a      	str	r2, [r3, #8]
}
 800327c:	bf00      	nop
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003298:	4618      	mov	r0, r3
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b087      	sub	sp, #28
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]
 80032b0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	3360      	adds	r3, #96	; 0x60
 80032b6:	461a      	mov	r2, r3
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	4413      	add	r3, r2
 80032be:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	4b08      	ldr	r3, [pc, #32]	; (80032e8 <LL_ADC_SetOffset+0x44>)
 80032c6:	4013      	ands	r3, r2
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80032ce:	683a      	ldr	r2, [r7, #0]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	4313      	orrs	r3, r2
 80032d4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80032dc:	bf00      	nop
 80032de:	371c      	adds	r7, #28
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr
 80032e8:	03fff000 	.word	0x03fff000

080032ec <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	3360      	adds	r3, #96	; 0x60
 80032fa:	461a      	mov	r2, r3
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	4413      	add	r3, r2
 8003302:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800330c:	4618      	mov	r0, r3
 800330e:	3714      	adds	r7, #20
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003318:	b480      	push	{r7}
 800331a:	b087      	sub	sp, #28
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	3360      	adds	r3, #96	; 0x60
 8003328:	461a      	mov	r2, r3
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4413      	add	r3, r2
 8003330:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	431a      	orrs	r2, r3
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003342:	bf00      	nop
 8003344:	371c      	adds	r7, #28
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr

0800334e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800334e:	b480      	push	{r7}
 8003350:	b083      	sub	sp, #12
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800335e:	2b00      	cmp	r3, #0
 8003360:	d101      	bne.n	8003366 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003362:	2301      	movs	r3, #1
 8003364:	e000      	b.n	8003368 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003374:	b480      	push	{r7}
 8003376:	b087      	sub	sp, #28
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	3330      	adds	r3, #48	; 0x30
 8003384:	461a      	mov	r2, r3
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	0a1b      	lsrs	r3, r3, #8
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	f003 030c 	and.w	r3, r3, #12
 8003390:	4413      	add	r3, r2
 8003392:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	f003 031f 	and.w	r3, r3, #31
 800339e:	211f      	movs	r1, #31
 80033a0:	fa01 f303 	lsl.w	r3, r1, r3
 80033a4:	43db      	mvns	r3, r3
 80033a6:	401a      	ands	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	0e9b      	lsrs	r3, r3, #26
 80033ac:	f003 011f 	and.w	r1, r3, #31
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	f003 031f 	and.w	r3, r3, #31
 80033b6:	fa01 f303 	lsl.w	r3, r1, r3
 80033ba:	431a      	orrs	r2, r3
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80033c0:	bf00      	nop
 80033c2:	371c      	adds	r7, #28
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b087      	sub	sp, #28
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	3314      	adds	r3, #20
 80033dc:	461a      	mov	r2, r3
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	0e5b      	lsrs	r3, r3, #25
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	f003 0304 	and.w	r3, r3, #4
 80033e8:	4413      	add	r3, r2
 80033ea:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	0d1b      	lsrs	r3, r3, #20
 80033f4:	f003 031f 	and.w	r3, r3, #31
 80033f8:	2107      	movs	r1, #7
 80033fa:	fa01 f303 	lsl.w	r3, r1, r3
 80033fe:	43db      	mvns	r3, r3
 8003400:	401a      	ands	r2, r3
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	0d1b      	lsrs	r3, r3, #20
 8003406:	f003 031f 	and.w	r3, r3, #31
 800340a:	6879      	ldr	r1, [r7, #4]
 800340c:	fa01 f303 	lsl.w	r3, r1, r3
 8003410:	431a      	orrs	r2, r3
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003416:	bf00      	nop
 8003418:	371c      	adds	r7, #28
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
	...

08003424 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800343c:	43db      	mvns	r3, r3
 800343e:	401a      	ands	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f003 0318 	and.w	r3, r3, #24
 8003446:	4908      	ldr	r1, [pc, #32]	; (8003468 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003448:	40d9      	lsrs	r1, r3
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	400b      	ands	r3, r1
 800344e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003452:	431a      	orrs	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800345a:	bf00      	nop
 800345c:	3714      	adds	r7, #20
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	0007ffff 	.word	0x0007ffff

0800346c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f003 031f 	and.w	r3, r3, #31
}
 800347c:	4618      	mov	r0, r3
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003498:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	6093      	str	r3, [r2, #8]
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034c0:	d101      	bne.n	80034c6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80034c2:	2301      	movs	r3, #1
 80034c4:	e000      	b.n	80034c8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80034c6:	2300      	movs	r3, #0
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80034e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80034e8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800350c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003510:	d101      	bne.n	8003516 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003512:	2301      	movs	r3, #1
 8003514:	e000      	b.n	8003518 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003516:	2300      	movs	r3, #0
}
 8003518:	4618      	mov	r0, r3
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003534:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003538:	f043 0201 	orr.w	r2, r3, #1
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003540:	bf00      	nop
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	2b01      	cmp	r3, #1
 800355e:	d101      	bne.n	8003564 <LL_ADC_IsEnabled+0x18>
 8003560:	2301      	movs	r3, #1
 8003562:	e000      	b.n	8003566 <LL_ADC_IsEnabled+0x1a>
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	370c      	adds	r7, #12
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr

08003572 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003572:	b480      	push	{r7}
 8003574:	b083      	sub	sp, #12
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003582:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003586:	f043 0204 	orr.w	r2, r3, #4
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800358e:	bf00      	nop
 8003590:	370c      	adds	r7, #12
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr

0800359a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800359a:	b480      	push	{r7}
 800359c:	b083      	sub	sp, #12
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f003 0304 	and.w	r3, r3, #4
 80035aa:	2b04      	cmp	r3, #4
 80035ac:	d101      	bne.n	80035b2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80035ae:	2301      	movs	r3, #1
 80035b0:	e000      	b.n	80035b4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80035b2:	2300      	movs	r3, #0
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f003 0308 	and.w	r3, r3, #8
 80035d0:	2b08      	cmp	r3, #8
 80035d2:	d101      	bne.n	80035d8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80035d4:	2301      	movs	r3, #1
 80035d6:	e000      	b.n	80035da <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	370c      	adds	r7, #12
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
	...

080035e8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80035e8:	b590      	push	{r4, r7, lr}
 80035ea:	b089      	sub	sp, #36	; 0x24
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035f0:	2300      	movs	r3, #0
 80035f2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80035f4:	2300      	movs	r3, #0
 80035f6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d101      	bne.n	8003602 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e130      	b.n	8003864 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800360c:	2b00      	cmp	r3, #0
 800360e:	d109      	bne.n	8003624 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f7fe fe2b 	bl	800226c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4618      	mov	r0, r3
 800362a:	f7ff ff3f 	bl	80034ac <LL_ADC_IsDeepPowerDownEnabled>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d004      	beq.n	800363e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4618      	mov	r0, r3
 800363a:	f7ff ff25 	bl	8003488 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4618      	mov	r0, r3
 8003644:	f7ff ff5a 	bl	80034fc <LL_ADC_IsInternalRegulatorEnabled>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d115      	bne.n	800367a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4618      	mov	r0, r3
 8003654:	f7ff ff3e 	bl	80034d4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003658:	4b84      	ldr	r3, [pc, #528]	; (800386c <HAL_ADC_Init+0x284>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	099b      	lsrs	r3, r3, #6
 800365e:	4a84      	ldr	r2, [pc, #528]	; (8003870 <HAL_ADC_Init+0x288>)
 8003660:	fba2 2303 	umull	r2, r3, r2, r3
 8003664:	099b      	lsrs	r3, r3, #6
 8003666:	3301      	adds	r3, #1
 8003668:	005b      	lsls	r3, r3, #1
 800366a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800366c:	e002      	b.n	8003674 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	3b01      	subs	r3, #1
 8003672:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1f9      	bne.n	800366e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4618      	mov	r0, r3
 8003680:	f7ff ff3c 	bl	80034fc <LL_ADC_IsInternalRegulatorEnabled>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d10d      	bne.n	80036a6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800368e:	f043 0210 	orr.w	r2, r3, #16
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800369a:	f043 0201 	orr.w	r2, r3, #1
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7ff ff75 	bl	800359a <LL_ADC_REG_IsConversionOngoing>
 80036b0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036b6:	f003 0310 	and.w	r3, r3, #16
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	f040 80c9 	bne.w	8003852 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	f040 80c5 	bne.w	8003852 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036cc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80036d0:	f043 0202 	orr.w	r2, r3, #2
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4618      	mov	r0, r3
 80036de:	f7ff ff35 	bl	800354c <LL_ADC_IsEnabled>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d115      	bne.n	8003714 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80036e8:	4862      	ldr	r0, [pc, #392]	; (8003874 <HAL_ADC_Init+0x28c>)
 80036ea:	f7ff ff2f 	bl	800354c <LL_ADC_IsEnabled>
 80036ee:	4604      	mov	r4, r0
 80036f0:	4861      	ldr	r0, [pc, #388]	; (8003878 <HAL_ADC_Init+0x290>)
 80036f2:	f7ff ff2b 	bl	800354c <LL_ADC_IsEnabled>
 80036f6:	4603      	mov	r3, r0
 80036f8:	431c      	orrs	r4, r3
 80036fa:	4860      	ldr	r0, [pc, #384]	; (800387c <HAL_ADC_Init+0x294>)
 80036fc:	f7ff ff26 	bl	800354c <LL_ADC_IsEnabled>
 8003700:	4603      	mov	r3, r0
 8003702:	4323      	orrs	r3, r4
 8003704:	2b00      	cmp	r3, #0
 8003706:	d105      	bne.n	8003714 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	4619      	mov	r1, r3
 800370e:	485c      	ldr	r0, [pc, #368]	; (8003880 <HAL_ADC_Init+0x298>)
 8003710:	f7ff fd94 	bl	800323c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	7e5b      	ldrb	r3, [r3, #25]
 8003718:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800371e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003724:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800372a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003732:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003734:	4313      	orrs	r3, r2
 8003736:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d106      	bne.n	8003750 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003746:	3b01      	subs	r3, #1
 8003748:	045b      	lsls	r3, r3, #17
 800374a:	69ba      	ldr	r2, [r7, #24]
 800374c:	4313      	orrs	r3, r2
 800374e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003754:	2b00      	cmp	r3, #0
 8003756:	d009      	beq.n	800376c <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800375c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003764:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003766:	69ba      	ldr	r2, [r7, #24]
 8003768:	4313      	orrs	r3, r2
 800376a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	68da      	ldr	r2, [r3, #12]
 8003772:	4b44      	ldr	r3, [pc, #272]	; (8003884 <HAL_ADC_Init+0x29c>)
 8003774:	4013      	ands	r3, r2
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	6812      	ldr	r2, [r2, #0]
 800377a:	69b9      	ldr	r1, [r7, #24]
 800377c:	430b      	orrs	r3, r1
 800377e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4618      	mov	r0, r3
 8003786:	f7ff ff1b 	bl	80035c0 <LL_ADC_INJ_IsConversionOngoing>
 800378a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d13d      	bne.n	800380e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d13a      	bne.n	800380e <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800379c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80037a4:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80037a6:	4313      	orrs	r3, r2
 80037a8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037b4:	f023 0302 	bic.w	r3, r3, #2
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	6812      	ldr	r2, [r2, #0]
 80037bc:	69b9      	ldr	r1, [r7, #24]
 80037be:	430b      	orrs	r3, r1
 80037c0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d118      	bne.n	80037fe <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80037d6:	f023 0304 	bic.w	r3, r3, #4
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80037e2:	4311      	orrs	r1, r2
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80037e8:	4311      	orrs	r1, r2
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80037ee:	430a      	orrs	r2, r1
 80037f0:	431a      	orrs	r2, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f042 0201 	orr.w	r2, r2, #1
 80037fa:	611a      	str	r2, [r3, #16]
 80037fc:	e007      	b.n	800380e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	691a      	ldr	r2, [r3, #16]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 0201 	bic.w	r2, r2, #1
 800380c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	2b01      	cmp	r3, #1
 8003814:	d10c      	bne.n	8003830 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381c:	f023 010f 	bic.w	r1, r3, #15
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	69db      	ldr	r3, [r3, #28]
 8003824:	1e5a      	subs	r2, r3, #1
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	430a      	orrs	r2, r1
 800382c:	631a      	str	r2, [r3, #48]	; 0x30
 800382e:	e007      	b.n	8003840 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f022 020f 	bic.w	r2, r2, #15
 800383e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003844:	f023 0303 	bic.w	r3, r3, #3
 8003848:	f043 0201 	orr.w	r2, r3, #1
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	655a      	str	r2, [r3, #84]	; 0x54
 8003850:	e007      	b.n	8003862 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003856:	f043 0210 	orr.w	r2, r3, #16
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003862:	7ffb      	ldrb	r3, [r7, #31]
}
 8003864:	4618      	mov	r0, r3
 8003866:	3724      	adds	r7, #36	; 0x24
 8003868:	46bd      	mov	sp, r7
 800386a:	bd90      	pop	{r4, r7, pc}
 800386c:	2000009c 	.word	0x2000009c
 8003870:	053e2d63 	.word	0x053e2d63
 8003874:	50040000 	.word	0x50040000
 8003878:	50040100 	.word	0x50040100
 800387c:	50040200 	.word	0x50040200
 8003880:	50040300 	.word	0x50040300
 8003884:	fff0c007 	.word	0xfff0c007

08003888 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b086      	sub	sp, #24
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003894:	4853      	ldr	r0, [pc, #332]	; (80039e4 <HAL_ADC_Start_DMA+0x15c>)
 8003896:	f7ff fde9 	bl	800346c <LL_ADC_GetMultimode>
 800389a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7ff fe7a 	bl	800359a <LL_ADC_REG_IsConversionOngoing>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f040 8093 	bne.w	80039d4 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d101      	bne.n	80038bc <HAL_ADC_Start_DMA+0x34>
 80038b8:	2302      	movs	r3, #2
 80038ba:	e08e      	b.n	80039da <HAL_ADC_Start_DMA+0x152>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a47      	ldr	r2, [pc, #284]	; (80039e8 <HAL_ADC_Start_DMA+0x160>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d008      	beq.n	80038e0 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d005      	beq.n	80038e0 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	2b05      	cmp	r3, #5
 80038d8:	d002      	beq.n	80038e0 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	2b09      	cmp	r3, #9
 80038de:	d172      	bne.n	80039c6 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80038e0:	68f8      	ldr	r0, [r7, #12]
 80038e2:	f000 fc9d 	bl	8004220 <ADC_Enable>
 80038e6:	4603      	mov	r3, r0
 80038e8:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80038ea:	7dfb      	ldrb	r3, [r7, #23]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d165      	bne.n	80039bc <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038f4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80038f8:	f023 0301 	bic.w	r3, r3, #1
 80038fc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a38      	ldr	r2, [pc, #224]	; (80039ec <HAL_ADC_Start_DMA+0x164>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d002      	beq.n	8003914 <HAL_ADC_Start_DMA+0x8c>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	e000      	b.n	8003916 <HAL_ADC_Start_DMA+0x8e>
 8003914:	4b36      	ldr	r3, [pc, #216]	; (80039f0 <HAL_ADC_Start_DMA+0x168>)
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	6812      	ldr	r2, [r2, #0]
 800391a:	4293      	cmp	r3, r2
 800391c:	d002      	beq.n	8003924 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d105      	bne.n	8003930 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003928:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003934:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d006      	beq.n	800394a <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003940:	f023 0206 	bic.w	r2, r3, #6
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	659a      	str	r2, [r3, #88]	; 0x58
 8003948:	e002      	b.n	8003950 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003954:	4a27      	ldr	r2, [pc, #156]	; (80039f4 <HAL_ADC_Start_DMA+0x16c>)
 8003956:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800395c:	4a26      	ldr	r2, [pc, #152]	; (80039f8 <HAL_ADC_Start_DMA+0x170>)
 800395e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003964:	4a25      	ldr	r2, [pc, #148]	; (80039fc <HAL_ADC_Start_DMA+0x174>)
 8003966:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	221c      	movs	r2, #28
 800396e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	685a      	ldr	r2, [r3, #4]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f042 0210 	orr.w	r2, r2, #16
 8003986:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68da      	ldr	r2, [r3, #12]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f042 0201 	orr.w	r2, r2, #1
 8003996:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	3340      	adds	r3, #64	; 0x40
 80039a2:	4619      	mov	r1, r3
 80039a4:	68ba      	ldr	r2, [r7, #8]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f001 faf6 	bl	8004f98 <HAL_DMA_Start_IT>
 80039ac:	4603      	mov	r3, r0
 80039ae:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7ff fddc 	bl	8003572 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80039ba:	e00d      	b.n	80039d8 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80039c4:	e008      	b.n	80039d8 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80039d2:	e001      	b.n	80039d8 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80039d4:	2302      	movs	r3, #2
 80039d6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80039d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3718      	adds	r7, #24
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	50040300 	.word	0x50040300
 80039e8:	50040200 	.word	0x50040200
 80039ec:	50040100 	.word	0x50040100
 80039f0:	50040000 	.word	0x50040000
 80039f4:	0800432d 	.word	0x0800432d
 80039f8:	08004405 	.word	0x08004405
 80039fc:	08004421 	.word	0x08004421

08003a00 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003a08:	bf00      	nop
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003a30:	bf00      	nop
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b0b6      	sub	sp, #216	; 0xd8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a46:	2300      	movs	r3, #0
 8003a48:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d101      	bne.n	8003a5e <HAL_ADC_ConfigChannel+0x22>
 8003a5a:	2302      	movs	r3, #2
 8003a5c:	e3c9      	b.n	80041f2 <HAL_ADC_ConfigChannel+0x7b6>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2201      	movs	r2, #1
 8003a62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7ff fd95 	bl	800359a <LL_ADC_REG_IsConversionOngoing>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	f040 83aa 	bne.w	80041cc <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	2b05      	cmp	r3, #5
 8003a86:	d824      	bhi.n	8003ad2 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	3b02      	subs	r3, #2
 8003a8e:	2b03      	cmp	r3, #3
 8003a90:	d81b      	bhi.n	8003aca <HAL_ADC_ConfigChannel+0x8e>
 8003a92:	a201      	add	r2, pc, #4	; (adr r2, 8003a98 <HAL_ADC_ConfigChannel+0x5c>)
 8003a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a98:	08003aa9 	.word	0x08003aa9
 8003a9c:	08003ab1 	.word	0x08003ab1
 8003aa0:	08003ab9 	.word	0x08003ab9
 8003aa4:	08003ac1 	.word	0x08003ac1
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8003aa8:	230c      	movs	r3, #12
 8003aaa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003aae:	e010      	b.n	8003ad2 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8003ab0:	2312      	movs	r3, #18
 8003ab2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003ab6:	e00c      	b.n	8003ad2 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8003ab8:	2318      	movs	r3, #24
 8003aba:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003abe:	e008      	b.n	8003ad2 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8003ac0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ac4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003ac8:	e003      	b.n	8003ad2 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8003aca:	2306      	movs	r3, #6
 8003acc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003ad0:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6818      	ldr	r0, [r3, #0]
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	461a      	mov	r2, r3
 8003adc:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8003ae0:	f7ff fc48 	bl	8003374 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7ff fd56 	bl	800359a <LL_ADC_REG_IsConversionOngoing>
 8003aee:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7ff fd62 	bl	80035c0 <LL_ADC_INJ_IsConversionOngoing>
 8003afc:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003b00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f040 81a4 	bne.w	8003e52 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003b0a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f040 819f 	bne.w	8003e52 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6818      	ldr	r0, [r3, #0]
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	6819      	ldr	r1, [r3, #0]
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	461a      	mov	r2, r3
 8003b22:	f7ff fc53 	bl	80033cc <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	695a      	ldr	r2, [r3, #20]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	08db      	lsrs	r3, r3, #3
 8003b32:	f003 0303 	and.w	r3, r3, #3
 8003b36:	005b      	lsls	r3, r3, #1
 8003b38:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	2b04      	cmp	r3, #4
 8003b46:	d00a      	beq.n	8003b5e <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6818      	ldr	r0, [r3, #0]
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	6919      	ldr	r1, [r3, #16]
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b58:	f7ff fba4 	bl	80032a4 <LL_ADC_SetOffset>
 8003b5c:	e179      	b.n	8003e52 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2100      	movs	r1, #0
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7ff fbc1 	bl	80032ec <LL_ADC_GetOffsetChannel>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d10a      	bne.n	8003b8a <HAL_ADC_ConfigChannel+0x14e>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2100      	movs	r1, #0
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7ff fbb6 	bl	80032ec <LL_ADC_GetOffsetChannel>
 8003b80:	4603      	mov	r3, r0
 8003b82:	0e9b      	lsrs	r3, r3, #26
 8003b84:	f003 021f 	and.w	r2, r3, #31
 8003b88:	e01e      	b.n	8003bc8 <HAL_ADC_ConfigChannel+0x18c>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2100      	movs	r1, #0
 8003b90:	4618      	mov	r0, r3
 8003b92:	f7ff fbab 	bl	80032ec <LL_ADC_GetOffsetChannel>
 8003b96:	4603      	mov	r3, r0
 8003b98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b9c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003ba0:	fa93 f3a3 	rbit	r3, r3
 8003ba4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8003ba8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003bac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8003bb0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d101      	bne.n	8003bbc <HAL_ADC_ConfigChannel+0x180>
    return 32U;
 8003bb8:	2320      	movs	r3, #32
 8003bba:	e004      	b.n	8003bc6 <HAL_ADC_ConfigChannel+0x18a>
  return __builtin_clz(value);
 8003bbc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003bc0:	fab3 f383 	clz	r3, r3
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d105      	bne.n	8003be0 <HAL_ADC_ConfigChannel+0x1a4>
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	0e9b      	lsrs	r3, r3, #26
 8003bda:	f003 031f 	and.w	r3, r3, #31
 8003bde:	e018      	b.n	8003c12 <HAL_ADC_ConfigChannel+0x1d6>
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003bec:	fa93 f3a3 	rbit	r3, r3
 8003bf0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8003bf4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003bf8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8003bfc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d101      	bne.n	8003c08 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8003c04:	2320      	movs	r3, #32
 8003c06:	e004      	b.n	8003c12 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8003c08:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003c0c:	fab3 f383 	clz	r3, r3
 8003c10:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d106      	bne.n	8003c24 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7ff fb7a 	bl	8003318 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2101      	movs	r1, #1
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7ff fb5e 	bl	80032ec <LL_ADC_GetOffsetChannel>
 8003c30:	4603      	mov	r3, r0
 8003c32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10a      	bne.n	8003c50 <HAL_ADC_ConfigChannel+0x214>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2101      	movs	r1, #1
 8003c40:	4618      	mov	r0, r3
 8003c42:	f7ff fb53 	bl	80032ec <LL_ADC_GetOffsetChannel>
 8003c46:	4603      	mov	r3, r0
 8003c48:	0e9b      	lsrs	r3, r3, #26
 8003c4a:	f003 021f 	and.w	r2, r3, #31
 8003c4e:	e01e      	b.n	8003c8e <HAL_ADC_ConfigChannel+0x252>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2101      	movs	r1, #1
 8003c56:	4618      	mov	r0, r3
 8003c58:	f7ff fb48 	bl	80032ec <LL_ADC_GetOffsetChannel>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c66:	fa93 f3a3 	rbit	r3, r3
 8003c6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8003c6e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8003c76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d101      	bne.n	8003c82 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8003c7e:	2320      	movs	r3, #32
 8003c80:	e004      	b.n	8003c8c <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8003c82:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003c86:	fab3 f383 	clz	r3, r3
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d105      	bne.n	8003ca6 <HAL_ADC_ConfigChannel+0x26a>
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	0e9b      	lsrs	r3, r3, #26
 8003ca0:	f003 031f 	and.w	r3, r3, #31
 8003ca4:	e018      	b.n	8003cd8 <HAL_ADC_ConfigChannel+0x29c>
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003cb2:	fa93 f3a3 	rbit	r3, r3
 8003cb6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8003cba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003cbe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8003cc2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d101      	bne.n	8003cce <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8003cca:	2320      	movs	r3, #32
 8003ccc:	e004      	b.n	8003cd8 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8003cce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003cd2:	fab3 f383 	clz	r3, r3
 8003cd6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d106      	bne.n	8003cea <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	2101      	movs	r1, #1
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f7ff fb17 	bl	8003318 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2102      	movs	r1, #2
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7ff fafb 	bl	80032ec <LL_ADC_GetOffsetChannel>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d10a      	bne.n	8003d16 <HAL_ADC_ConfigChannel+0x2da>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2102      	movs	r1, #2
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7ff faf0 	bl	80032ec <LL_ADC_GetOffsetChannel>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	0e9b      	lsrs	r3, r3, #26
 8003d10:	f003 021f 	and.w	r2, r3, #31
 8003d14:	e01e      	b.n	8003d54 <HAL_ADC_ConfigChannel+0x318>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2102      	movs	r1, #2
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f7ff fae5 	bl	80032ec <LL_ADC_GetOffsetChannel>
 8003d22:	4603      	mov	r3, r0
 8003d24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d2c:	fa93 f3a3 	rbit	r3, r3
 8003d30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8003d34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d38:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8003d3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d101      	bne.n	8003d48 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8003d44:	2320      	movs	r3, #32
 8003d46:	e004      	b.n	8003d52 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8003d48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d4c:	fab3 f383 	clz	r3, r3
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d105      	bne.n	8003d6c <HAL_ADC_ConfigChannel+0x330>
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	0e9b      	lsrs	r3, r3, #26
 8003d66:	f003 031f 	and.w	r3, r3, #31
 8003d6a:	e014      	b.n	8003d96 <HAL_ADC_ConfigChannel+0x35a>
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d72:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d74:	fa93 f3a3 	rbit	r3, r3
 8003d78:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8003d7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8003d80:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d101      	bne.n	8003d8c <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8003d88:	2320      	movs	r3, #32
 8003d8a:	e004      	b.n	8003d96 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8003d8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d90:	fab3 f383 	clz	r3, r3
 8003d94:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d106      	bne.n	8003da8 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	2102      	movs	r1, #2
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7ff fab8 	bl	8003318 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2103      	movs	r1, #3
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7ff fa9c 	bl	80032ec <LL_ADC_GetOffsetChannel>
 8003db4:	4603      	mov	r3, r0
 8003db6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10a      	bne.n	8003dd4 <HAL_ADC_ConfigChannel+0x398>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2103      	movs	r1, #3
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7ff fa91 	bl	80032ec <LL_ADC_GetOffsetChannel>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	0e9b      	lsrs	r3, r3, #26
 8003dce:	f003 021f 	and.w	r2, r3, #31
 8003dd2:	e017      	b.n	8003e04 <HAL_ADC_ConfigChannel+0x3c8>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2103      	movs	r1, #3
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7ff fa86 	bl	80032ec <LL_ADC_GetOffsetChannel>
 8003de0:	4603      	mov	r3, r0
 8003de2:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003de6:	fa93 f3a3 	rbit	r3, r3
 8003dea:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003dec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dee:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8003df0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d101      	bne.n	8003dfa <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8003df6:	2320      	movs	r3, #32
 8003df8:	e003      	b.n	8003e02 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8003dfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dfc:	fab3 f383 	clz	r3, r3
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d105      	bne.n	8003e1c <HAL_ADC_ConfigChannel+0x3e0>
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	0e9b      	lsrs	r3, r3, #26
 8003e16:	f003 031f 	and.w	r3, r3, #31
 8003e1a:	e011      	b.n	8003e40 <HAL_ADC_ConfigChannel+0x404>
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e24:	fa93 f3a3 	rbit	r3, r3
 8003e28:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8003e2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e2c:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8003e2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d101      	bne.n	8003e38 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003e34:	2320      	movs	r3, #32
 8003e36:	e003      	b.n	8003e40 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003e38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e3a:	fab3 f383 	clz	r3, r3
 8003e3e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d106      	bne.n	8003e52 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	2103      	movs	r1, #3
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7ff fa63 	bl	8003318 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7ff fb78 	bl	800354c <LL_ADC_IsEnabled>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	f040 8140 	bne.w	80040e4 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6818      	ldr	r0, [r3, #0]
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	6819      	ldr	r1, [r3, #0]
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	461a      	mov	r2, r3
 8003e72:	f7ff fad7 	bl	8003424 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	4a8f      	ldr	r2, [pc, #572]	; (80040b8 <HAL_ADC_ConfigChannel+0x67c>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	f040 8131 	bne.w	80040e4 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d10b      	bne.n	8003eaa <HAL_ADC_ConfigChannel+0x46e>
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	0e9b      	lsrs	r3, r3, #26
 8003e98:	3301      	adds	r3, #1
 8003e9a:	f003 031f 	and.w	r3, r3, #31
 8003e9e:	2b09      	cmp	r3, #9
 8003ea0:	bf94      	ite	ls
 8003ea2:	2301      	movls	r3, #1
 8003ea4:	2300      	movhi	r3, #0
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	e019      	b.n	8003ede <HAL_ADC_ConfigChannel+0x4a2>
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003eb2:	fa93 f3a3 	rbit	r3, r3
 8003eb6:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003eb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003eba:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003ebc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d101      	bne.n	8003ec6 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8003ec2:	2320      	movs	r3, #32
 8003ec4:	e003      	b.n	8003ece <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8003ec6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ec8:	fab3 f383 	clz	r3, r3
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	3301      	adds	r3, #1
 8003ed0:	f003 031f 	and.w	r3, r3, #31
 8003ed4:	2b09      	cmp	r3, #9
 8003ed6:	bf94      	ite	ls
 8003ed8:	2301      	movls	r3, #1
 8003eda:	2300      	movhi	r3, #0
 8003edc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d079      	beq.n	8003fd6 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d107      	bne.n	8003efe <HAL_ADC_ConfigChannel+0x4c2>
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	0e9b      	lsrs	r3, r3, #26
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	069b      	lsls	r3, r3, #26
 8003ef8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003efc:	e015      	b.n	8003f2a <HAL_ADC_ConfigChannel+0x4ee>
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f06:	fa93 f3a3 	rbit	r3, r3
 8003f0a:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003f0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f0e:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003f10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d101      	bne.n	8003f1a <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8003f16:	2320      	movs	r3, #32
 8003f18:	e003      	b.n	8003f22 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8003f1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f1c:	fab3 f383 	clz	r3, r3
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	3301      	adds	r3, #1
 8003f24:	069b      	lsls	r3, r3, #26
 8003f26:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d109      	bne.n	8003f4a <HAL_ADC_ConfigChannel+0x50e>
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	0e9b      	lsrs	r3, r3, #26
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	f003 031f 	and.w	r3, r3, #31
 8003f42:	2101      	movs	r1, #1
 8003f44:	fa01 f303 	lsl.w	r3, r1, r3
 8003f48:	e017      	b.n	8003f7a <HAL_ADC_ConfigChannel+0x53e>
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f52:	fa93 f3a3 	rbit	r3, r3
 8003f56:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003f58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f5a:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003f5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d101      	bne.n	8003f66 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8003f62:	2320      	movs	r3, #32
 8003f64:	e003      	b.n	8003f6e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003f66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f68:	fab3 f383 	clz	r3, r3
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	3301      	adds	r3, #1
 8003f70:	f003 031f 	and.w	r3, r3, #31
 8003f74:	2101      	movs	r1, #1
 8003f76:	fa01 f303 	lsl.w	r3, r1, r3
 8003f7a:	ea42 0103 	orr.w	r1, r2, r3
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d10a      	bne.n	8003fa0 <HAL_ADC_ConfigChannel+0x564>
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	0e9b      	lsrs	r3, r3, #26
 8003f90:	3301      	adds	r3, #1
 8003f92:	f003 021f 	and.w	r2, r3, #31
 8003f96:	4613      	mov	r3, r2
 8003f98:	005b      	lsls	r3, r3, #1
 8003f9a:	4413      	add	r3, r2
 8003f9c:	051b      	lsls	r3, r3, #20
 8003f9e:	e018      	b.n	8003fd2 <HAL_ADC_ConfigChannel+0x596>
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fa8:	fa93 f3a3 	rbit	r3, r3
 8003fac:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb0:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d101      	bne.n	8003fbc <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8003fb8:	2320      	movs	r3, #32
 8003fba:	e003      	b.n	8003fc4 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8003fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fbe:	fab3 f383 	clz	r3, r3
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	f003 021f 	and.w	r2, r3, #31
 8003fca:	4613      	mov	r3, r2
 8003fcc:	005b      	lsls	r3, r3, #1
 8003fce:	4413      	add	r3, r2
 8003fd0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003fd2:	430b      	orrs	r3, r1
 8003fd4:	e081      	b.n	80040da <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d107      	bne.n	8003ff2 <HAL_ADC_ConfigChannel+0x5b6>
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	0e9b      	lsrs	r3, r3, #26
 8003fe8:	3301      	adds	r3, #1
 8003fea:	069b      	lsls	r3, r3, #26
 8003fec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ff0:	e015      	b.n	800401e <HAL_ADC_ConfigChannel+0x5e2>
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ffa:	fa93 f3a3 	rbit	r3, r3
 8003ffe:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004002:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004006:	2b00      	cmp	r3, #0
 8004008:	d101      	bne.n	800400e <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800400a:	2320      	movs	r3, #32
 800400c:	e003      	b.n	8004016 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800400e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004010:	fab3 f383 	clz	r3, r3
 8004014:	b2db      	uxtb	r3, r3
 8004016:	3301      	adds	r3, #1
 8004018:	069b      	lsls	r3, r3, #26
 800401a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004026:	2b00      	cmp	r3, #0
 8004028:	d109      	bne.n	800403e <HAL_ADC_ConfigChannel+0x602>
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	0e9b      	lsrs	r3, r3, #26
 8004030:	3301      	adds	r3, #1
 8004032:	f003 031f 	and.w	r3, r3, #31
 8004036:	2101      	movs	r1, #1
 8004038:	fa01 f303 	lsl.w	r3, r1, r3
 800403c:	e017      	b.n	800406e <HAL_ADC_ConfigChannel+0x632>
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	fa93 f3a3 	rbit	r3, r3
 800404a:	61bb      	str	r3, [r7, #24]
  return result;
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004050:	6a3b      	ldr	r3, [r7, #32]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8004056:	2320      	movs	r3, #32
 8004058:	e003      	b.n	8004062 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800405a:	6a3b      	ldr	r3, [r7, #32]
 800405c:	fab3 f383 	clz	r3, r3
 8004060:	b2db      	uxtb	r3, r3
 8004062:	3301      	adds	r3, #1
 8004064:	f003 031f 	and.w	r3, r3, #31
 8004068:	2101      	movs	r1, #1
 800406a:	fa01 f303 	lsl.w	r3, r1, r3
 800406e:	ea42 0103 	orr.w	r1, r2, r3
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800407a:	2b00      	cmp	r3, #0
 800407c:	d10d      	bne.n	800409a <HAL_ADC_ConfigChannel+0x65e>
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	0e9b      	lsrs	r3, r3, #26
 8004084:	3301      	adds	r3, #1
 8004086:	f003 021f 	and.w	r2, r3, #31
 800408a:	4613      	mov	r3, r2
 800408c:	005b      	lsls	r3, r3, #1
 800408e:	4413      	add	r3, r2
 8004090:	3b1e      	subs	r3, #30
 8004092:	051b      	lsls	r3, r3, #20
 8004094:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004098:	e01e      	b.n	80040d8 <HAL_ADC_ConfigChannel+0x69c>
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	fa93 f3a3 	rbit	r3, r3
 80040a6:	60fb      	str	r3, [r7, #12]
  return result;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d104      	bne.n	80040bc <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80040b2:	2320      	movs	r3, #32
 80040b4:	e006      	b.n	80040c4 <HAL_ADC_ConfigChannel+0x688>
 80040b6:	bf00      	nop
 80040b8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	fab3 f383 	clz	r3, r3
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	3301      	adds	r3, #1
 80040c6:	f003 021f 	and.w	r2, r3, #31
 80040ca:	4613      	mov	r3, r2
 80040cc:	005b      	lsls	r3, r3, #1
 80040ce:	4413      	add	r3, r2
 80040d0:	3b1e      	subs	r3, #30
 80040d2:	051b      	lsls	r3, r3, #20
 80040d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040d8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80040da:	683a      	ldr	r2, [r7, #0]
 80040dc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040de:	4619      	mov	r1, r3
 80040e0:	f7ff f974 	bl	80033cc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	4b44      	ldr	r3, [pc, #272]	; (80041fc <HAL_ADC_ConfigChannel+0x7c0>)
 80040ea:	4013      	ands	r3, r2
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d07a      	beq.n	80041e6 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80040f0:	4843      	ldr	r0, [pc, #268]	; (8004200 <HAL_ADC_ConfigChannel+0x7c4>)
 80040f2:	f7ff f8c9 	bl	8003288 <LL_ADC_GetCommonPathInternalCh>
 80040f6:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a41      	ldr	r2, [pc, #260]	; (8004204 <HAL_ADC_ConfigChannel+0x7c8>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d12c      	bne.n	800415e <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004104:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004108:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d126      	bne.n	800415e <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a3c      	ldr	r2, [pc, #240]	; (8004208 <HAL_ADC_ConfigChannel+0x7cc>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d004      	beq.n	8004124 <HAL_ADC_ConfigChannel+0x6e8>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a3b      	ldr	r2, [pc, #236]	; (800420c <HAL_ADC_ConfigChannel+0x7d0>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d15d      	bne.n	80041e0 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004124:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004128:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800412c:	4619      	mov	r1, r3
 800412e:	4834      	ldr	r0, [pc, #208]	; (8004200 <HAL_ADC_ConfigChannel+0x7c4>)
 8004130:	f7ff f897 	bl	8003262 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004134:	4b36      	ldr	r3, [pc, #216]	; (8004210 <HAL_ADC_ConfigChannel+0x7d4>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	099b      	lsrs	r3, r3, #6
 800413a:	4a36      	ldr	r2, [pc, #216]	; (8004214 <HAL_ADC_ConfigChannel+0x7d8>)
 800413c:	fba2 2303 	umull	r2, r3, r2, r3
 8004140:	099b      	lsrs	r3, r3, #6
 8004142:	1c5a      	adds	r2, r3, #1
 8004144:	4613      	mov	r3, r2
 8004146:	005b      	lsls	r3, r3, #1
 8004148:	4413      	add	r3, r2
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800414e:	e002      	b.n	8004156 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	3b01      	subs	r3, #1
 8004154:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1f9      	bne.n	8004150 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800415c:	e040      	b.n	80041e0 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a2d      	ldr	r2, [pc, #180]	; (8004218 <HAL_ADC_ConfigChannel+0x7dc>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d118      	bne.n	800419a <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004168:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800416c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d112      	bne.n	800419a <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a23      	ldr	r2, [pc, #140]	; (8004208 <HAL_ADC_ConfigChannel+0x7cc>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d004      	beq.n	8004188 <HAL_ADC_ConfigChannel+0x74c>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a22      	ldr	r2, [pc, #136]	; (800420c <HAL_ADC_ConfigChannel+0x7d0>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d12d      	bne.n	80041e4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004188:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800418c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004190:	4619      	mov	r1, r3
 8004192:	481b      	ldr	r0, [pc, #108]	; (8004200 <HAL_ADC_ConfigChannel+0x7c4>)
 8004194:	f7ff f865 	bl	8003262 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004198:	e024      	b.n	80041e4 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a1f      	ldr	r2, [pc, #124]	; (800421c <HAL_ADC_ConfigChannel+0x7e0>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d120      	bne.n	80041e6 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80041a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80041a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d11a      	bne.n	80041e6 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a14      	ldr	r2, [pc, #80]	; (8004208 <HAL_ADC_ConfigChannel+0x7cc>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d115      	bne.n	80041e6 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80041ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80041be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80041c2:	4619      	mov	r1, r3
 80041c4:	480e      	ldr	r0, [pc, #56]	; (8004200 <HAL_ADC_ConfigChannel+0x7c4>)
 80041c6:	f7ff f84c 	bl	8003262 <LL_ADC_SetCommonPathInternalCh>
 80041ca:	e00c      	b.n	80041e6 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d0:	f043 0220 	orr.w	r2, r3, #32
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80041de:	e002      	b.n	80041e6 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80041e0:	bf00      	nop
 80041e2:	e000      	b.n	80041e6 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80041e4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80041ee:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	37d8      	adds	r7, #216	; 0xd8
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	80080000 	.word	0x80080000
 8004200:	50040300 	.word	0x50040300
 8004204:	c7520000 	.word	0xc7520000
 8004208:	50040000 	.word	0x50040000
 800420c:	50040200 	.word	0x50040200
 8004210:	2000009c 	.word	0x2000009c
 8004214:	053e2d63 	.word	0x053e2d63
 8004218:	cb840000 	.word	0xcb840000
 800421c:	80000001 	.word	0x80000001

08004220 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004228:	2300      	movs	r3, #0
 800422a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4618      	mov	r0, r3
 8004232:	f7ff f98b 	bl	800354c <LL_ADC_IsEnabled>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d169      	bne.n	8004310 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	689a      	ldr	r2, [r3, #8]
 8004242:	4b36      	ldr	r3, [pc, #216]	; (800431c <ADC_Enable+0xfc>)
 8004244:	4013      	ands	r3, r2
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00d      	beq.n	8004266 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800424e:	f043 0210 	orr.w	r2, r3, #16
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800425a:	f043 0201 	orr.w	r2, r3, #1
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e055      	b.n	8004312 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4618      	mov	r0, r3
 800426c:	f7ff f95a 	bl	8003524 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004270:	482b      	ldr	r0, [pc, #172]	; (8004320 <ADC_Enable+0x100>)
 8004272:	f7ff f809 	bl	8003288 <LL_ADC_GetCommonPathInternalCh>
 8004276:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004278:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800427c:	2b00      	cmp	r3, #0
 800427e:	d013      	beq.n	80042a8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004280:	4b28      	ldr	r3, [pc, #160]	; (8004324 <ADC_Enable+0x104>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	099b      	lsrs	r3, r3, #6
 8004286:	4a28      	ldr	r2, [pc, #160]	; (8004328 <ADC_Enable+0x108>)
 8004288:	fba2 2303 	umull	r2, r3, r2, r3
 800428c:	099b      	lsrs	r3, r3, #6
 800428e:	1c5a      	adds	r2, r3, #1
 8004290:	4613      	mov	r3, r2
 8004292:	005b      	lsls	r3, r3, #1
 8004294:	4413      	add	r3, r2
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800429a:	e002      	b.n	80042a2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	3b01      	subs	r3, #1
 80042a0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d1f9      	bne.n	800429c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80042a8:	f7fe ff98 	bl	80031dc <HAL_GetTick>
 80042ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80042ae:	e028      	b.n	8004302 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4618      	mov	r0, r3
 80042b6:	f7ff f949 	bl	800354c <LL_ADC_IsEnabled>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d104      	bne.n	80042ca <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4618      	mov	r0, r3
 80042c6:	f7ff f92d 	bl	8003524 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80042ca:	f7fe ff87 	bl	80031dc <HAL_GetTick>
 80042ce:	4602      	mov	r2, r0
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d914      	bls.n	8004302 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0301 	and.w	r3, r3, #1
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d00d      	beq.n	8004302 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ea:	f043 0210 	orr.w	r2, r3, #16
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f6:	f043 0201 	orr.w	r2, r3, #1
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e007      	b.n	8004312 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0301 	and.w	r3, r3, #1
 800430c:	2b01      	cmp	r3, #1
 800430e:	d1cf      	bne.n	80042b0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3710      	adds	r7, #16
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	8000003f 	.word	0x8000003f
 8004320:	50040300 	.word	0x50040300
 8004324:	2000009c 	.word	0x2000009c
 8004328:	053e2d63 	.word	0x053e2d63

0800432c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004338:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800433e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004342:	2b00      	cmp	r3, #0
 8004344:	d14b      	bne.n	80043de <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800434a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0308 	and.w	r3, r3, #8
 800435c:	2b00      	cmp	r3, #0
 800435e:	d021      	beq.n	80043a4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4618      	mov	r0, r3
 8004366:	f7fe fff2 	bl	800334e <LL_ADC_REG_IsTriggerSourceSWStart>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d032      	beq.n	80043d6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d12b      	bne.n	80043d6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004382:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800438e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d11f      	bne.n	80043d6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800439a:	f043 0201 	orr.w	r2, r3, #1
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	655a      	str	r2, [r3, #84]	; 0x54
 80043a2:	e018      	b.n	80043d6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	f003 0302 	and.w	r3, r3, #2
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d111      	bne.n	80043d6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d105      	bne.n	80043d6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ce:	f043 0201 	orr.w	r2, r3, #1
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80043d6:	68f8      	ldr	r0, [r7, #12]
 80043d8:	f7ff fb12 	bl	8003a00 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80043dc:	e00e      	b.n	80043fc <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e2:	f003 0310 	and.w	r3, r3, #16
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d003      	beq.n	80043f2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80043ea:	68f8      	ldr	r0, [r7, #12]
 80043ec:	f7ff fb1c 	bl	8003a28 <HAL_ADC_ErrorCallback>
}
 80043f0:	e004      	b.n	80043fc <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	4798      	blx	r3
}
 80043fc:	bf00      	nop
 80043fe:	3710      	adds	r7, #16
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004410:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004412:	68f8      	ldr	r0, [r7, #12]
 8004414:	f7ff fafe 	bl	8003a14 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004418:	bf00      	nop
 800441a:	3710      	adds	r7, #16
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800442c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004432:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800443e:	f043 0204 	orr.w	r2, r3, #4
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004446:	68f8      	ldr	r0, [r7, #12]
 8004448:	f7ff faee 	bl	8003a28 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800444c:	bf00      	nop
 800444e:	3710      	adds	r7, #16
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}

08004454 <LL_ADC_IsEnabled>:
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	f003 0301 	and.w	r3, r3, #1
 8004464:	2b01      	cmp	r3, #1
 8004466:	d101      	bne.n	800446c <LL_ADC_IsEnabled+0x18>
 8004468:	2301      	movs	r3, #1
 800446a:	e000      	b.n	800446e <LL_ADC_IsEnabled+0x1a>
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	370c      	adds	r7, #12
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr

0800447a <LL_ADC_REG_IsConversionOngoing>:
{
 800447a:	b480      	push	{r7}
 800447c:	b083      	sub	sp, #12
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	f003 0304 	and.w	r3, r3, #4
 800448a:	2b04      	cmp	r3, #4
 800448c:	d101      	bne.n	8004492 <LL_ADC_REG_IsConversionOngoing+0x18>
 800448e:	2301      	movs	r3, #1
 8004490:	e000      	b.n	8004494 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80044a0:	b590      	push	{r4, r7, lr}
 80044a2:	b09f      	sub	sp, #124	; 0x7c
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044aa:	2300      	movs	r3, #0
 80044ac:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d101      	bne.n	80044be <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80044ba:	2302      	movs	r3, #2
 80044bc:	e093      	b.n	80045e6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2201      	movs	r2, #1
 80044c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80044c6:	2300      	movs	r3, #0
 80044c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80044ca:	2300      	movs	r3, #0
 80044cc:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a47      	ldr	r2, [pc, #284]	; (80045f0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d102      	bne.n	80044de <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80044d8:	4b46      	ldr	r3, [pc, #280]	; (80045f4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80044da:	60bb      	str	r3, [r7, #8]
 80044dc:	e001      	b.n	80044e2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80044de:	2300      	movs	r3, #0
 80044e0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d10b      	bne.n	8004500 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ec:	f043 0220 	orr.w	r2, r3, #32
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e072      	b.n	80045e6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	4618      	mov	r0, r3
 8004504:	f7ff ffb9 	bl	800447a <LL_ADC_REG_IsConversionOngoing>
 8004508:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4618      	mov	r0, r3
 8004510:	f7ff ffb3 	bl	800447a <LL_ADC_REG_IsConversionOngoing>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d154      	bne.n	80045c4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800451a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800451c:	2b00      	cmp	r3, #0
 800451e:	d151      	bne.n	80045c4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004520:	4b35      	ldr	r3, [pc, #212]	; (80045f8 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8004522:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d02c      	beq.n	8004586 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800452c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	6859      	ldr	r1, [r3, #4]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800453e:	035b      	lsls	r3, r3, #13
 8004540:	430b      	orrs	r3, r1
 8004542:	431a      	orrs	r2, r3
 8004544:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004546:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004548:	4829      	ldr	r0, [pc, #164]	; (80045f0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800454a:	f7ff ff83 	bl	8004454 <LL_ADC_IsEnabled>
 800454e:	4604      	mov	r4, r0
 8004550:	4828      	ldr	r0, [pc, #160]	; (80045f4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004552:	f7ff ff7f 	bl	8004454 <LL_ADC_IsEnabled>
 8004556:	4603      	mov	r3, r0
 8004558:	431c      	orrs	r4, r3
 800455a:	4828      	ldr	r0, [pc, #160]	; (80045fc <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800455c:	f7ff ff7a 	bl	8004454 <LL_ADC_IsEnabled>
 8004560:	4603      	mov	r3, r0
 8004562:	4323      	orrs	r3, r4
 8004564:	2b00      	cmp	r3, #0
 8004566:	d137      	bne.n	80045d8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004568:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004570:	f023 030f 	bic.w	r3, r3, #15
 8004574:	683a      	ldr	r2, [r7, #0]
 8004576:	6811      	ldr	r1, [r2, #0]
 8004578:	683a      	ldr	r2, [r7, #0]
 800457a:	6892      	ldr	r2, [r2, #8]
 800457c:	430a      	orrs	r2, r1
 800457e:	431a      	orrs	r2, r3
 8004580:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004582:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004584:	e028      	b.n	80045d8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004586:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800458e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004590:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004592:	4817      	ldr	r0, [pc, #92]	; (80045f0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004594:	f7ff ff5e 	bl	8004454 <LL_ADC_IsEnabled>
 8004598:	4604      	mov	r4, r0
 800459a:	4816      	ldr	r0, [pc, #88]	; (80045f4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800459c:	f7ff ff5a 	bl	8004454 <LL_ADC_IsEnabled>
 80045a0:	4603      	mov	r3, r0
 80045a2:	431c      	orrs	r4, r3
 80045a4:	4815      	ldr	r0, [pc, #84]	; (80045fc <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80045a6:	f7ff ff55 	bl	8004454 <LL_ADC_IsEnabled>
 80045aa:	4603      	mov	r3, r0
 80045ac:	4323      	orrs	r3, r4
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d112      	bne.n	80045d8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80045b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80045ba:	f023 030f 	bic.w	r3, r3, #15
 80045be:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80045c0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80045c2:	e009      	b.n	80045d8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045c8:	f043 0220 	orr.w	r2, r3, #32
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80045d6:	e000      	b.n	80045da <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80045d8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80045e2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	377c      	adds	r7, #124	; 0x7c
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd90      	pop	{r4, r7, pc}
 80045ee:	bf00      	nop
 80045f0:	50040000 	.word	0x50040000
 80045f4:	50040100 	.word	0x50040100
 80045f8:	50040300 	.word	0x50040300
 80045fc:	50040200 	.word	0x50040200

08004600 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f003 0307 	and.w	r3, r3, #7
 800460e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004610:	4b0c      	ldr	r3, [pc, #48]	; (8004644 <__NVIC_SetPriorityGrouping+0x44>)
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004616:	68ba      	ldr	r2, [r7, #8]
 8004618:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800461c:	4013      	ands	r3, r2
 800461e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004628:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800462c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004630:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004632:	4a04      	ldr	r2, [pc, #16]	; (8004644 <__NVIC_SetPriorityGrouping+0x44>)
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	60d3      	str	r3, [r2, #12]
}
 8004638:	bf00      	nop
 800463a:	3714      	adds	r7, #20
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr
 8004644:	e000ed00 	.word	0xe000ed00

08004648 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004648:	b480      	push	{r7}
 800464a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800464c:	4b04      	ldr	r3, [pc, #16]	; (8004660 <__NVIC_GetPriorityGrouping+0x18>)
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	0a1b      	lsrs	r3, r3, #8
 8004652:	f003 0307 	and.w	r3, r3, #7
}
 8004656:	4618      	mov	r0, r3
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr
 8004660:	e000ed00 	.word	0xe000ed00

08004664 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	4603      	mov	r3, r0
 800466c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800466e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004672:	2b00      	cmp	r3, #0
 8004674:	db0b      	blt.n	800468e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004676:	79fb      	ldrb	r3, [r7, #7]
 8004678:	f003 021f 	and.w	r2, r3, #31
 800467c:	4907      	ldr	r1, [pc, #28]	; (800469c <__NVIC_EnableIRQ+0x38>)
 800467e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004682:	095b      	lsrs	r3, r3, #5
 8004684:	2001      	movs	r0, #1
 8004686:	fa00 f202 	lsl.w	r2, r0, r2
 800468a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800468e:	bf00      	nop
 8004690:	370c      	adds	r7, #12
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	e000e100 	.word	0xe000e100

080046a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	4603      	mov	r3, r0
 80046a8:	6039      	str	r1, [r7, #0]
 80046aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	db0a      	blt.n	80046ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	b2da      	uxtb	r2, r3
 80046b8:	490c      	ldr	r1, [pc, #48]	; (80046ec <__NVIC_SetPriority+0x4c>)
 80046ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046be:	0112      	lsls	r2, r2, #4
 80046c0:	b2d2      	uxtb	r2, r2
 80046c2:	440b      	add	r3, r1
 80046c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046c8:	e00a      	b.n	80046e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	b2da      	uxtb	r2, r3
 80046ce:	4908      	ldr	r1, [pc, #32]	; (80046f0 <__NVIC_SetPriority+0x50>)
 80046d0:	79fb      	ldrb	r3, [r7, #7]
 80046d2:	f003 030f 	and.w	r3, r3, #15
 80046d6:	3b04      	subs	r3, #4
 80046d8:	0112      	lsls	r2, r2, #4
 80046da:	b2d2      	uxtb	r2, r2
 80046dc:	440b      	add	r3, r1
 80046de:	761a      	strb	r2, [r3, #24]
}
 80046e0:	bf00      	nop
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr
 80046ec:	e000e100 	.word	0xe000e100
 80046f0:	e000ed00 	.word	0xe000ed00

080046f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b089      	sub	sp, #36	; 0x24
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f003 0307 	and.w	r3, r3, #7
 8004706:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	f1c3 0307 	rsb	r3, r3, #7
 800470e:	2b04      	cmp	r3, #4
 8004710:	bf28      	it	cs
 8004712:	2304      	movcs	r3, #4
 8004714:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	3304      	adds	r3, #4
 800471a:	2b06      	cmp	r3, #6
 800471c:	d902      	bls.n	8004724 <NVIC_EncodePriority+0x30>
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	3b03      	subs	r3, #3
 8004722:	e000      	b.n	8004726 <NVIC_EncodePriority+0x32>
 8004724:	2300      	movs	r3, #0
 8004726:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004728:	f04f 32ff 	mov.w	r2, #4294967295
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	fa02 f303 	lsl.w	r3, r2, r3
 8004732:	43da      	mvns	r2, r3
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	401a      	ands	r2, r3
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800473c:	f04f 31ff 	mov.w	r1, #4294967295
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	fa01 f303 	lsl.w	r3, r1, r3
 8004746:	43d9      	mvns	r1, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800474c:	4313      	orrs	r3, r2
         );
}
 800474e:	4618      	mov	r0, r3
 8004750:	3724      	adds	r7, #36	; 0x24
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
	...

0800475c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	3b01      	subs	r3, #1
 8004768:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800476c:	d301      	bcc.n	8004772 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800476e:	2301      	movs	r3, #1
 8004770:	e00f      	b.n	8004792 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004772:	4a0a      	ldr	r2, [pc, #40]	; (800479c <SysTick_Config+0x40>)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	3b01      	subs	r3, #1
 8004778:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800477a:	210f      	movs	r1, #15
 800477c:	f04f 30ff 	mov.w	r0, #4294967295
 8004780:	f7ff ff8e 	bl	80046a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004784:	4b05      	ldr	r3, [pc, #20]	; (800479c <SysTick_Config+0x40>)
 8004786:	2200      	movs	r2, #0
 8004788:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800478a:	4b04      	ldr	r3, [pc, #16]	; (800479c <SysTick_Config+0x40>)
 800478c:	2207      	movs	r2, #7
 800478e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3708      	adds	r7, #8
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	e000e010 	.word	0xe000e010

080047a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b082      	sub	sp, #8
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f7ff ff29 	bl	8004600 <__NVIC_SetPriorityGrouping>
}
 80047ae:	bf00      	nop
 80047b0:	3708      	adds	r7, #8
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}

080047b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047b6:	b580      	push	{r7, lr}
 80047b8:	b086      	sub	sp, #24
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	4603      	mov	r3, r0
 80047be:	60b9      	str	r1, [r7, #8]
 80047c0:	607a      	str	r2, [r7, #4]
 80047c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80047c4:	2300      	movs	r3, #0
 80047c6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80047c8:	f7ff ff3e 	bl	8004648 <__NVIC_GetPriorityGrouping>
 80047cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	68b9      	ldr	r1, [r7, #8]
 80047d2:	6978      	ldr	r0, [r7, #20]
 80047d4:	f7ff ff8e 	bl	80046f4 <NVIC_EncodePriority>
 80047d8:	4602      	mov	r2, r0
 80047da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047de:	4611      	mov	r1, r2
 80047e0:	4618      	mov	r0, r3
 80047e2:	f7ff ff5d 	bl	80046a0 <__NVIC_SetPriority>
}
 80047e6:	bf00      	nop
 80047e8:	3718      	adds	r7, #24
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}

080047ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047ee:	b580      	push	{r7, lr}
 80047f0:	b082      	sub	sp, #8
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	4603      	mov	r3, r0
 80047f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047fc:	4618      	mov	r0, r3
 80047fe:	f7ff ff31 	bl	8004664 <__NVIC_EnableIRQ>
}
 8004802:	bf00      	nop
 8004804:	3708      	adds	r7, #8
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}

0800480a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800480a:	b580      	push	{r7, lr}
 800480c:	b082      	sub	sp, #8
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f7ff ffa2 	bl	800475c <SysTick_Config>
 8004818:	4603      	mov	r3, r0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3708      	adds	r7, #8
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}

08004822 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004822:	b580      	push	{r7, lr}
 8004824:	b082      	sub	sp, #8
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d101      	bne.n	8004834 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e014      	b.n	800485e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	791b      	ldrb	r3, [r3, #4]
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d105      	bne.n	800484a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f7fd fd7f 	bl	8002348 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2202      	movs	r2, #2
 800484e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2201      	movs	r2, #1
 800485a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	3708      	adds	r7, #8
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
	...

08004868 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b086      	sub	sp, #24
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	607a      	str	r2, [r7, #4]
 8004874:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8004876:	2300      	movs	r3, #0
 8004878:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	795b      	ldrb	r3, [r3, #5]
 800487e:	2b01      	cmp	r3, #1
 8004880:	d101      	bne.n	8004886 <HAL_DAC_Start_DMA+0x1e>
 8004882:	2302      	movs	r3, #2
 8004884:	e0ab      	b.n	80049de <HAL_DAC_Start_DMA+0x176>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2201      	movs	r2, #1
 800488a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2202      	movs	r2, #2
 8004890:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d12f      	bne.n	80048f8 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	4a52      	ldr	r2, [pc, #328]	; (80049e8 <HAL_DAC_Start_DMA+0x180>)
 800489e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	4a51      	ldr	r2, [pc, #324]	; (80049ec <HAL_DAC_Start_DMA+0x184>)
 80048a6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	4a50      	ldr	r2, [pc, #320]	; (80049f0 <HAL_DAC_Start_DMA+0x188>)
 80048ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80048be:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80048c0:	6a3b      	ldr	r3, [r7, #32]
 80048c2:	2b08      	cmp	r3, #8
 80048c4:	d013      	beq.n	80048ee <HAL_DAC_Start_DMA+0x86>
 80048c6:	6a3b      	ldr	r3, [r7, #32]
 80048c8:	2b08      	cmp	r3, #8
 80048ca:	d845      	bhi.n	8004958 <HAL_DAC_Start_DMA+0xf0>
 80048cc:	6a3b      	ldr	r3, [r7, #32]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d003      	beq.n	80048da <HAL_DAC_Start_DMA+0x72>
 80048d2:	6a3b      	ldr	r3, [r7, #32]
 80048d4:	2b04      	cmp	r3, #4
 80048d6:	d005      	beq.n	80048e4 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80048d8:	e03e      	b.n	8004958 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	3308      	adds	r3, #8
 80048e0:	613b      	str	r3, [r7, #16]
        break;
 80048e2:	e03c      	b.n	800495e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	330c      	adds	r3, #12
 80048ea:	613b      	str	r3, [r7, #16]
        break;
 80048ec:	e037      	b.n	800495e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	3310      	adds	r3, #16
 80048f4:	613b      	str	r3, [r7, #16]
        break;
 80048f6:	e032      	b.n	800495e <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	4a3d      	ldr	r2, [pc, #244]	; (80049f4 <HAL_DAC_Start_DMA+0x18c>)
 80048fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	4a3c      	ldr	r2, [pc, #240]	; (80049f8 <HAL_DAC_Start_DMA+0x190>)
 8004906:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	4a3b      	ldr	r2, [pc, #236]	; (80049fc <HAL_DAC_Start_DMA+0x194>)
 800490e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800491e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8004920:	6a3b      	ldr	r3, [r7, #32]
 8004922:	2b08      	cmp	r3, #8
 8004924:	d013      	beq.n	800494e <HAL_DAC_Start_DMA+0xe6>
 8004926:	6a3b      	ldr	r3, [r7, #32]
 8004928:	2b08      	cmp	r3, #8
 800492a:	d817      	bhi.n	800495c <HAL_DAC_Start_DMA+0xf4>
 800492c:	6a3b      	ldr	r3, [r7, #32]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d003      	beq.n	800493a <HAL_DAC_Start_DMA+0xd2>
 8004932:	6a3b      	ldr	r3, [r7, #32]
 8004934:	2b04      	cmp	r3, #4
 8004936:	d005      	beq.n	8004944 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8004938:	e010      	b.n	800495c <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	3314      	adds	r3, #20
 8004940:	613b      	str	r3, [r7, #16]
        break;
 8004942:	e00c      	b.n	800495e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	3318      	adds	r3, #24
 800494a:	613b      	str	r3, [r7, #16]
        break;
 800494c:	e007      	b.n	800495e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	331c      	adds	r3, #28
 8004954:	613b      	str	r3, [r7, #16]
        break;
 8004956:	e002      	b.n	800495e <HAL_DAC_Start_DMA+0xf6>
        break;
 8004958:	bf00      	nop
 800495a:	e000      	b.n	800495e <HAL_DAC_Start_DMA+0xf6>
        break;
 800495c:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d111      	bne.n	8004988 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004972:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6898      	ldr	r0, [r3, #8]
 8004978:	6879      	ldr	r1, [r7, #4]
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	693a      	ldr	r2, [r7, #16]
 800497e:	f000 fb0b 	bl	8004f98 <HAL_DMA_Start_IT>
 8004982:	4603      	mov	r3, r0
 8004984:	75fb      	strb	r3, [r7, #23]
 8004986:	e010      	b.n	80049aa <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004996:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	68d8      	ldr	r0, [r3, #12]
 800499c:	6879      	ldr	r1, [r7, #4]
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	693a      	ldr	r2, [r7, #16]
 80049a2:	f000 faf9 	bl	8004f98 <HAL_DMA_Start_IT>
 80049a6:	4603      	mov	r3, r0
 80049a8:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2200      	movs	r2, #0
 80049ae:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80049b0:	7dfb      	ldrb	r3, [r7, #23]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d10c      	bne.n	80049d0 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	6819      	ldr	r1, [r3, #0]
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	f003 0310 	and.w	r3, r3, #16
 80049c2:	2201      	movs	r2, #1
 80049c4:	409a      	lsls	r2, r3
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	430a      	orrs	r2, r1
 80049cc:	601a      	str	r2, [r3, #0]
 80049ce:	e005      	b.n	80049dc <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	691b      	ldr	r3, [r3, #16]
 80049d4:	f043 0204 	orr.w	r2, r3, #4
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80049dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3718      	adds	r7, #24
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	08004d15 	.word	0x08004d15
 80049ec:	08004d37 	.word	0x08004d37
 80049f0:	08004d53 	.word	0x08004d53
 80049f4:	08004dbd 	.word	0x08004dbd
 80049f8:	08004ddf 	.word	0x08004ddf
 80049fc:	08004dfb 	.word	0x08004dfb

08004a00 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b082      	sub	sp, #8
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	6819      	ldr	r1, [r3, #0]
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	f003 0310 	and.w	r3, r3, #16
 8004a16:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a1e:	43da      	mvns	r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	400a      	ands	r2, r1
 8004a26:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	6819      	ldr	r1, [r3, #0]
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	f003 0310 	and.w	r3, r3, #16
 8004a34:	2201      	movs	r2, #1
 8004a36:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3a:	43da      	mvns	r2, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	400a      	ands	r2, r1
 8004a42:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d10d      	bne.n	8004a66 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f000 fb02 	bl	8005058 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a62:	601a      	str	r2, [r3, #0]
 8004a64:	e00c      	b.n	8004a80 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f000 faf4 	bl	8005058 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8004a7e:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3708      	adds	r7, #8
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}

08004a8a <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004a8a:	b480      	push	{r7}
 8004a8c:	b083      	sub	sp, #12
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8004a92:	bf00      	nop
 8004a94:	370c      	adds	r7, #12
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr

08004a9e <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	b083      	sub	sp, #12
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8004aa6:	bf00      	nop
 8004aa8:	370c      	adds	r7, #12
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr

08004ab2 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004ab2:	b480      	push	{r7}
 8004ab4:	b083      	sub	sp, #12
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8004aba:	bf00      	nop
 8004abc:	370c      	adds	r7, #12
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr

08004ac6 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004ac6:	b580      	push	{r7, lr}
 8004ac8:	b088      	sub	sp, #32
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	60f8      	str	r0, [r7, #12]
 8004ace:	60b9      	str	r1, [r7, #8]
 8004ad0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	795b      	ldrb	r3, [r3, #5]
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d101      	bne.n	8004ae2 <HAL_DAC_ConfigChannel+0x1c>
 8004ade:	2302      	movs	r3, #2
 8004ae0:	e114      	b.n	8004d0c <HAL_DAC_ConfigChannel+0x246>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2202      	movs	r2, #2
 8004aec:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2b04      	cmp	r3, #4
 8004af4:	f040 8081 	bne.w	8004bfa <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004af8:	f7fe fb70 	bl	80031dc <HAL_GetTick>
 8004afc:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d140      	bne.n	8004b86 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004b04:	e018      	b.n	8004b38 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004b06:	f7fe fb69 	bl	80031dc <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d911      	bls.n	8004b38 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d00a      	beq.n	8004b38 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	f043 0208 	orr.w	r2, r3, #8
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2203      	movs	r2, #3
 8004b32:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004b34:	2303      	movs	r3, #3
 8004b36:	e0e9      	b.n	8004d0c <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d1df      	bne.n	8004b06 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8004b46:	2001      	movs	r0, #1
 8004b48:	f7fe fb54 	bl	80031f4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	68ba      	ldr	r2, [r7, #8]
 8004b52:	6992      	ldr	r2, [r2, #24]
 8004b54:	641a      	str	r2, [r3, #64]	; 0x40
 8004b56:	e023      	b.n	8004ba0 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004b58:	f7fe fb40 	bl	80031dc <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d90f      	bls.n	8004b86 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	da0a      	bge.n	8004b86 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	f043 0208 	orr.w	r2, r3, #8
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2203      	movs	r2, #3
 8004b80:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e0c2      	b.n	8004d0c <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	dbe3      	blt.n	8004b58 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8004b90:	2001      	movs	r0, #1
 8004b92:	f7fe fb2f 	bl	80031f4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68ba      	ldr	r2, [r7, #8]
 8004b9c:	6992      	ldr	r2, [r2, #24]
 8004b9e:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f003 0310 	and.w	r3, r3, #16
 8004bac:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8004bb4:	43db      	mvns	r3, r3
 8004bb6:	ea02 0103 	and.w	r1, r2, r3
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	69da      	ldr	r2, [r3, #28]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f003 0310 	and.w	r3, r3, #16
 8004bc4:	409a      	lsls	r2, r3
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f003 0310 	and.w	r3, r3, #16
 8004bda:	21ff      	movs	r1, #255	; 0xff
 8004bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8004be0:	43db      	mvns	r3, r3
 8004be2:	ea02 0103 	and.w	r1, r2, r3
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	6a1a      	ldr	r2, [r3, #32]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f003 0310 	and.w	r3, r3, #16
 8004bf0:	409a      	lsls	r2, r3
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	430a      	orrs	r2, r1
 8004bf8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d11d      	bne.n	8004c3e <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c08:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f003 0310 	and.w	r3, r3, #16
 8004c10:	221f      	movs	r2, #31
 8004c12:	fa02 f303 	lsl.w	r3, r2, r3
 8004c16:	43db      	mvns	r3, r3
 8004c18:	69ba      	ldr	r2, [r7, #24]
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	695b      	ldr	r3, [r3, #20]
 8004c22:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f003 0310 	and.w	r3, r3, #16
 8004c2a:	697a      	ldr	r2, [r7, #20]
 8004c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c30:	69ba      	ldr	r2, [r7, #24]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	69ba      	ldr	r2, [r7, #24]
 8004c3c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c44:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f003 0310 	and.w	r3, r3, #16
 8004c4c:	2207      	movs	r2, #7
 8004c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c52:	43db      	mvns	r3, r3
 8004c54:	69ba      	ldr	r2, [r7, #24]
 8004c56:	4013      	ands	r3, r2
 8004c58:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	431a      	orrs	r2, r3
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f003 0310 	and.w	r3, r3, #16
 8004c72:	697a      	ldr	r2, [r7, #20]
 8004c74:	fa02 f303 	lsl.w	r3, r2, r3
 8004c78:	69ba      	ldr	r2, [r7, #24]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	69ba      	ldr	r2, [r7, #24]
 8004c84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	6819      	ldr	r1, [r3, #0]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f003 0310 	and.w	r3, r3, #16
 8004c92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004c96:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9a:	43da      	mvns	r2, r3
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	400a      	ands	r2, r1
 8004ca2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f003 0310 	and.w	r3, r3, #16
 8004cb2:	f640 72fc 	movw	r2, #4092	; 0xffc
 8004cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cba:	43db      	mvns	r3, r3
 8004cbc:	69ba      	ldr	r2, [r7, #24]
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f003 0310 	and.w	r3, r3, #16
 8004cce:	697a      	ldr	r2, [r7, #20]
 8004cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd4:	69ba      	ldr	r2, [r7, #24]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	69ba      	ldr	r2, [r7, #24]
 8004ce0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	6819      	ldr	r1, [r3, #0]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f003 0310 	and.w	r3, r3, #16
 8004cee:	22c0      	movs	r2, #192	; 0xc0
 8004cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf4:	43da      	mvns	r2, r3
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	400a      	ands	r2, r1
 8004cfc:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2201      	movs	r2, #1
 8004d02:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2200      	movs	r2, #0
 8004d08:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004d0a:	2300      	movs	r3, #0
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3720      	adds	r7, #32
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d20:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8004d22:	68f8      	ldr	r0, [r7, #12]
 8004d24:	f7ff feb1 	bl	8004a8a <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	711a      	strb	r2, [r3, #4]
}
 8004d2e:	bf00      	nop
 8004d30:	3710      	adds	r7, #16
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}

08004d36 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004d36:	b580      	push	{r7, lr}
 8004d38:	b084      	sub	sp, #16
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d42:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8004d44:	68f8      	ldr	r0, [r7, #12]
 8004d46:	f7ff feaa 	bl	8004a9e <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004d4a:	bf00      	nop
 8004d4c:	3710      	adds	r7, #16
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}

08004d52 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8004d52:	b580      	push	{r7, lr}
 8004d54:	b084      	sub	sp, #16
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d5e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	691b      	ldr	r3, [r3, #16]
 8004d64:	f043 0204 	orr.w	r2, r3, #4
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8004d6c:	68f8      	ldr	r0, [r7, #12]
 8004d6e:	f7ff fea0 	bl	8004ab2 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2201      	movs	r2, #1
 8004d76:	711a      	strb	r2, [r3, #4]
}
 8004d78:	bf00      	nop
 8004d7a:	3710      	adds	r7, #16
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8004d88:	bf00      	nop
 8004d8a:	370c      	adds	r7, #12
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8004d9c:	bf00      	nop
 8004d9e:	370c      	adds	r7, #12
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr

08004da8 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b083      	sub	sp, #12
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8004db0:	bf00      	nop
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8004dca:	68f8      	ldr	r0, [r7, #12]
 8004dcc:	f7ff ffd8 	bl	8004d80 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	711a      	strb	r2, [r3, #4]
}
 8004dd6:	bf00      	nop
 8004dd8:	3710      	adds	r7, #16
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}

08004dde <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004dde:	b580      	push	{r7, lr}
 8004de0:	b084      	sub	sp, #16
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dea:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8004dec:	68f8      	ldr	r0, [r7, #12]
 8004dee:	f7ff ffd1 	bl	8004d94 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004df2:	bf00      	nop
 8004df4:	3710      	adds	r7, #16
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}

08004dfa <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8004dfa:	b580      	push	{r7, lr}
 8004dfc:	b084      	sub	sp, #16
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e06:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	f043 0204 	orr.w	r2, r3, #4
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8004e14:	68f8      	ldr	r0, [r7, #12]
 8004e16:	f7ff ffc7 	bl	8004da8 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	711a      	strb	r2, [r3, #4]
}
 8004e20:	bf00      	nop
 8004e22:	3710      	adds	r7, #16
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b085      	sub	sp, #20
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d101      	bne.n	8004e3a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e098      	b.n	8004f6c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	461a      	mov	r2, r3
 8004e40:	4b4d      	ldr	r3, [pc, #308]	; (8004f78 <HAL_DMA_Init+0x150>)
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d80f      	bhi.n	8004e66 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	4b4b      	ldr	r3, [pc, #300]	; (8004f7c <HAL_DMA_Init+0x154>)
 8004e4e:	4413      	add	r3, r2
 8004e50:	4a4b      	ldr	r2, [pc, #300]	; (8004f80 <HAL_DMA_Init+0x158>)
 8004e52:	fba2 2303 	umull	r2, r3, r2, r3
 8004e56:	091b      	lsrs	r3, r3, #4
 8004e58:	009a      	lsls	r2, r3, #2
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a48      	ldr	r2, [pc, #288]	; (8004f84 <HAL_DMA_Init+0x15c>)
 8004e62:	641a      	str	r2, [r3, #64]	; 0x40
 8004e64:	e00e      	b.n	8004e84 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	4b46      	ldr	r3, [pc, #280]	; (8004f88 <HAL_DMA_Init+0x160>)
 8004e6e:	4413      	add	r3, r2
 8004e70:	4a43      	ldr	r2, [pc, #268]	; (8004f80 <HAL_DMA_Init+0x158>)
 8004e72:	fba2 2303 	umull	r2, r3, r2, r3
 8004e76:	091b      	lsrs	r3, r3, #4
 8004e78:	009a      	lsls	r2, r3, #2
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a42      	ldr	r2, [pc, #264]	; (8004f8c <HAL_DMA_Init+0x164>)
 8004e82:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2202      	movs	r2, #2
 8004e88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e9e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004ea8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004eb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ec0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a1b      	ldr	r3, [r3, #32]
 8004ec6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004ec8:	68fa      	ldr	r2, [r7, #12]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ede:	d039      	beq.n	8004f54 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee4:	4a27      	ldr	r2, [pc, #156]	; (8004f84 <HAL_DMA_Init+0x15c>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d11a      	bne.n	8004f20 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004eea:	4b29      	ldr	r3, [pc, #164]	; (8004f90 <HAL_DMA_Init+0x168>)
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ef2:	f003 031c 	and.w	r3, r3, #28
 8004ef6:	210f      	movs	r1, #15
 8004ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8004efc:	43db      	mvns	r3, r3
 8004efe:	4924      	ldr	r1, [pc, #144]	; (8004f90 <HAL_DMA_Init+0x168>)
 8004f00:	4013      	ands	r3, r2
 8004f02:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004f04:	4b22      	ldr	r3, [pc, #136]	; (8004f90 <HAL_DMA_Init+0x168>)
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6859      	ldr	r1, [r3, #4]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f10:	f003 031c 	and.w	r3, r3, #28
 8004f14:	fa01 f303 	lsl.w	r3, r1, r3
 8004f18:	491d      	ldr	r1, [pc, #116]	; (8004f90 <HAL_DMA_Init+0x168>)
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	600b      	str	r3, [r1, #0]
 8004f1e:	e019      	b.n	8004f54 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004f20:	4b1c      	ldr	r3, [pc, #112]	; (8004f94 <HAL_DMA_Init+0x16c>)
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f28:	f003 031c 	and.w	r3, r3, #28
 8004f2c:	210f      	movs	r1, #15
 8004f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f32:	43db      	mvns	r3, r3
 8004f34:	4917      	ldr	r1, [pc, #92]	; (8004f94 <HAL_DMA_Init+0x16c>)
 8004f36:	4013      	ands	r3, r2
 8004f38:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004f3a:	4b16      	ldr	r3, [pc, #88]	; (8004f94 <HAL_DMA_Init+0x16c>)
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6859      	ldr	r1, [r3, #4]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f46:	f003 031c 	and.w	r3, r3, #28
 8004f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f4e:	4911      	ldr	r1, [pc, #68]	; (8004f94 <HAL_DMA_Init+0x16c>)
 8004f50:	4313      	orrs	r3, r2
 8004f52:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004f6a:	2300      	movs	r3, #0
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3714      	adds	r7, #20
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr
 8004f78:	40020407 	.word	0x40020407
 8004f7c:	bffdfff8 	.word	0xbffdfff8
 8004f80:	cccccccd 	.word	0xcccccccd
 8004f84:	40020000 	.word	0x40020000
 8004f88:	bffdfbf8 	.word	0xbffdfbf8
 8004f8c:	40020400 	.word	0x40020400
 8004f90:	400200a8 	.word	0x400200a8
 8004f94:	400204a8 	.word	0x400204a8

08004f98 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b086      	sub	sp, #24
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	607a      	str	r2, [r7, #4]
 8004fa4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d101      	bne.n	8004fb8 <HAL_DMA_Start_IT+0x20>
 8004fb4:	2302      	movs	r3, #2
 8004fb6:	e04b      	b.n	8005050 <HAL_DMA_Start_IT+0xb8>
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d13a      	bne.n	8005042 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2202      	movs	r2, #2
 8004fd0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f022 0201 	bic.w	r2, r2, #1
 8004fe8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	68b9      	ldr	r1, [r7, #8]
 8004ff0:	68f8      	ldr	r0, [r7, #12]
 8004ff2:	f000 f91e 	bl	8005232 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d008      	beq.n	8005010 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f042 020e 	orr.w	r2, r2, #14
 800500c:	601a      	str	r2, [r3, #0]
 800500e:	e00f      	b.n	8005030 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f022 0204 	bic.w	r2, r2, #4
 800501e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f042 020a 	orr.w	r2, r2, #10
 800502e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f042 0201 	orr.w	r2, r2, #1
 800503e:	601a      	str	r2, [r3, #0]
 8005040:	e005      	b.n	800504e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2200      	movs	r2, #0
 8005046:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800504a:	2302      	movs	r3, #2
 800504c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800504e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005050:	4618      	mov	r0, r3
 8005052:	3718      	adds	r7, #24
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005058:	b480      	push	{r7}
 800505a:	b085      	sub	sp, #20
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005060:	2300      	movs	r3, #0
 8005062:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800506a:	b2db      	uxtb	r3, r3
 800506c:	2b02      	cmp	r3, #2
 800506e:	d008      	beq.n	8005082 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2204      	movs	r2, #4
 8005074:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e022      	b.n	80050c8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f022 020e 	bic.w	r2, r2, #14
 8005090:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f022 0201 	bic.w	r2, r2, #1
 80050a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050a6:	f003 021c 	and.w	r2, r3, #28
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ae:	2101      	movs	r1, #1
 80050b0:	fa01 f202 	lsl.w	r2, r1, r2
 80050b4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2201      	movs	r2, #1
 80050ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80050c6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3714      	adds	r7, #20
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050f0:	f003 031c 	and.w	r3, r3, #28
 80050f4:	2204      	movs	r2, #4
 80050f6:	409a      	lsls	r2, r3
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	4013      	ands	r3, r2
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d026      	beq.n	800514e <HAL_DMA_IRQHandler+0x7a>
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	f003 0304 	and.w	r3, r3, #4
 8005106:	2b00      	cmp	r3, #0
 8005108:	d021      	beq.n	800514e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0320 	and.w	r3, r3, #32
 8005114:	2b00      	cmp	r3, #0
 8005116:	d107      	bne.n	8005128 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f022 0204 	bic.w	r2, r2, #4
 8005126:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800512c:	f003 021c 	and.w	r2, r3, #28
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005134:	2104      	movs	r1, #4
 8005136:	fa01 f202 	lsl.w	r2, r1, r2
 800513a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005140:	2b00      	cmp	r3, #0
 8005142:	d071      	beq.n	8005228 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800514c:	e06c      	b.n	8005228 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005152:	f003 031c 	and.w	r3, r3, #28
 8005156:	2202      	movs	r2, #2
 8005158:	409a      	lsls	r2, r3
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	4013      	ands	r3, r2
 800515e:	2b00      	cmp	r3, #0
 8005160:	d02e      	beq.n	80051c0 <HAL_DMA_IRQHandler+0xec>
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	f003 0302 	and.w	r3, r3, #2
 8005168:	2b00      	cmp	r3, #0
 800516a:	d029      	beq.n	80051c0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0320 	and.w	r3, r3, #32
 8005176:	2b00      	cmp	r3, #0
 8005178:	d10b      	bne.n	8005192 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f022 020a 	bic.w	r2, r2, #10
 8005188:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2201      	movs	r2, #1
 800518e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005196:	f003 021c 	and.w	r2, r3, #28
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519e:	2102      	movs	r1, #2
 80051a0:	fa01 f202 	lsl.w	r2, r1, r2
 80051a4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d038      	beq.n	8005228 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80051be:	e033      	b.n	8005228 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051c4:	f003 031c 	and.w	r3, r3, #28
 80051c8:	2208      	movs	r2, #8
 80051ca:	409a      	lsls	r2, r3
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	4013      	ands	r3, r2
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d02a      	beq.n	800522a <HAL_DMA_IRQHandler+0x156>
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	f003 0308 	and.w	r3, r3, #8
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d025      	beq.n	800522a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f022 020e 	bic.w	r2, r2, #14
 80051ec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051f2:	f003 021c 	and.w	r2, r3, #28
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fa:	2101      	movs	r1, #1
 80051fc:	fa01 f202 	lsl.w	r2, r1, r2
 8005200:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2201      	movs	r2, #1
 8005206:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800521c:	2b00      	cmp	r3, #0
 800521e:	d004      	beq.n	800522a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005228:	bf00      	nop
 800522a:	bf00      	nop
}
 800522c:	3710      	adds	r7, #16
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}

08005232 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005232:	b480      	push	{r7}
 8005234:	b085      	sub	sp, #20
 8005236:	af00      	add	r7, sp, #0
 8005238:	60f8      	str	r0, [r7, #12]
 800523a:	60b9      	str	r1, [r7, #8]
 800523c:	607a      	str	r2, [r7, #4]
 800523e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005244:	f003 021c 	and.w	r2, r3, #28
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524c:	2101      	movs	r1, #1
 800524e:	fa01 f202 	lsl.w	r2, r1, r2
 8005252:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	683a      	ldr	r2, [r7, #0]
 800525a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	2b10      	cmp	r3, #16
 8005262:	d108      	bne.n	8005276 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68ba      	ldr	r2, [r7, #8]
 8005272:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005274:	e007      	b.n	8005286 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68ba      	ldr	r2, [r7, #8]
 800527c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	60da      	str	r2, [r3, #12]
}
 8005286:	bf00      	nop
 8005288:	3714      	adds	r7, #20
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr
	...

08005294 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005294:	b480      	push	{r7}
 8005296:	b087      	sub	sp, #28
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800529e:	2300      	movs	r3, #0
 80052a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80052a2:	e17f      	b.n	80055a4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	2101      	movs	r1, #1
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	fa01 f303 	lsl.w	r3, r1, r3
 80052b0:	4013      	ands	r3, r2
 80052b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	f000 8171 	beq.w	800559e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	f003 0303 	and.w	r3, r3, #3
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d005      	beq.n	80052d4 <HAL_GPIO_Init+0x40>
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	f003 0303 	and.w	r3, r3, #3
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	d130      	bne.n	8005336 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	005b      	lsls	r3, r3, #1
 80052de:	2203      	movs	r2, #3
 80052e0:	fa02 f303 	lsl.w	r3, r2, r3
 80052e4:	43db      	mvns	r3, r3
 80052e6:	693a      	ldr	r2, [r7, #16]
 80052e8:	4013      	ands	r3, r2
 80052ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	68da      	ldr	r2, [r3, #12]
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	005b      	lsls	r3, r3, #1
 80052f4:	fa02 f303 	lsl.w	r3, r2, r3
 80052f8:	693a      	ldr	r2, [r7, #16]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	693a      	ldr	r2, [r7, #16]
 8005302:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800530a:	2201      	movs	r2, #1
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	fa02 f303 	lsl.w	r3, r2, r3
 8005312:	43db      	mvns	r3, r3
 8005314:	693a      	ldr	r2, [r7, #16]
 8005316:	4013      	ands	r3, r2
 8005318:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	091b      	lsrs	r3, r3, #4
 8005320:	f003 0201 	and.w	r2, r3, #1
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	fa02 f303 	lsl.w	r3, r2, r3
 800532a:	693a      	ldr	r2, [r7, #16]
 800532c:	4313      	orrs	r3, r2
 800532e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	693a      	ldr	r2, [r7, #16]
 8005334:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	f003 0303 	and.w	r3, r3, #3
 800533e:	2b03      	cmp	r3, #3
 8005340:	d118      	bne.n	8005374 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005346:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8005348:	2201      	movs	r2, #1
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	fa02 f303 	lsl.w	r3, r2, r3
 8005350:	43db      	mvns	r3, r3
 8005352:	693a      	ldr	r2, [r7, #16]
 8005354:	4013      	ands	r3, r2
 8005356:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	08db      	lsrs	r3, r3, #3
 800535e:	f003 0201 	and.w	r2, r3, #1
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	fa02 f303 	lsl.w	r3, r2, r3
 8005368:	693a      	ldr	r2, [r7, #16]
 800536a:	4313      	orrs	r3, r2
 800536c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	693a      	ldr	r2, [r7, #16]
 8005372:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	f003 0303 	and.w	r3, r3, #3
 800537c:	2b03      	cmp	r3, #3
 800537e:	d017      	beq.n	80053b0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	005b      	lsls	r3, r3, #1
 800538a:	2203      	movs	r2, #3
 800538c:	fa02 f303 	lsl.w	r3, r2, r3
 8005390:	43db      	mvns	r3, r3
 8005392:	693a      	ldr	r2, [r7, #16]
 8005394:	4013      	ands	r3, r2
 8005396:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	689a      	ldr	r2, [r3, #8]
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	005b      	lsls	r3, r3, #1
 80053a0:	fa02 f303 	lsl.w	r3, r2, r3
 80053a4:	693a      	ldr	r2, [r7, #16]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	693a      	ldr	r2, [r7, #16]
 80053ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	f003 0303 	and.w	r3, r3, #3
 80053b8:	2b02      	cmp	r3, #2
 80053ba:	d123      	bne.n	8005404 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	08da      	lsrs	r2, r3, #3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	3208      	adds	r2, #8
 80053c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	f003 0307 	and.w	r3, r3, #7
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	220f      	movs	r2, #15
 80053d4:	fa02 f303 	lsl.w	r3, r2, r3
 80053d8:	43db      	mvns	r3, r3
 80053da:	693a      	ldr	r2, [r7, #16]
 80053dc:	4013      	ands	r3, r2
 80053de:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	691a      	ldr	r2, [r3, #16]
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	f003 0307 	and.w	r3, r3, #7
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	fa02 f303 	lsl.w	r3, r2, r3
 80053f0:	693a      	ldr	r2, [r7, #16]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	08da      	lsrs	r2, r3, #3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	3208      	adds	r2, #8
 80053fe:	6939      	ldr	r1, [r7, #16]
 8005400:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	005b      	lsls	r3, r3, #1
 800540e:	2203      	movs	r2, #3
 8005410:	fa02 f303 	lsl.w	r3, r2, r3
 8005414:	43db      	mvns	r3, r3
 8005416:	693a      	ldr	r2, [r7, #16]
 8005418:	4013      	ands	r3, r2
 800541a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	f003 0203 	and.w	r2, r3, #3
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	005b      	lsls	r3, r3, #1
 8005428:	fa02 f303 	lsl.w	r3, r2, r3
 800542c:	693a      	ldr	r2, [r7, #16]
 800542e:	4313      	orrs	r3, r2
 8005430:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	693a      	ldr	r2, [r7, #16]
 8005436:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005440:	2b00      	cmp	r3, #0
 8005442:	f000 80ac 	beq.w	800559e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005446:	4b5f      	ldr	r3, [pc, #380]	; (80055c4 <HAL_GPIO_Init+0x330>)
 8005448:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800544a:	4a5e      	ldr	r2, [pc, #376]	; (80055c4 <HAL_GPIO_Init+0x330>)
 800544c:	f043 0301 	orr.w	r3, r3, #1
 8005450:	6613      	str	r3, [r2, #96]	; 0x60
 8005452:	4b5c      	ldr	r3, [pc, #368]	; (80055c4 <HAL_GPIO_Init+0x330>)
 8005454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005456:	f003 0301 	and.w	r3, r3, #1
 800545a:	60bb      	str	r3, [r7, #8]
 800545c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800545e:	4a5a      	ldr	r2, [pc, #360]	; (80055c8 <HAL_GPIO_Init+0x334>)
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	089b      	lsrs	r3, r3, #2
 8005464:	3302      	adds	r3, #2
 8005466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800546a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	f003 0303 	and.w	r3, r3, #3
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	220f      	movs	r2, #15
 8005476:	fa02 f303 	lsl.w	r3, r2, r3
 800547a:	43db      	mvns	r3, r3
 800547c:	693a      	ldr	r2, [r7, #16]
 800547e:	4013      	ands	r3, r2
 8005480:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005488:	d025      	beq.n	80054d6 <HAL_GPIO_Init+0x242>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a4f      	ldr	r2, [pc, #316]	; (80055cc <HAL_GPIO_Init+0x338>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d01f      	beq.n	80054d2 <HAL_GPIO_Init+0x23e>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a4e      	ldr	r2, [pc, #312]	; (80055d0 <HAL_GPIO_Init+0x33c>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d019      	beq.n	80054ce <HAL_GPIO_Init+0x23a>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a4d      	ldr	r2, [pc, #308]	; (80055d4 <HAL_GPIO_Init+0x340>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d013      	beq.n	80054ca <HAL_GPIO_Init+0x236>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a4c      	ldr	r2, [pc, #304]	; (80055d8 <HAL_GPIO_Init+0x344>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d00d      	beq.n	80054c6 <HAL_GPIO_Init+0x232>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a4b      	ldr	r2, [pc, #300]	; (80055dc <HAL_GPIO_Init+0x348>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d007      	beq.n	80054c2 <HAL_GPIO_Init+0x22e>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a4a      	ldr	r2, [pc, #296]	; (80055e0 <HAL_GPIO_Init+0x34c>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d101      	bne.n	80054be <HAL_GPIO_Init+0x22a>
 80054ba:	2306      	movs	r3, #6
 80054bc:	e00c      	b.n	80054d8 <HAL_GPIO_Init+0x244>
 80054be:	2307      	movs	r3, #7
 80054c0:	e00a      	b.n	80054d8 <HAL_GPIO_Init+0x244>
 80054c2:	2305      	movs	r3, #5
 80054c4:	e008      	b.n	80054d8 <HAL_GPIO_Init+0x244>
 80054c6:	2304      	movs	r3, #4
 80054c8:	e006      	b.n	80054d8 <HAL_GPIO_Init+0x244>
 80054ca:	2303      	movs	r3, #3
 80054cc:	e004      	b.n	80054d8 <HAL_GPIO_Init+0x244>
 80054ce:	2302      	movs	r3, #2
 80054d0:	e002      	b.n	80054d8 <HAL_GPIO_Init+0x244>
 80054d2:	2301      	movs	r3, #1
 80054d4:	e000      	b.n	80054d8 <HAL_GPIO_Init+0x244>
 80054d6:	2300      	movs	r3, #0
 80054d8:	697a      	ldr	r2, [r7, #20]
 80054da:	f002 0203 	and.w	r2, r2, #3
 80054de:	0092      	lsls	r2, r2, #2
 80054e0:	4093      	lsls	r3, r2
 80054e2:	693a      	ldr	r2, [r7, #16]
 80054e4:	4313      	orrs	r3, r2
 80054e6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80054e8:	4937      	ldr	r1, [pc, #220]	; (80055c8 <HAL_GPIO_Init+0x334>)
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	089b      	lsrs	r3, r3, #2
 80054ee:	3302      	adds	r3, #2
 80054f0:	693a      	ldr	r2, [r7, #16]
 80054f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80054f6:	4b3b      	ldr	r3, [pc, #236]	; (80055e4 <HAL_GPIO_Init+0x350>)
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	43db      	mvns	r3, r3
 8005500:	693a      	ldr	r2, [r7, #16]
 8005502:	4013      	ands	r3, r2
 8005504:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d003      	beq.n	800551a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8005512:	693a      	ldr	r2, [r7, #16]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	4313      	orrs	r3, r2
 8005518:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800551a:	4a32      	ldr	r2, [pc, #200]	; (80055e4 <HAL_GPIO_Init+0x350>)
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005520:	4b30      	ldr	r3, [pc, #192]	; (80055e4 <HAL_GPIO_Init+0x350>)
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	43db      	mvns	r3, r3
 800552a:	693a      	ldr	r2, [r7, #16]
 800552c:	4013      	ands	r3, r2
 800552e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005538:	2b00      	cmp	r3, #0
 800553a:	d003      	beq.n	8005544 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800553c:	693a      	ldr	r2, [r7, #16]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	4313      	orrs	r3, r2
 8005542:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005544:	4a27      	ldr	r2, [pc, #156]	; (80055e4 <HAL_GPIO_Init+0x350>)
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800554a:	4b26      	ldr	r3, [pc, #152]	; (80055e4 <HAL_GPIO_Init+0x350>)
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	43db      	mvns	r3, r3
 8005554:	693a      	ldr	r2, [r7, #16]
 8005556:	4013      	ands	r3, r2
 8005558:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d003      	beq.n	800556e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8005566:	693a      	ldr	r2, [r7, #16]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	4313      	orrs	r3, r2
 800556c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800556e:	4a1d      	ldr	r2, [pc, #116]	; (80055e4 <HAL_GPIO_Init+0x350>)
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005574:	4b1b      	ldr	r3, [pc, #108]	; (80055e4 <HAL_GPIO_Init+0x350>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	43db      	mvns	r3, r3
 800557e:	693a      	ldr	r2, [r7, #16]
 8005580:	4013      	ands	r3, r2
 8005582:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d003      	beq.n	8005598 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8005590:	693a      	ldr	r2, [r7, #16]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	4313      	orrs	r3, r2
 8005596:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005598:	4a12      	ldr	r2, [pc, #72]	; (80055e4 <HAL_GPIO_Init+0x350>)
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	3301      	adds	r3, #1
 80055a2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	fa22 f303 	lsr.w	r3, r2, r3
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	f47f ae78 	bne.w	80052a4 <HAL_GPIO_Init+0x10>
  }
}
 80055b4:	bf00      	nop
 80055b6:	bf00      	nop
 80055b8:	371c      	adds	r7, #28
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr
 80055c2:	bf00      	nop
 80055c4:	40021000 	.word	0x40021000
 80055c8:	40010000 	.word	0x40010000
 80055cc:	48000400 	.word	0x48000400
 80055d0:	48000800 	.word	0x48000800
 80055d4:	48000c00 	.word	0x48000c00
 80055d8:	48001000 	.word	0x48001000
 80055dc:	48001400 	.word	0x48001400
 80055e0:	48001800 	.word	0x48001800
 80055e4:	40010400 	.word	0x40010400

080055e8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b087      	sub	sp, #28
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80055f2:	2300      	movs	r3, #0
 80055f4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80055f6:	e0cd      	b.n	8005794 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80055f8:	2201      	movs	r2, #1
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005600:	683a      	ldr	r2, [r7, #0]
 8005602:	4013      	ands	r3, r2
 8005604:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	2b00      	cmp	r3, #0
 800560a:	f000 80c0 	beq.w	800578e <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800560e:	4a68      	ldr	r2, [pc, #416]	; (80057b0 <HAL_GPIO_DeInit+0x1c8>)
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	089b      	lsrs	r3, r3, #2
 8005614:	3302      	adds	r3, #2
 8005616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800561a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	f003 0303 	and.w	r3, r3, #3
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	220f      	movs	r2, #15
 8005626:	fa02 f303 	lsl.w	r3, r2, r3
 800562a:	68fa      	ldr	r2, [r7, #12]
 800562c:	4013      	ands	r3, r2
 800562e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005636:	d025      	beq.n	8005684 <HAL_GPIO_DeInit+0x9c>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	4a5e      	ldr	r2, [pc, #376]	; (80057b4 <HAL_GPIO_DeInit+0x1cc>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d01f      	beq.n	8005680 <HAL_GPIO_DeInit+0x98>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a5d      	ldr	r2, [pc, #372]	; (80057b8 <HAL_GPIO_DeInit+0x1d0>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d019      	beq.n	800567c <HAL_GPIO_DeInit+0x94>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a5c      	ldr	r2, [pc, #368]	; (80057bc <HAL_GPIO_DeInit+0x1d4>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d013      	beq.n	8005678 <HAL_GPIO_DeInit+0x90>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a5b      	ldr	r2, [pc, #364]	; (80057c0 <HAL_GPIO_DeInit+0x1d8>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d00d      	beq.n	8005674 <HAL_GPIO_DeInit+0x8c>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a5a      	ldr	r2, [pc, #360]	; (80057c4 <HAL_GPIO_DeInit+0x1dc>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d007      	beq.n	8005670 <HAL_GPIO_DeInit+0x88>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a59      	ldr	r2, [pc, #356]	; (80057c8 <HAL_GPIO_DeInit+0x1e0>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d101      	bne.n	800566c <HAL_GPIO_DeInit+0x84>
 8005668:	2306      	movs	r3, #6
 800566a:	e00c      	b.n	8005686 <HAL_GPIO_DeInit+0x9e>
 800566c:	2307      	movs	r3, #7
 800566e:	e00a      	b.n	8005686 <HAL_GPIO_DeInit+0x9e>
 8005670:	2305      	movs	r3, #5
 8005672:	e008      	b.n	8005686 <HAL_GPIO_DeInit+0x9e>
 8005674:	2304      	movs	r3, #4
 8005676:	e006      	b.n	8005686 <HAL_GPIO_DeInit+0x9e>
 8005678:	2303      	movs	r3, #3
 800567a:	e004      	b.n	8005686 <HAL_GPIO_DeInit+0x9e>
 800567c:	2302      	movs	r3, #2
 800567e:	e002      	b.n	8005686 <HAL_GPIO_DeInit+0x9e>
 8005680:	2301      	movs	r3, #1
 8005682:	e000      	b.n	8005686 <HAL_GPIO_DeInit+0x9e>
 8005684:	2300      	movs	r3, #0
 8005686:	697a      	ldr	r2, [r7, #20]
 8005688:	f002 0203 	and.w	r2, r2, #3
 800568c:	0092      	lsls	r2, r2, #2
 800568e:	4093      	lsls	r3, r2
 8005690:	68fa      	ldr	r2, [r7, #12]
 8005692:	429a      	cmp	r2, r3
 8005694:	d132      	bne.n	80056fc <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8005696:	4b4d      	ldr	r3, [pc, #308]	; (80057cc <HAL_GPIO_DeInit+0x1e4>)
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	43db      	mvns	r3, r3
 800569e:	494b      	ldr	r1, [pc, #300]	; (80057cc <HAL_GPIO_DeInit+0x1e4>)
 80056a0:	4013      	ands	r3, r2
 80056a2:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80056a4:	4b49      	ldr	r3, [pc, #292]	; (80057cc <HAL_GPIO_DeInit+0x1e4>)
 80056a6:	685a      	ldr	r2, [r3, #4]
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	43db      	mvns	r3, r3
 80056ac:	4947      	ldr	r1, [pc, #284]	; (80057cc <HAL_GPIO_DeInit+0x1e4>)
 80056ae:	4013      	ands	r3, r2
 80056b0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80056b2:	4b46      	ldr	r3, [pc, #280]	; (80057cc <HAL_GPIO_DeInit+0x1e4>)
 80056b4:	68da      	ldr	r2, [r3, #12]
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	43db      	mvns	r3, r3
 80056ba:	4944      	ldr	r1, [pc, #272]	; (80057cc <HAL_GPIO_DeInit+0x1e4>)
 80056bc:	4013      	ands	r3, r2
 80056be:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80056c0:	4b42      	ldr	r3, [pc, #264]	; (80057cc <HAL_GPIO_DeInit+0x1e4>)
 80056c2:	689a      	ldr	r2, [r3, #8]
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	43db      	mvns	r3, r3
 80056c8:	4940      	ldr	r1, [pc, #256]	; (80057cc <HAL_GPIO_DeInit+0x1e4>)
 80056ca:	4013      	ands	r3, r2
 80056cc:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	f003 0303 	and.w	r3, r3, #3
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	220f      	movs	r2, #15
 80056d8:	fa02 f303 	lsl.w	r3, r2, r3
 80056dc:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80056de:	4a34      	ldr	r2, [pc, #208]	; (80057b0 <HAL_GPIO_DeInit+0x1c8>)
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	089b      	lsrs	r3, r3, #2
 80056e4:	3302      	adds	r3, #2
 80056e6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	43da      	mvns	r2, r3
 80056ee:	4830      	ldr	r0, [pc, #192]	; (80057b0 <HAL_GPIO_DeInit+0x1c8>)
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	089b      	lsrs	r3, r3, #2
 80056f4:	400a      	ands	r2, r1
 80056f6:	3302      	adds	r3, #2
 80056f8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	005b      	lsls	r3, r3, #1
 8005704:	2103      	movs	r1, #3
 8005706:	fa01 f303 	lsl.w	r3, r1, r3
 800570a:	431a      	orrs	r2, r3
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	08da      	lsrs	r2, r3, #3
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	3208      	adds	r2, #8
 8005718:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	f003 0307 	and.w	r3, r3, #7
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	220f      	movs	r2, #15
 8005726:	fa02 f303 	lsl.w	r3, r2, r3
 800572a:	43db      	mvns	r3, r3
 800572c:	697a      	ldr	r2, [r7, #20]
 800572e:	08d2      	lsrs	r2, r2, #3
 8005730:	4019      	ands	r1, r3
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	3208      	adds	r2, #8
 8005736:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	689a      	ldr	r2, [r3, #8]
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	005b      	lsls	r3, r3, #1
 8005742:	2103      	movs	r1, #3
 8005744:	fa01 f303 	lsl.w	r3, r1, r3
 8005748:	43db      	mvns	r3, r3
 800574a:	401a      	ands	r2, r3
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	685a      	ldr	r2, [r3, #4]
 8005754:	2101      	movs	r1, #1
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	fa01 f303 	lsl.w	r3, r1, r3
 800575c:	43db      	mvns	r3, r3
 800575e:	401a      	ands	r2, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	68da      	ldr	r2, [r3, #12]
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	005b      	lsls	r3, r3, #1
 800576c:	2103      	movs	r1, #3
 800576e:	fa01 f303 	lsl.w	r3, r1, r3
 8005772:	43db      	mvns	r3, r3
 8005774:	401a      	ands	r2, r3
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800577e:	2101      	movs	r1, #1
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	fa01 f303 	lsl.w	r3, r1, r3
 8005786:	43db      	mvns	r3, r3
 8005788:	401a      	ands	r2, r3
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	3301      	adds	r3, #1
 8005792:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005794:	683a      	ldr	r2, [r7, #0]
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	fa22 f303 	lsr.w	r3, r2, r3
 800579c:	2b00      	cmp	r3, #0
 800579e:	f47f af2b 	bne.w	80055f8 <HAL_GPIO_DeInit+0x10>
  }
}
 80057a2:	bf00      	nop
 80057a4:	bf00      	nop
 80057a6:	371c      	adds	r7, #28
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr
 80057b0:	40010000 	.word	0x40010000
 80057b4:	48000400 	.word	0x48000400
 80057b8:	48000800 	.word	0x48000800
 80057bc:	48000c00 	.word	0x48000c00
 80057c0:	48001000 	.word	0x48001000
 80057c4:	48001400 	.word	0x48001400
 80057c8:	48001800 	.word	0x48001800
 80057cc:	40010400 	.word	0x40010400

080057d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	460b      	mov	r3, r1
 80057da:	807b      	strh	r3, [r7, #2]
 80057dc:	4613      	mov	r3, r2
 80057de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80057e0:	787b      	ldrb	r3, [r7, #1]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d003      	beq.n	80057ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80057e6:	887a      	ldrh	r2, [r7, #2]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80057ec:	e002      	b.n	80057f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80057ee:	887a      	ldrh	r2, [r7, #2]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80057f4:	bf00      	nop
 80057f6:	370c      	adds	r7, #12
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b082      	sub	sp, #8
 8005804:	af00      	add	r7, sp, #0
 8005806:	4603      	mov	r3, r0
 8005808:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800580a:	4b08      	ldr	r3, [pc, #32]	; (800582c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800580c:	695a      	ldr	r2, [r3, #20]
 800580e:	88fb      	ldrh	r3, [r7, #6]
 8005810:	4013      	ands	r3, r2
 8005812:	2b00      	cmp	r3, #0
 8005814:	d006      	beq.n	8005824 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005816:	4a05      	ldr	r2, [pc, #20]	; (800582c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005818:	88fb      	ldrh	r3, [r7, #6]
 800581a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800581c:	88fb      	ldrh	r3, [r7, #6]
 800581e:	4618      	mov	r0, r3
 8005820:	f7fc fbe4 	bl	8001fec <HAL_GPIO_EXTI_Callback>
  }
}
 8005824:	bf00      	nop
 8005826:	3708      	adds	r7, #8
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}
 800582c:	40010400 	.word	0x40010400

08005830 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b082      	sub	sp, #8
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d101      	bne.n	8005842 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	e08d      	b.n	800595e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005848:	b2db      	uxtb	r3, r3
 800584a:	2b00      	cmp	r3, #0
 800584c:	d106      	bne.n	800585c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f7fc fde4 	bl	8002424 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2224      	movs	r2, #36	; 0x24
 8005860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f022 0201 	bic.w	r2, r2, #1
 8005872:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685a      	ldr	r2, [r3, #4]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005880:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	689a      	ldr	r2, [r3, #8]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005890:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	2b01      	cmp	r3, #1
 8005898:	d107      	bne.n	80058aa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	689a      	ldr	r2, [r3, #8]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058a6:	609a      	str	r2, [r3, #8]
 80058a8:	e006      	b.n	80058b8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	689a      	ldr	r2, [r3, #8]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80058b6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d108      	bne.n	80058d2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	685a      	ldr	r2, [r3, #4]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058ce:	605a      	str	r2, [r3, #4]
 80058d0:	e007      	b.n	80058e2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	685a      	ldr	r2, [r3, #4]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	6812      	ldr	r2, [r2, #0]
 80058ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80058f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058f4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	68da      	ldr	r2, [r3, #12]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005904:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	691a      	ldr	r2, [r3, #16]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	695b      	ldr	r3, [r3, #20]
 800590e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	699b      	ldr	r3, [r3, #24]
 8005916:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	430a      	orrs	r2, r1
 800591e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	69d9      	ldr	r1, [r3, #28]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6a1a      	ldr	r2, [r3, #32]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	430a      	orrs	r2, r1
 800592e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f042 0201 	orr.w	r2, r2, #1
 800593e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2220      	movs	r2, #32
 800594a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800595c:	2300      	movs	r3, #0
}
 800595e:	4618      	mov	r0, r3
 8005960:	3708      	adds	r7, #8
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}

08005966 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005966:	b480      	push	{r7}
 8005968:	b083      	sub	sp, #12
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
 800596e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005976:	b2db      	uxtb	r3, r3
 8005978:	2b20      	cmp	r3, #32
 800597a:	d138      	bne.n	80059ee <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005982:	2b01      	cmp	r3, #1
 8005984:	d101      	bne.n	800598a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005986:	2302      	movs	r3, #2
 8005988:	e032      	b.n	80059f0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2201      	movs	r2, #1
 800598e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2224      	movs	r2, #36	; 0x24
 8005996:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f022 0201 	bic.w	r2, r2, #1
 80059a8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80059b8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	6819      	ldr	r1, [r3, #0]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	683a      	ldr	r2, [r7, #0]
 80059c6:	430a      	orrs	r2, r1
 80059c8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f042 0201 	orr.w	r2, r2, #1
 80059d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2220      	movs	r2, #32
 80059de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80059ea:	2300      	movs	r3, #0
 80059ec:	e000      	b.n	80059f0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80059ee:	2302      	movs	r3, #2
  }
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	370c      	adds	r7, #12
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b085      	sub	sp, #20
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	2b20      	cmp	r3, #32
 8005a10:	d139      	bne.n	8005a86 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d101      	bne.n	8005a20 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005a1c:	2302      	movs	r3, #2
 8005a1e:	e033      	b.n	8005a88 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2224      	movs	r2, #36	; 0x24
 8005a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f022 0201 	bic.w	r2, r2, #1
 8005a3e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005a4e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	021b      	lsls	r3, r3, #8
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	68fa      	ldr	r2, [r7, #12]
 8005a60:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f042 0201 	orr.w	r2, r2, #1
 8005a70:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2220      	movs	r2, #32
 8005a76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005a82:	2300      	movs	r3, #0
 8005a84:	e000      	b.n	8005a88 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005a86:	2302      	movs	r3, #2
  }
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3714      	adds	r7, #20
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005a94:	b480      	push	{r7}
 8005a96:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005a98:	4b04      	ldr	r3, [pc, #16]	; (8005aac <HAL_PWREx_GetVoltageRange+0x18>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr
 8005aaa:	bf00      	nop
 8005aac:	40007000 	.word	0x40007000

08005ab0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b085      	sub	sp, #20
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005abe:	d130      	bne.n	8005b22 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005ac0:	4b23      	ldr	r3, [pc, #140]	; (8005b50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005ac8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005acc:	d038      	beq.n	8005b40 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005ace:	4b20      	ldr	r3, [pc, #128]	; (8005b50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005ad6:	4a1e      	ldr	r2, [pc, #120]	; (8005b50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005ad8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005adc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005ade:	4b1d      	ldr	r3, [pc, #116]	; (8005b54 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	2232      	movs	r2, #50	; 0x32
 8005ae4:	fb02 f303 	mul.w	r3, r2, r3
 8005ae8:	4a1b      	ldr	r2, [pc, #108]	; (8005b58 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005aea:	fba2 2303 	umull	r2, r3, r2, r3
 8005aee:	0c9b      	lsrs	r3, r3, #18
 8005af0:	3301      	adds	r3, #1
 8005af2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005af4:	e002      	b.n	8005afc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	3b01      	subs	r3, #1
 8005afa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005afc:	4b14      	ldr	r3, [pc, #80]	; (8005b50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005afe:	695b      	ldr	r3, [r3, #20]
 8005b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b08:	d102      	bne.n	8005b10 <HAL_PWREx_ControlVoltageScaling+0x60>
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d1f2      	bne.n	8005af6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005b10:	4b0f      	ldr	r3, [pc, #60]	; (8005b50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005b12:	695b      	ldr	r3, [r3, #20]
 8005b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b1c:	d110      	bne.n	8005b40 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	e00f      	b.n	8005b42 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005b22:	4b0b      	ldr	r3, [pc, #44]	; (8005b50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005b2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b2e:	d007      	beq.n	8005b40 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005b30:	4b07      	ldr	r3, [pc, #28]	; (8005b50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005b38:	4a05      	ldr	r2, [pc, #20]	; (8005b50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005b3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005b3e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3714      	adds	r7, #20
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr
 8005b4e:	bf00      	nop
 8005b50:	40007000 	.word	0x40007000
 8005b54:	2000009c 	.word	0x2000009c
 8005b58:	431bde83 	.word	0x431bde83

08005b5c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b086      	sub	sp, #24
 8005b60:	af02      	add	r7, sp, #8
 8005b62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005b64:	f7fd fb3a 	bl	80031dc <HAL_GetTick>
 8005b68:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d101      	bne.n	8005b74 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	e063      	b.n	8005c3c <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d10b      	bne.n	8005b98 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f7fc fca9 	bl	80024e0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8005b8e:	f241 3188 	movw	r1, #5000	; 0x1388
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 fb03 	bl	800619e <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	3b01      	subs	r3, #1
 8005ba8:	021a      	lsls	r2, r3, #8
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	430a      	orrs	r2, r1
 8005bb0:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb6:	9300      	str	r3, [sp, #0]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	2120      	movs	r1, #32
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 fafb 	bl	80061ba <QSPI_WaitFlagStateUntilTimeout>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005bc8:	7afb      	ldrb	r3, [r7, #11]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d131      	bne.n	8005c32 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005bd8:	f023 0310 	bic.w	r3, r3, #16
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	6852      	ldr	r2, [r2, #4]
 8005be0:	0611      	lsls	r1, r2, #24
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	68d2      	ldr	r2, [r2, #12]
 8005be6:	4311      	orrs	r1, r2
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	6812      	ldr	r2, [r2, #0]
 8005bec:	430b      	orrs	r3, r1
 8005bee:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	685a      	ldr	r2, [r3, #4]
 8005bf6:	4b13      	ldr	r3, [pc, #76]	; (8005c44 <HAL_QSPI_Init+0xe8>)
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	6912      	ldr	r2, [r2, #16]
 8005bfe:	0411      	lsls	r1, r2, #16
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	6952      	ldr	r2, [r2, #20]
 8005c04:	4311      	orrs	r1, r2
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	6992      	ldr	r2, [r2, #24]
 8005c0a:	4311      	orrs	r1, r2
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	6812      	ldr	r2, [r2, #0]
 8005c10:	430b      	orrs	r3, r1
 8005c12:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f042 0201 	orr.w	r2, r2, #1
 8005c22:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8005c3a:	7afb      	ldrb	r3, [r7, #11]
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3710      	adds	r7, #16
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}
 8005c44:	ffe0f8fe 	.word	0xffe0f8fe

08005c48 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d101      	bne.n	8005c5a <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	e016      	b.n	8005c88 <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f022 0201 	bic.w	r2, r2, #1
 8005c68:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f7fc fc7c 	bl	8002568 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005c86:	2300      	movs	r3, #0
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3708      	adds	r7, #8
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b088      	sub	sp, #32
 8005c94:	af02      	add	r7, sp, #8
 8005c96:	60f8      	str	r0, [r7, #12]
 8005c98:	60b9      	str	r1, [r7, #8]
 8005c9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005c9c:	f7fd fa9e 	bl	80031dc <HAL_GetTick>
 8005ca0:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d101      	bne.n	8005cb2 <HAL_QSPI_Command+0x22>
 8005cae:	2302      	movs	r3, #2
 8005cb0:	e048      	b.n	8005d44 <HAL_QSPI_Command+0xb4>
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d137      	bne.n	8005d36 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2202      	movs	r2, #2
 8005cd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	9300      	str	r3, [sp, #0]
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	2120      	movs	r1, #32
 8005cde:	68f8      	ldr	r0, [r7, #12]
 8005ce0:	f000 fa6b 	bl	80061ba <QSPI_WaitFlagStateUntilTimeout>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8005ce8:	7dfb      	ldrb	r3, [r7, #23]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d125      	bne.n	8005d3a <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8005cee:	2200      	movs	r2, #0
 8005cf0:	68b9      	ldr	r1, [r7, #8]
 8005cf2:	68f8      	ldr	r0, [r7, #12]
 8005cf4:	f000 fa98 	bl	8006228 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d115      	bne.n	8005d2c <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	9300      	str	r3, [sp, #0]
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	2201      	movs	r2, #1
 8005d08:	2102      	movs	r1, #2
 8005d0a:	68f8      	ldr	r0, [r7, #12]
 8005d0c:	f000 fa55 	bl	80061ba <QSPI_WaitFlagStateUntilTimeout>
 8005d10:	4603      	mov	r3, r0
 8005d12:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8005d14:	7dfb      	ldrb	r3, [r7, #23]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d10f      	bne.n	8005d3a <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	2202      	movs	r2, #2
 8005d20:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2201      	movs	r2, #1
 8005d26:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8005d2a:	e006      	b.n	8005d3a <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8005d34:	e001      	b.n	8005d3a <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8005d36:	2302      	movs	r3, #2
 8005d38:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8005d42:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3718      	adds	r7, #24
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b08a      	sub	sp, #40	; 0x28
 8005d50:	af02      	add	r7, sp, #8
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8005d5c:	f7fd fa3e 	bl	80031dc <HAL_GetTick>
 8005d60:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	3320      	adds	r3, #32
 8005d68:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d101      	bne.n	8005d7a <HAL_QSPI_Transmit+0x2e>
 8005d76:	2302      	movs	r3, #2
 8005d78:	e07b      	b.n	8005e72 <HAL_QSPI_Transmit+0x126>
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d16a      	bne.n	8005e64 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2200      	movs	r2, #0
 8005d92:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d05b      	beq.n	8005e52 <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2212      	movs	r2, #18
 8005d9e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	691b      	ldr	r3, [r3, #16]
 8005da8:	1c5a      	adds	r2, r3, #1
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	625a      	str	r2, [r3, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	691b      	ldr	r3, [r3, #16]
 8005db4:	1c5a      	adds	r2, r3, #1
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	68ba      	ldr	r2, [r7, #8]
 8005dbe:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	695a      	ldr	r2, [r3, #20]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8005dce:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8005dd0:	e01b      	b.n	8005e0a <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	9300      	str	r3, [sp, #0]
 8005dd6:	69bb      	ldr	r3, [r7, #24]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	2104      	movs	r1, #4
 8005ddc:	68f8      	ldr	r0, [r7, #12]
 8005dde:	f000 f9ec 	bl	80061ba <QSPI_WaitFlagStateUntilTimeout>
 8005de2:	4603      	mov	r3, r0
 8005de4:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8005de6:	7ffb      	ldrb	r3, [r7, #31]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d113      	bne.n	8005e14 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	69db      	ldr	r3, [r3, #28]
 8005df0:	781a      	ldrb	r2, [r3, #0]
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	69db      	ldr	r3, [r3, #28]
 8005dfa:	1c5a      	adds	r2, r3, #1
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e04:	1e5a      	subs	r2, r3, #1
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	625a      	str	r2, [r3, #36]	; 0x24
      while(hqspi->TxXferCount > 0U)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d1df      	bne.n	8005dd2 <HAL_QSPI_Transmit+0x86>
 8005e12:	e000      	b.n	8005e16 <HAL_QSPI_Transmit+0xca>
          break;
 8005e14:	bf00      	nop
      }

      if (status == HAL_OK)
 8005e16:	7ffb      	ldrb	r3, [r7, #31]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d115      	bne.n	8005e48 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	9300      	str	r3, [sp, #0]
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	2201      	movs	r2, #1
 8005e24:	2102      	movs	r1, #2
 8005e26:	68f8      	ldr	r0, [r7, #12]
 8005e28:	f000 f9c7 	bl	80061ba <QSPI_WaitFlagStateUntilTimeout>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8005e30:	7ffb      	ldrb	r3, [r7, #31]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d108      	bne.n	8005e48 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	2202      	movs	r2, #2
 8005e3c:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 8005e3e:	68f8      	ldr	r0, [r7, #12]
 8005e40:	f000 f934 	bl	80060ac <HAL_QSPI_Abort>
 8005e44:	4603      	mov	r3, r0
 8005e46:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8005e50:	e00a      	b.n	8005e68 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e56:	f043 0208 	orr.w	r2, r3, #8
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	77fb      	strb	r3, [r7, #31]
 8005e62:	e001      	b.n	8005e68 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 8005e64:	2302      	movs	r3, #2
 8005e66:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8005e70:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3720      	adds	r7, #32
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}

08005e7a <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8005e7a:	b580      	push	{r7, lr}
 8005e7c:	b08a      	sub	sp, #40	; 0x28
 8005e7e:	af02      	add	r7, sp, #8
 8005e80:	60f8      	str	r0, [r7, #12]
 8005e82:	60b9      	str	r1, [r7, #8]
 8005e84:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e86:	2300      	movs	r3, #0
 8005e88:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8005e8a:	f7fd f9a7 	bl	80031dc <HAL_GetTick>
 8005e8e:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	699b      	ldr	r3, [r3, #24]
 8005e96:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	3320      	adds	r3, #32
 8005e9e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d101      	bne.n	8005eb0 <HAL_QSPI_Receive+0x36>
 8005eac:	2302      	movs	r3, #2
 8005eae:	e082      	b.n	8005fb6 <HAL_QSPI_Receive+0x13c>
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d171      	bne.n	8005fa8 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d062      	beq.n	8005f96 <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2222      	movs	r2, #34	; 0x22
 8005ed4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	1c5a      	adds	r2, r3, #1
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	631a      	str	r2, [r3, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	691b      	ldr	r3, [r3, #16]
 8005eea:	1c5a      	adds	r2, r3, #1
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->pRxBuffPtr = pData;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	68ba      	ldr	r2, [r7, #8]
 8005ef4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	695b      	ldr	r3, [r3, #20]
 8005efc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005f08:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	697a      	ldr	r2, [r7, #20]
 8005f10:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8005f12:	e01c      	b.n	8005f4e <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	9300      	str	r3, [sp, #0]
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	2106      	movs	r1, #6
 8005f1e:	68f8      	ldr	r0, [r7, #12]
 8005f20:	f000 f94b 	bl	80061ba <QSPI_WaitFlagStateUntilTimeout>
 8005f24:	4603      	mov	r3, r0
 8005f26:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8005f28:	7ffb      	ldrb	r3, [r7, #31]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d114      	bne.n	8005f58 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f32:	693a      	ldr	r2, [r7, #16]
 8005f34:	7812      	ldrb	r2, [r2, #0]
 8005f36:	b2d2      	uxtb	r2, r2
 8005f38:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f3e:	1c5a      	adds	r2, r3, #1
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	629a      	str	r2, [r3, #40]	; 0x28
        hqspi->RxXferCount--;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f48:	1e5a      	subs	r2, r3, #1
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	631a      	str	r2, [r3, #48]	; 0x30
      while(hqspi->RxXferCount > 0U)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d1de      	bne.n	8005f14 <HAL_QSPI_Receive+0x9a>
 8005f56:	e000      	b.n	8005f5a <HAL_QSPI_Receive+0xe0>
          break;
 8005f58:	bf00      	nop
      }

      if (status == HAL_OK)
 8005f5a:	7ffb      	ldrb	r3, [r7, #31]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d115      	bne.n	8005f8c <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	9300      	str	r3, [sp, #0]
 8005f64:	69bb      	ldr	r3, [r7, #24]
 8005f66:	2201      	movs	r2, #1
 8005f68:	2102      	movs	r1, #2
 8005f6a:	68f8      	ldr	r0, [r7, #12]
 8005f6c:	f000 f925 	bl	80061ba <QSPI_WaitFlagStateUntilTimeout>
 8005f70:	4603      	mov	r3, r0
 8005f72:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8005f74:	7ffb      	ldrb	r3, [r7, #31]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d108      	bne.n	8005f8c <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2202      	movs	r2, #2
 8005f80:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 8005f82:	68f8      	ldr	r0, [r7, #12]
 8005f84:	f000 f892 	bl	80060ac <HAL_QSPI_Abort>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8005f94:	e00a      	b.n	8005fac <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f9a:	f043 0208 	orr.w	r2, r3, #8
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	77fb      	strb	r3, [r7, #31]
 8005fa6:	e001      	b.n	8005fac <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 8005fa8:	2302      	movs	r3, #2
 8005faa:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8005fb4:	7ffb      	ldrb	r3, [r7, #31]
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3720      	adds	r7, #32
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}

08005fbe <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8005fbe:	b580      	push	{r7, lr}
 8005fc0:	b088      	sub	sp, #32
 8005fc2:	af02      	add	r7, sp, #8
 8005fc4:	60f8      	str	r0, [r7, #12]
 8005fc6:	60b9      	str	r1, [r7, #8]
 8005fc8:	607a      	str	r2, [r7, #4]
 8005fca:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005fcc:	f7fd f906 	bl	80031dc <HAL_GetTick>
 8005fd0:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d101      	bne.n	8005fe2 <HAL_QSPI_AutoPolling+0x24>
 8005fde:	2302      	movs	r3, #2
 8005fe0:	e060      	b.n	80060a4 <HAL_QSPI_AutoPolling+0xe6>
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d14f      	bne.n	8006096 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2242      	movs	r2, #66	; 0x42
 8006000:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	9300      	str	r3, [sp, #0]
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	2200      	movs	r2, #0
 800600c:	2120      	movs	r1, #32
 800600e:	68f8      	ldr	r0, [r7, #12]
 8006010:	f000 f8d3 	bl	80061ba <QSPI_WaitFlagStateUntilTimeout>
 8006014:	4603      	mov	r3, r0
 8006016:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8006018:	7dfb      	ldrb	r3, [r7, #23]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d13d      	bne.n	800609a <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	6812      	ldr	r2, [r2, #0]
 8006026:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	6852      	ldr	r2, [r2, #4]
 8006030:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	6892      	ldr	r2, [r2, #8]
 800603a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	431a      	orrs	r2, r3
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8006054:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	68da      	ldr	r2, [r3, #12]
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800605e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006062:	68b9      	ldr	r1, [r7, #8]
 8006064:	68f8      	ldr	r0, [r7, #12]
 8006066:	f000 f8df 	bl	8006228 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	9300      	str	r3, [sp, #0]
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	2201      	movs	r2, #1
 8006072:	2108      	movs	r1, #8
 8006074:	68f8      	ldr	r0, [r7, #12]
 8006076:	f000 f8a0 	bl	80061ba <QSPI_WaitFlagStateUntilTimeout>
 800607a:	4603      	mov	r3, r0
 800607c:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800607e:	7dfb      	ldrb	r3, [r7, #23]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d10a      	bne.n	800609a <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	2208      	movs	r2, #8
 800608a:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8006094:	e001      	b.n	800609a <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8006096:	2302      	movs	r3, #2
 8006098:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2200      	movs	r2, #0
 800609e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80060a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3718      	adds	r7, #24
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}

080060ac <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b086      	sub	sp, #24
 80060b0:	af02      	add	r7, sp, #8
 80060b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060b4:	2300      	movs	r3, #0
 80060b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80060b8:	f7fd f890 	bl	80031dc <HAL_GetTick>
 80060bc:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	f003 0302 	and.w	r3, r3, #2
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d062      	beq.n	8006194 <HAL_QSPI_Abort+0xe8>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f003 0304 	and.w	r3, r3, #4
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d017      	beq.n	8006114 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f022 0204 	bic.w	r2, r2, #4
 80060f2:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060f8:	4618      	mov	r0, r3
 80060fa:	f7fe ffad 	bl	8005058 <HAL_DMA_Abort>
 80060fe:	4603      	mov	r3, r0
 8006100:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 8006102:	7bfb      	ldrb	r3, [r7, #15]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d005      	beq.n	8006114 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800610c:	f043 0204 	orr.w	r2, r3, #4
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }

    if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	f003 0320 	and.w	r3, r3, #32
 800611e:	2b00      	cmp	r3, #0
 8006120:	d034      	beq.n	800618c <HAL_QSPI_Abort+0xe0>
    {
      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f042 0202 	orr.w	r2, r2, #2
 8006130:	601a      	str	r2, [r3, #0]
      
      /* Wait until TC flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006136:	9300      	str	r3, [sp, #0]
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	2201      	movs	r2, #1
 800613c:	2102      	movs	r1, #2
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 f83b 	bl	80061ba <QSPI_WaitFlagStateUntilTimeout>
 8006144:	4603      	mov	r3, r0
 8006146:	73fb      	strb	r3, [r7, #15]
      
      if (status == HAL_OK)
 8006148:	7bfb      	ldrb	r3, [r7, #15]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d10e      	bne.n	800616c <HAL_QSPI_Abort+0xc0>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	2202      	movs	r2, #2
 8006154:	60da      	str	r2, [r3, #12]
        
        /* Wait until BUSY flag is reset */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800615a:	9300      	str	r3, [sp, #0]
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	2200      	movs	r2, #0
 8006160:	2120      	movs	r1, #32
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 f829 	bl	80061ba <QSPI_WaitFlagStateUntilTimeout>
 8006168:	4603      	mov	r3, r0
 800616a:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 800616c:	7bfb      	ldrb	r3, [r7, #15]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d110      	bne.n	8006194 <HAL_QSPI_Abort+0xe8>
      {
        /* Reset functional mode configuration to indirect write mode by default */
        CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	695a      	ldr	r2, [r3, #20]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8006180:	615a      	str	r2, [r3, #20]
        
        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2201      	movs	r2, #1
 8006186:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800618a:	e003      	b.n	8006194 <HAL_QSPI_Abort+0xe8>
      }
    }
    else
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }

  return status;
 8006194:	7bfb      	ldrb	r3, [r7, #15]
}
 8006196:	4618      	mov	r0, r3
 8006198:	3710      	adds	r7, #16
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}

0800619e <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800619e:	b480      	push	{r7}
 80061a0:	b083      	sub	sp, #12
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
 80061a6:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	683a      	ldr	r2, [r7, #0]
 80061ac:	641a      	str	r2, [r3, #64]	; 0x40
}
 80061ae:	bf00      	nop
 80061b0:	370c      	adds	r7, #12
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr

080061ba <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80061ba:	b580      	push	{r7, lr}
 80061bc:	b084      	sub	sp, #16
 80061be:	af00      	add	r7, sp, #0
 80061c0:	60f8      	str	r0, [r7, #12]
 80061c2:	60b9      	str	r1, [r7, #8]
 80061c4:	603b      	str	r3, [r7, #0]
 80061c6:	4613      	mov	r3, r2
 80061c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80061ca:	e01a      	b.n	8006202 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061d2:	d016      	beq.n	8006202 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061d4:	f7fd f802 	bl	80031dc <HAL_GetTick>
 80061d8:	4602      	mov	r2, r0
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	1ad3      	subs	r3, r2, r3
 80061de:	69ba      	ldr	r2, [r7, #24]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d302      	bcc.n	80061ea <QSPI_WaitFlagStateUntilTimeout+0x30>
 80061e4:	69bb      	ldr	r3, [r7, #24]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d10b      	bne.n	8006202 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2204      	movs	r2, #4
 80061ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061f6:	f043 0201 	orr.w	r2, r3, #1
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	e00e      	b.n	8006220 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	689a      	ldr	r2, [r3, #8]
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	4013      	ands	r3, r2
 800620c:	2b00      	cmp	r3, #0
 800620e:	bf14      	ite	ne
 8006210:	2301      	movne	r3, #1
 8006212:	2300      	moveq	r3, #0
 8006214:	b2db      	uxtb	r3, r3
 8006216:	461a      	mov	r2, r3
 8006218:	79fb      	ldrb	r3, [r7, #7]
 800621a:	429a      	cmp	r2, r3
 800621c:	d1d6      	bne.n	80061cc <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800621e:	2300      	movs	r3, #0
}
 8006220:	4618      	mov	r0, r3
 8006222:	3710      	adds	r7, #16
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8006228:	b480      	push	{r7}
 800622a:	b085      	sub	sp, #20
 800622c:	af00      	add	r7, sp, #0
 800622e:	60f8      	str	r0, [r7, #12]
 8006230:	60b9      	str	r1, [r7, #8]
 8006232:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006238:	2b00      	cmp	r3, #0
 800623a:	d009      	beq.n	8006250 <QSPI_Config+0x28>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006242:	d005      	beq.n	8006250 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	3a01      	subs	r2, #1
 800624e:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	699b      	ldr	r3, [r3, #24]
 8006254:	2b00      	cmp	r3, #0
 8006256:	f000 80b9 	beq.w	80063cc <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	6a1b      	ldr	r3, [r3, #32]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d05f      	beq.n	8006322 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68ba      	ldr	r2, [r7, #8]
 8006268:	6892      	ldr	r2, [r2, #8]
 800626a:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	69db      	ldr	r3, [r3, #28]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d031      	beq.n	80062d8 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800627c:	431a      	orrs	r2, r3
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006282:	431a      	orrs	r2, r3
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006288:	431a      	orrs	r2, r3
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	695b      	ldr	r3, [r3, #20]
 800628e:	049b      	lsls	r3, r3, #18
 8006290:	431a      	orrs	r2, r3
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	691b      	ldr	r3, [r3, #16]
 8006296:	431a      	orrs	r2, r3
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	6a1b      	ldr	r3, [r3, #32]
 800629c:	431a      	orrs	r2, r3
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	68db      	ldr	r3, [r3, #12]
 80062a2:	431a      	orrs	r2, r3
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	69db      	ldr	r3, [r3, #28]
 80062a8:	431a      	orrs	r2, r3
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	699b      	ldr	r3, [r3, #24]
 80062ae:	431a      	orrs	r2, r3
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	ea42 0103 	orr.w	r1, r2, r3
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	430a      	orrs	r2, r1
 80062c0:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80062c8:	f000 812e 	beq.w	8006528 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	68ba      	ldr	r2, [r7, #8]
 80062d2:	6852      	ldr	r2, [r2, #4]
 80062d4:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 80062d6:	e127      	b.n	8006528 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e0:	431a      	orrs	r2, r3
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062e6:	431a      	orrs	r2, r3
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ec:	431a      	orrs	r2, r3
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	695b      	ldr	r3, [r3, #20]
 80062f2:	049b      	lsls	r3, r3, #18
 80062f4:	431a      	orrs	r2, r3
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	431a      	orrs	r2, r3
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	6a1b      	ldr	r3, [r3, #32]
 8006300:	431a      	orrs	r2, r3
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	69db      	ldr	r3, [r3, #28]
 8006306:	431a      	orrs	r2, r3
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	699b      	ldr	r3, [r3, #24]
 800630c:	431a      	orrs	r2, r3
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	ea42 0103 	orr.w	r1, r2, r3
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	430a      	orrs	r2, r1
 800631e:	615a      	str	r2, [r3, #20]
}
 8006320:	e102      	b.n	8006528 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	69db      	ldr	r3, [r3, #28]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d02e      	beq.n	8006388 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006332:	431a      	orrs	r2, r3
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006338:	431a      	orrs	r2, r3
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633e:	431a      	orrs	r2, r3
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	695b      	ldr	r3, [r3, #20]
 8006344:	049b      	lsls	r3, r3, #18
 8006346:	431a      	orrs	r2, r3
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	6a1b      	ldr	r3, [r3, #32]
 800634c:	431a      	orrs	r2, r3
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	431a      	orrs	r2, r3
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	69db      	ldr	r3, [r3, #28]
 8006358:	431a      	orrs	r2, r3
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	699b      	ldr	r3, [r3, #24]
 800635e:	431a      	orrs	r2, r3
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	ea42 0103 	orr.w	r1, r2, r3
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	430a      	orrs	r2, r1
 8006370:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006378:	f000 80d6 	beq.w	8006528 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	68ba      	ldr	r2, [r7, #8]
 8006382:	6852      	ldr	r2, [r2, #4]
 8006384:	619a      	str	r2, [r3, #24]
}
 8006386:	e0cf      	b.n	8006528 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006390:	431a      	orrs	r2, r3
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006396:	431a      	orrs	r2, r3
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639c:	431a      	orrs	r2, r3
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	695b      	ldr	r3, [r3, #20]
 80063a2:	049b      	lsls	r3, r3, #18
 80063a4:	431a      	orrs	r2, r3
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	6a1b      	ldr	r3, [r3, #32]
 80063aa:	431a      	orrs	r2, r3
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	69db      	ldr	r3, [r3, #28]
 80063b0:	431a      	orrs	r2, r3
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	699b      	ldr	r3, [r3, #24]
 80063b6:	431a      	orrs	r2, r3
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	ea42 0103 	orr.w	r1, r2, r3
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	430a      	orrs	r2, r1
 80063c8:	615a      	str	r2, [r3, #20]
}
 80063ca:	e0ad      	b.n	8006528 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	6a1b      	ldr	r3, [r3, #32]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d058      	beq.n	8006486 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	68ba      	ldr	r2, [r7, #8]
 80063da:	6892      	ldr	r2, [r2, #8]
 80063dc:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	69db      	ldr	r3, [r3, #28]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d02d      	beq.n	8006442 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ee:	431a      	orrs	r2, r3
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063f4:	431a      	orrs	r2, r3
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063fa:	431a      	orrs	r2, r3
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	695b      	ldr	r3, [r3, #20]
 8006400:	049b      	lsls	r3, r3, #18
 8006402:	431a      	orrs	r2, r3
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	691b      	ldr	r3, [r3, #16]
 8006408:	431a      	orrs	r2, r3
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	6a1b      	ldr	r3, [r3, #32]
 800640e:	431a      	orrs	r2, r3
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	431a      	orrs	r2, r3
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	69db      	ldr	r3, [r3, #28]
 800641a:	431a      	orrs	r2, r3
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	699b      	ldr	r3, [r3, #24]
 8006420:	ea42 0103 	orr.w	r1, r2, r3
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	430a      	orrs	r2, r1
 800642c:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006434:	d078      	beq.n	8006528 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	68ba      	ldr	r2, [r7, #8]
 800643c:	6852      	ldr	r2, [r2, #4]
 800643e:	619a      	str	r2, [r3, #24]
}
 8006440:	e072      	b.n	8006528 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800644a:	431a      	orrs	r2, r3
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006450:	431a      	orrs	r2, r3
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006456:	431a      	orrs	r2, r3
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	695b      	ldr	r3, [r3, #20]
 800645c:	049b      	lsls	r3, r3, #18
 800645e:	431a      	orrs	r2, r3
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	691b      	ldr	r3, [r3, #16]
 8006464:	431a      	orrs	r2, r3
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	6a1b      	ldr	r3, [r3, #32]
 800646a:	431a      	orrs	r2, r3
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	69db      	ldr	r3, [r3, #28]
 8006470:	431a      	orrs	r2, r3
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	699b      	ldr	r3, [r3, #24]
 8006476:	ea42 0103 	orr.w	r1, r2, r3
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	430a      	orrs	r2, r1
 8006482:	615a      	str	r2, [r3, #20]
}
 8006484:	e050      	b.n	8006528 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	69db      	ldr	r3, [r3, #28]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d02a      	beq.n	80064e4 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006496:	431a      	orrs	r2, r3
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800649c:	431a      	orrs	r2, r3
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a2:	431a      	orrs	r2, r3
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	695b      	ldr	r3, [r3, #20]
 80064a8:	049b      	lsls	r3, r3, #18
 80064aa:	431a      	orrs	r2, r3
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	6a1b      	ldr	r3, [r3, #32]
 80064b0:	431a      	orrs	r2, r3
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	431a      	orrs	r2, r3
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	69db      	ldr	r3, [r3, #28]
 80064bc:	431a      	orrs	r2, r3
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	699b      	ldr	r3, [r3, #24]
 80064c2:	ea42 0103 	orr.w	r1, r2, r3
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	430a      	orrs	r2, r1
 80064ce:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80064d6:	d027      	beq.n	8006528 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68ba      	ldr	r2, [r7, #8]
 80064de:	6852      	ldr	r2, [r2, #4]
 80064e0:	619a      	str	r2, [r3, #24]
}
 80064e2:	e021      	b.n	8006528 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d01d      	beq.n	8006528 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f4:	431a      	orrs	r2, r3
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064fa:	431a      	orrs	r2, r3
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006500:	431a      	orrs	r2, r3
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	695b      	ldr	r3, [r3, #20]
 8006506:	049b      	lsls	r3, r3, #18
 8006508:	431a      	orrs	r2, r3
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	6a1b      	ldr	r3, [r3, #32]
 800650e:	431a      	orrs	r2, r3
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	69db      	ldr	r3, [r3, #28]
 8006514:	431a      	orrs	r2, r3
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	699b      	ldr	r3, [r3, #24]
 800651a:	ea42 0103 	orr.w	r1, r2, r3
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	430a      	orrs	r2, r1
 8006526:	615a      	str	r2, [r3, #20]
}
 8006528:	bf00      	nop
 800652a:	3714      	adds	r7, #20
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b088      	sub	sp, #32
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d101      	bne.n	8006546 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	e3ca      	b.n	8006cdc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006546:	4b97      	ldr	r3, [pc, #604]	; (80067a4 <HAL_RCC_OscConfig+0x270>)
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	f003 030c 	and.w	r3, r3, #12
 800654e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006550:	4b94      	ldr	r3, [pc, #592]	; (80067a4 <HAL_RCC_OscConfig+0x270>)
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	f003 0303 	and.w	r3, r3, #3
 8006558:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f003 0310 	and.w	r3, r3, #16
 8006562:	2b00      	cmp	r3, #0
 8006564:	f000 80e4 	beq.w	8006730 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006568:	69bb      	ldr	r3, [r7, #24]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d007      	beq.n	800657e <HAL_RCC_OscConfig+0x4a>
 800656e:	69bb      	ldr	r3, [r7, #24]
 8006570:	2b0c      	cmp	r3, #12
 8006572:	f040 808b 	bne.w	800668c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	2b01      	cmp	r3, #1
 800657a:	f040 8087 	bne.w	800668c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800657e:	4b89      	ldr	r3, [pc, #548]	; (80067a4 <HAL_RCC_OscConfig+0x270>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f003 0302 	and.w	r3, r3, #2
 8006586:	2b00      	cmp	r3, #0
 8006588:	d005      	beq.n	8006596 <HAL_RCC_OscConfig+0x62>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	699b      	ldr	r3, [r3, #24]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d101      	bne.n	8006596 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	e3a2      	b.n	8006cdc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6a1a      	ldr	r2, [r3, #32]
 800659a:	4b82      	ldr	r3, [pc, #520]	; (80067a4 <HAL_RCC_OscConfig+0x270>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f003 0308 	and.w	r3, r3, #8
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d004      	beq.n	80065b0 <HAL_RCC_OscConfig+0x7c>
 80065a6:	4b7f      	ldr	r3, [pc, #508]	; (80067a4 <HAL_RCC_OscConfig+0x270>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80065ae:	e005      	b.n	80065bc <HAL_RCC_OscConfig+0x88>
 80065b0:	4b7c      	ldr	r3, [pc, #496]	; (80067a4 <HAL_RCC_OscConfig+0x270>)
 80065b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80065b6:	091b      	lsrs	r3, r3, #4
 80065b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80065bc:	4293      	cmp	r3, r2
 80065be:	d223      	bcs.n	8006608 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6a1b      	ldr	r3, [r3, #32]
 80065c4:	4618      	mov	r0, r3
 80065c6:	f000 fd55 	bl	8007074 <RCC_SetFlashLatencyFromMSIRange>
 80065ca:	4603      	mov	r3, r0
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d001      	beq.n	80065d4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	e383      	b.n	8006cdc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80065d4:	4b73      	ldr	r3, [pc, #460]	; (80067a4 <HAL_RCC_OscConfig+0x270>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a72      	ldr	r2, [pc, #456]	; (80067a4 <HAL_RCC_OscConfig+0x270>)
 80065da:	f043 0308 	orr.w	r3, r3, #8
 80065de:	6013      	str	r3, [r2, #0]
 80065e0:	4b70      	ldr	r3, [pc, #448]	; (80067a4 <HAL_RCC_OscConfig+0x270>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6a1b      	ldr	r3, [r3, #32]
 80065ec:	496d      	ldr	r1, [pc, #436]	; (80067a4 <HAL_RCC_OscConfig+0x270>)
 80065ee:	4313      	orrs	r3, r2
 80065f0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80065f2:	4b6c      	ldr	r3, [pc, #432]	; (80067a4 <HAL_RCC_OscConfig+0x270>)
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	69db      	ldr	r3, [r3, #28]
 80065fe:	021b      	lsls	r3, r3, #8
 8006600:	4968      	ldr	r1, [pc, #416]	; (80067a4 <HAL_RCC_OscConfig+0x270>)
 8006602:	4313      	orrs	r3, r2
 8006604:	604b      	str	r3, [r1, #4]
 8006606:	e025      	b.n	8006654 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006608:	4b66      	ldr	r3, [pc, #408]	; (80067a4 <HAL_RCC_OscConfig+0x270>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a65      	ldr	r2, [pc, #404]	; (80067a4 <HAL_RCC_OscConfig+0x270>)
 800660e:	f043 0308 	orr.w	r3, r3, #8
 8006612:	6013      	str	r3, [r2, #0]
 8006614:	4b63      	ldr	r3, [pc, #396]	; (80067a4 <HAL_RCC_OscConfig+0x270>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6a1b      	ldr	r3, [r3, #32]
 8006620:	4960      	ldr	r1, [pc, #384]	; (80067a4 <HAL_RCC_OscConfig+0x270>)
 8006622:	4313      	orrs	r3, r2
 8006624:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006626:	4b5f      	ldr	r3, [pc, #380]	; (80067a4 <HAL_RCC_OscConfig+0x270>)
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	69db      	ldr	r3, [r3, #28]
 8006632:	021b      	lsls	r3, r3, #8
 8006634:	495b      	ldr	r1, [pc, #364]	; (80067a4 <HAL_RCC_OscConfig+0x270>)
 8006636:	4313      	orrs	r3, r2
 8006638:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800663a:	69bb      	ldr	r3, [r7, #24]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d109      	bne.n	8006654 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6a1b      	ldr	r3, [r3, #32]
 8006644:	4618      	mov	r0, r3
 8006646:	f000 fd15 	bl	8007074 <RCC_SetFlashLatencyFromMSIRange>
 800664a:	4603      	mov	r3, r0
 800664c:	2b00      	cmp	r3, #0
 800664e:	d001      	beq.n	8006654 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	e343      	b.n	8006cdc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006654:	f000 fc4a 	bl	8006eec <HAL_RCC_GetSysClockFreq>
 8006658:	4602      	mov	r2, r0
 800665a:	4b52      	ldr	r3, [pc, #328]	; (80067a4 <HAL_RCC_OscConfig+0x270>)
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	091b      	lsrs	r3, r3, #4
 8006660:	f003 030f 	and.w	r3, r3, #15
 8006664:	4950      	ldr	r1, [pc, #320]	; (80067a8 <HAL_RCC_OscConfig+0x274>)
 8006666:	5ccb      	ldrb	r3, [r1, r3]
 8006668:	f003 031f 	and.w	r3, r3, #31
 800666c:	fa22 f303 	lsr.w	r3, r2, r3
 8006670:	4a4e      	ldr	r2, [pc, #312]	; (80067ac <HAL_RCC_OscConfig+0x278>)
 8006672:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006674:	4b4e      	ldr	r3, [pc, #312]	; (80067b0 <HAL_RCC_OscConfig+0x27c>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4618      	mov	r0, r3
 800667a:	f7fc fd5f 	bl	800313c <HAL_InitTick>
 800667e:	4603      	mov	r3, r0
 8006680:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006682:	7bfb      	ldrb	r3, [r7, #15]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d052      	beq.n	800672e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8006688:	7bfb      	ldrb	r3, [r7, #15]
 800668a:	e327      	b.n	8006cdc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	699b      	ldr	r3, [r3, #24]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d032      	beq.n	80066fa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006694:	4b43      	ldr	r3, [pc, #268]	; (80067a4 <HAL_RCC_OscConfig+0x270>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a42      	ldr	r2, [pc, #264]	; (80067a4 <HAL_RCC_OscConfig+0x270>)
 800669a:	f043 0301 	orr.w	r3, r3, #1
 800669e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80066a0:	f7fc fd9c 	bl	80031dc <HAL_GetTick>
 80066a4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80066a6:	e008      	b.n	80066ba <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80066a8:	f7fc fd98 	bl	80031dc <HAL_GetTick>
 80066ac:	4602      	mov	r2, r0
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	1ad3      	subs	r3, r2, r3
 80066b2:	2b02      	cmp	r3, #2
 80066b4:	d901      	bls.n	80066ba <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80066b6:	2303      	movs	r3, #3
 80066b8:	e310      	b.n	8006cdc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80066ba:	4b3a      	ldr	r3, [pc, #232]	; (80067a4 <HAL_RCC_OscConfig+0x270>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f003 0302 	and.w	r3, r3, #2
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d0f0      	beq.n	80066a8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80066c6:	4b37      	ldr	r3, [pc, #220]	; (80067a4 <HAL_RCC_OscConfig+0x270>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a36      	ldr	r2, [pc, #216]	; (80067a4 <HAL_RCC_OscConfig+0x270>)
 80066cc:	f043 0308 	orr.w	r3, r3, #8
 80066d0:	6013      	str	r3, [r2, #0]
 80066d2:	4b34      	ldr	r3, [pc, #208]	; (80067a4 <HAL_RCC_OscConfig+0x270>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6a1b      	ldr	r3, [r3, #32]
 80066de:	4931      	ldr	r1, [pc, #196]	; (80067a4 <HAL_RCC_OscConfig+0x270>)
 80066e0:	4313      	orrs	r3, r2
 80066e2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80066e4:	4b2f      	ldr	r3, [pc, #188]	; (80067a4 <HAL_RCC_OscConfig+0x270>)
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	69db      	ldr	r3, [r3, #28]
 80066f0:	021b      	lsls	r3, r3, #8
 80066f2:	492c      	ldr	r1, [pc, #176]	; (80067a4 <HAL_RCC_OscConfig+0x270>)
 80066f4:	4313      	orrs	r3, r2
 80066f6:	604b      	str	r3, [r1, #4]
 80066f8:	e01a      	b.n	8006730 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80066fa:	4b2a      	ldr	r3, [pc, #168]	; (80067a4 <HAL_RCC_OscConfig+0x270>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a29      	ldr	r2, [pc, #164]	; (80067a4 <HAL_RCC_OscConfig+0x270>)
 8006700:	f023 0301 	bic.w	r3, r3, #1
 8006704:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006706:	f7fc fd69 	bl	80031dc <HAL_GetTick>
 800670a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800670c:	e008      	b.n	8006720 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800670e:	f7fc fd65 	bl	80031dc <HAL_GetTick>
 8006712:	4602      	mov	r2, r0
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	1ad3      	subs	r3, r2, r3
 8006718:	2b02      	cmp	r3, #2
 800671a:	d901      	bls.n	8006720 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800671c:	2303      	movs	r3, #3
 800671e:	e2dd      	b.n	8006cdc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006720:	4b20      	ldr	r3, [pc, #128]	; (80067a4 <HAL_RCC_OscConfig+0x270>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f003 0302 	and.w	r3, r3, #2
 8006728:	2b00      	cmp	r3, #0
 800672a:	d1f0      	bne.n	800670e <HAL_RCC_OscConfig+0x1da>
 800672c:	e000      	b.n	8006730 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800672e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f003 0301 	and.w	r3, r3, #1
 8006738:	2b00      	cmp	r3, #0
 800673a:	d074      	beq.n	8006826 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800673c:	69bb      	ldr	r3, [r7, #24]
 800673e:	2b08      	cmp	r3, #8
 8006740:	d005      	beq.n	800674e <HAL_RCC_OscConfig+0x21a>
 8006742:	69bb      	ldr	r3, [r7, #24]
 8006744:	2b0c      	cmp	r3, #12
 8006746:	d10e      	bne.n	8006766 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	2b03      	cmp	r3, #3
 800674c:	d10b      	bne.n	8006766 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800674e:	4b15      	ldr	r3, [pc, #84]	; (80067a4 <HAL_RCC_OscConfig+0x270>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006756:	2b00      	cmp	r3, #0
 8006758:	d064      	beq.n	8006824 <HAL_RCC_OscConfig+0x2f0>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d160      	bne.n	8006824 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	e2ba      	b.n	8006cdc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800676e:	d106      	bne.n	800677e <HAL_RCC_OscConfig+0x24a>
 8006770:	4b0c      	ldr	r3, [pc, #48]	; (80067a4 <HAL_RCC_OscConfig+0x270>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a0b      	ldr	r2, [pc, #44]	; (80067a4 <HAL_RCC_OscConfig+0x270>)
 8006776:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800677a:	6013      	str	r3, [r2, #0]
 800677c:	e026      	b.n	80067cc <HAL_RCC_OscConfig+0x298>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006786:	d115      	bne.n	80067b4 <HAL_RCC_OscConfig+0x280>
 8006788:	4b06      	ldr	r3, [pc, #24]	; (80067a4 <HAL_RCC_OscConfig+0x270>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a05      	ldr	r2, [pc, #20]	; (80067a4 <HAL_RCC_OscConfig+0x270>)
 800678e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006792:	6013      	str	r3, [r2, #0]
 8006794:	4b03      	ldr	r3, [pc, #12]	; (80067a4 <HAL_RCC_OscConfig+0x270>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a02      	ldr	r2, [pc, #8]	; (80067a4 <HAL_RCC_OscConfig+0x270>)
 800679a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800679e:	6013      	str	r3, [r2, #0]
 80067a0:	e014      	b.n	80067cc <HAL_RCC_OscConfig+0x298>
 80067a2:	bf00      	nop
 80067a4:	40021000 	.word	0x40021000
 80067a8:	0800a370 	.word	0x0800a370
 80067ac:	2000009c 	.word	0x2000009c
 80067b0:	200000a0 	.word	0x200000a0
 80067b4:	4ba0      	ldr	r3, [pc, #640]	; (8006a38 <HAL_RCC_OscConfig+0x504>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a9f      	ldr	r2, [pc, #636]	; (8006a38 <HAL_RCC_OscConfig+0x504>)
 80067ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067be:	6013      	str	r3, [r2, #0]
 80067c0:	4b9d      	ldr	r3, [pc, #628]	; (8006a38 <HAL_RCC_OscConfig+0x504>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a9c      	ldr	r2, [pc, #624]	; (8006a38 <HAL_RCC_OscConfig+0x504>)
 80067c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80067ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d013      	beq.n	80067fc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067d4:	f7fc fd02 	bl	80031dc <HAL_GetTick>
 80067d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80067da:	e008      	b.n	80067ee <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80067dc:	f7fc fcfe 	bl	80031dc <HAL_GetTick>
 80067e0:	4602      	mov	r2, r0
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	1ad3      	subs	r3, r2, r3
 80067e6:	2b64      	cmp	r3, #100	; 0x64
 80067e8:	d901      	bls.n	80067ee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80067ea:	2303      	movs	r3, #3
 80067ec:	e276      	b.n	8006cdc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80067ee:	4b92      	ldr	r3, [pc, #584]	; (8006a38 <HAL_RCC_OscConfig+0x504>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d0f0      	beq.n	80067dc <HAL_RCC_OscConfig+0x2a8>
 80067fa:	e014      	b.n	8006826 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067fc:	f7fc fcee 	bl	80031dc <HAL_GetTick>
 8006800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006802:	e008      	b.n	8006816 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006804:	f7fc fcea 	bl	80031dc <HAL_GetTick>
 8006808:	4602      	mov	r2, r0
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	1ad3      	subs	r3, r2, r3
 800680e:	2b64      	cmp	r3, #100	; 0x64
 8006810:	d901      	bls.n	8006816 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006812:	2303      	movs	r3, #3
 8006814:	e262      	b.n	8006cdc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006816:	4b88      	ldr	r3, [pc, #544]	; (8006a38 <HAL_RCC_OscConfig+0x504>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800681e:	2b00      	cmp	r3, #0
 8006820:	d1f0      	bne.n	8006804 <HAL_RCC_OscConfig+0x2d0>
 8006822:	e000      	b.n	8006826 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006824:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 0302 	and.w	r3, r3, #2
 800682e:	2b00      	cmp	r3, #0
 8006830:	d060      	beq.n	80068f4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006832:	69bb      	ldr	r3, [r7, #24]
 8006834:	2b04      	cmp	r3, #4
 8006836:	d005      	beq.n	8006844 <HAL_RCC_OscConfig+0x310>
 8006838:	69bb      	ldr	r3, [r7, #24]
 800683a:	2b0c      	cmp	r3, #12
 800683c:	d119      	bne.n	8006872 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	2b02      	cmp	r3, #2
 8006842:	d116      	bne.n	8006872 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006844:	4b7c      	ldr	r3, [pc, #496]	; (8006a38 <HAL_RCC_OscConfig+0x504>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800684c:	2b00      	cmp	r3, #0
 800684e:	d005      	beq.n	800685c <HAL_RCC_OscConfig+0x328>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d101      	bne.n	800685c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	e23f      	b.n	8006cdc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800685c:	4b76      	ldr	r3, [pc, #472]	; (8006a38 <HAL_RCC_OscConfig+0x504>)
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	691b      	ldr	r3, [r3, #16]
 8006868:	061b      	lsls	r3, r3, #24
 800686a:	4973      	ldr	r1, [pc, #460]	; (8006a38 <HAL_RCC_OscConfig+0x504>)
 800686c:	4313      	orrs	r3, r2
 800686e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006870:	e040      	b.n	80068f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	68db      	ldr	r3, [r3, #12]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d023      	beq.n	80068c2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800687a:	4b6f      	ldr	r3, [pc, #444]	; (8006a38 <HAL_RCC_OscConfig+0x504>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a6e      	ldr	r2, [pc, #440]	; (8006a38 <HAL_RCC_OscConfig+0x504>)
 8006880:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006884:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006886:	f7fc fca9 	bl	80031dc <HAL_GetTick>
 800688a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800688c:	e008      	b.n	80068a0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800688e:	f7fc fca5 	bl	80031dc <HAL_GetTick>
 8006892:	4602      	mov	r2, r0
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	1ad3      	subs	r3, r2, r3
 8006898:	2b02      	cmp	r3, #2
 800689a:	d901      	bls.n	80068a0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800689c:	2303      	movs	r3, #3
 800689e:	e21d      	b.n	8006cdc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80068a0:	4b65      	ldr	r3, [pc, #404]	; (8006a38 <HAL_RCC_OscConfig+0x504>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d0f0      	beq.n	800688e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068ac:	4b62      	ldr	r3, [pc, #392]	; (8006a38 <HAL_RCC_OscConfig+0x504>)
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	691b      	ldr	r3, [r3, #16]
 80068b8:	061b      	lsls	r3, r3, #24
 80068ba:	495f      	ldr	r1, [pc, #380]	; (8006a38 <HAL_RCC_OscConfig+0x504>)
 80068bc:	4313      	orrs	r3, r2
 80068be:	604b      	str	r3, [r1, #4]
 80068c0:	e018      	b.n	80068f4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80068c2:	4b5d      	ldr	r3, [pc, #372]	; (8006a38 <HAL_RCC_OscConfig+0x504>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a5c      	ldr	r2, [pc, #368]	; (8006a38 <HAL_RCC_OscConfig+0x504>)
 80068c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068ce:	f7fc fc85 	bl	80031dc <HAL_GetTick>
 80068d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80068d4:	e008      	b.n	80068e8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068d6:	f7fc fc81 	bl	80031dc <HAL_GetTick>
 80068da:	4602      	mov	r2, r0
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	1ad3      	subs	r3, r2, r3
 80068e0:	2b02      	cmp	r3, #2
 80068e2:	d901      	bls.n	80068e8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80068e4:	2303      	movs	r3, #3
 80068e6:	e1f9      	b.n	8006cdc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80068e8:	4b53      	ldr	r3, [pc, #332]	; (8006a38 <HAL_RCC_OscConfig+0x504>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d1f0      	bne.n	80068d6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f003 0308 	and.w	r3, r3, #8
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d03c      	beq.n	800697a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	695b      	ldr	r3, [r3, #20]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d01c      	beq.n	8006942 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006908:	4b4b      	ldr	r3, [pc, #300]	; (8006a38 <HAL_RCC_OscConfig+0x504>)
 800690a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800690e:	4a4a      	ldr	r2, [pc, #296]	; (8006a38 <HAL_RCC_OscConfig+0x504>)
 8006910:	f043 0301 	orr.w	r3, r3, #1
 8006914:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006918:	f7fc fc60 	bl	80031dc <HAL_GetTick>
 800691c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800691e:	e008      	b.n	8006932 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006920:	f7fc fc5c 	bl	80031dc <HAL_GetTick>
 8006924:	4602      	mov	r2, r0
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	1ad3      	subs	r3, r2, r3
 800692a:	2b02      	cmp	r3, #2
 800692c:	d901      	bls.n	8006932 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800692e:	2303      	movs	r3, #3
 8006930:	e1d4      	b.n	8006cdc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006932:	4b41      	ldr	r3, [pc, #260]	; (8006a38 <HAL_RCC_OscConfig+0x504>)
 8006934:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006938:	f003 0302 	and.w	r3, r3, #2
 800693c:	2b00      	cmp	r3, #0
 800693e:	d0ef      	beq.n	8006920 <HAL_RCC_OscConfig+0x3ec>
 8006940:	e01b      	b.n	800697a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006942:	4b3d      	ldr	r3, [pc, #244]	; (8006a38 <HAL_RCC_OscConfig+0x504>)
 8006944:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006948:	4a3b      	ldr	r2, [pc, #236]	; (8006a38 <HAL_RCC_OscConfig+0x504>)
 800694a:	f023 0301 	bic.w	r3, r3, #1
 800694e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006952:	f7fc fc43 	bl	80031dc <HAL_GetTick>
 8006956:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006958:	e008      	b.n	800696c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800695a:	f7fc fc3f 	bl	80031dc <HAL_GetTick>
 800695e:	4602      	mov	r2, r0
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	1ad3      	subs	r3, r2, r3
 8006964:	2b02      	cmp	r3, #2
 8006966:	d901      	bls.n	800696c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006968:	2303      	movs	r3, #3
 800696a:	e1b7      	b.n	8006cdc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800696c:	4b32      	ldr	r3, [pc, #200]	; (8006a38 <HAL_RCC_OscConfig+0x504>)
 800696e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006972:	f003 0302 	and.w	r3, r3, #2
 8006976:	2b00      	cmp	r3, #0
 8006978:	d1ef      	bne.n	800695a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f003 0304 	and.w	r3, r3, #4
 8006982:	2b00      	cmp	r3, #0
 8006984:	f000 80a6 	beq.w	8006ad4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006988:	2300      	movs	r3, #0
 800698a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800698c:	4b2a      	ldr	r3, [pc, #168]	; (8006a38 <HAL_RCC_OscConfig+0x504>)
 800698e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006994:	2b00      	cmp	r3, #0
 8006996:	d10d      	bne.n	80069b4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006998:	4b27      	ldr	r3, [pc, #156]	; (8006a38 <HAL_RCC_OscConfig+0x504>)
 800699a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800699c:	4a26      	ldr	r2, [pc, #152]	; (8006a38 <HAL_RCC_OscConfig+0x504>)
 800699e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069a2:	6593      	str	r3, [r2, #88]	; 0x58
 80069a4:	4b24      	ldr	r3, [pc, #144]	; (8006a38 <HAL_RCC_OscConfig+0x504>)
 80069a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069ac:	60bb      	str	r3, [r7, #8]
 80069ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80069b0:	2301      	movs	r3, #1
 80069b2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80069b4:	4b21      	ldr	r3, [pc, #132]	; (8006a3c <HAL_RCC_OscConfig+0x508>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d118      	bne.n	80069f2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80069c0:	4b1e      	ldr	r3, [pc, #120]	; (8006a3c <HAL_RCC_OscConfig+0x508>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a1d      	ldr	r2, [pc, #116]	; (8006a3c <HAL_RCC_OscConfig+0x508>)
 80069c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80069cc:	f7fc fc06 	bl	80031dc <HAL_GetTick>
 80069d0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80069d2:	e008      	b.n	80069e6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069d4:	f7fc fc02 	bl	80031dc <HAL_GetTick>
 80069d8:	4602      	mov	r2, r0
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	1ad3      	subs	r3, r2, r3
 80069de:	2b02      	cmp	r3, #2
 80069e0:	d901      	bls.n	80069e6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80069e2:	2303      	movs	r3, #3
 80069e4:	e17a      	b.n	8006cdc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80069e6:	4b15      	ldr	r3, [pc, #84]	; (8006a3c <HAL_RCC_OscConfig+0x508>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d0f0      	beq.n	80069d4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d108      	bne.n	8006a0c <HAL_RCC_OscConfig+0x4d8>
 80069fa:	4b0f      	ldr	r3, [pc, #60]	; (8006a38 <HAL_RCC_OscConfig+0x504>)
 80069fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a00:	4a0d      	ldr	r2, [pc, #52]	; (8006a38 <HAL_RCC_OscConfig+0x504>)
 8006a02:	f043 0301 	orr.w	r3, r3, #1
 8006a06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006a0a:	e029      	b.n	8006a60 <HAL_RCC_OscConfig+0x52c>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	2b05      	cmp	r3, #5
 8006a12:	d115      	bne.n	8006a40 <HAL_RCC_OscConfig+0x50c>
 8006a14:	4b08      	ldr	r3, [pc, #32]	; (8006a38 <HAL_RCC_OscConfig+0x504>)
 8006a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a1a:	4a07      	ldr	r2, [pc, #28]	; (8006a38 <HAL_RCC_OscConfig+0x504>)
 8006a1c:	f043 0304 	orr.w	r3, r3, #4
 8006a20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006a24:	4b04      	ldr	r3, [pc, #16]	; (8006a38 <HAL_RCC_OscConfig+0x504>)
 8006a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a2a:	4a03      	ldr	r2, [pc, #12]	; (8006a38 <HAL_RCC_OscConfig+0x504>)
 8006a2c:	f043 0301 	orr.w	r3, r3, #1
 8006a30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006a34:	e014      	b.n	8006a60 <HAL_RCC_OscConfig+0x52c>
 8006a36:	bf00      	nop
 8006a38:	40021000 	.word	0x40021000
 8006a3c:	40007000 	.word	0x40007000
 8006a40:	4b9c      	ldr	r3, [pc, #624]	; (8006cb4 <HAL_RCC_OscConfig+0x780>)
 8006a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a46:	4a9b      	ldr	r2, [pc, #620]	; (8006cb4 <HAL_RCC_OscConfig+0x780>)
 8006a48:	f023 0301 	bic.w	r3, r3, #1
 8006a4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006a50:	4b98      	ldr	r3, [pc, #608]	; (8006cb4 <HAL_RCC_OscConfig+0x780>)
 8006a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a56:	4a97      	ldr	r2, [pc, #604]	; (8006cb4 <HAL_RCC_OscConfig+0x780>)
 8006a58:	f023 0304 	bic.w	r3, r3, #4
 8006a5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	689b      	ldr	r3, [r3, #8]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d016      	beq.n	8006a96 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a68:	f7fc fbb8 	bl	80031dc <HAL_GetTick>
 8006a6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a6e:	e00a      	b.n	8006a86 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a70:	f7fc fbb4 	bl	80031dc <HAL_GetTick>
 8006a74:	4602      	mov	r2, r0
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	1ad3      	subs	r3, r2, r3
 8006a7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d901      	bls.n	8006a86 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006a82:	2303      	movs	r3, #3
 8006a84:	e12a      	b.n	8006cdc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a86:	4b8b      	ldr	r3, [pc, #556]	; (8006cb4 <HAL_RCC_OscConfig+0x780>)
 8006a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a8c:	f003 0302 	and.w	r3, r3, #2
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d0ed      	beq.n	8006a70 <HAL_RCC_OscConfig+0x53c>
 8006a94:	e015      	b.n	8006ac2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a96:	f7fc fba1 	bl	80031dc <HAL_GetTick>
 8006a9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006a9c:	e00a      	b.n	8006ab4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a9e:	f7fc fb9d 	bl	80031dc <HAL_GetTick>
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	1ad3      	subs	r3, r2, r3
 8006aa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d901      	bls.n	8006ab4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006ab0:	2303      	movs	r3, #3
 8006ab2:	e113      	b.n	8006cdc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006ab4:	4b7f      	ldr	r3, [pc, #508]	; (8006cb4 <HAL_RCC_OscConfig+0x780>)
 8006ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aba:	f003 0302 	and.w	r3, r3, #2
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d1ed      	bne.n	8006a9e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006ac2:	7ffb      	ldrb	r3, [r7, #31]
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d105      	bne.n	8006ad4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ac8:	4b7a      	ldr	r3, [pc, #488]	; (8006cb4 <HAL_RCC_OscConfig+0x780>)
 8006aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006acc:	4a79      	ldr	r2, [pc, #484]	; (8006cb4 <HAL_RCC_OscConfig+0x780>)
 8006ace:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ad2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	f000 80fe 	beq.w	8006cda <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae2:	2b02      	cmp	r3, #2
 8006ae4:	f040 80d0 	bne.w	8006c88 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006ae8:	4b72      	ldr	r3, [pc, #456]	; (8006cb4 <HAL_RCC_OscConfig+0x780>)
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	f003 0203 	and.w	r2, r3, #3
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d130      	bne.n	8006b5e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b06:	3b01      	subs	r3, #1
 8006b08:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d127      	bne.n	8006b5e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b18:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d11f      	bne.n	8006b5e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006b28:	2a07      	cmp	r2, #7
 8006b2a:	bf14      	ite	ne
 8006b2c:	2201      	movne	r2, #1
 8006b2e:	2200      	moveq	r2, #0
 8006b30:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d113      	bne.n	8006b5e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b40:	085b      	lsrs	r3, r3, #1
 8006b42:	3b01      	subs	r3, #1
 8006b44:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d109      	bne.n	8006b5e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b54:	085b      	lsrs	r3, r3, #1
 8006b56:	3b01      	subs	r3, #1
 8006b58:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d06e      	beq.n	8006c3c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006b5e:	69bb      	ldr	r3, [r7, #24]
 8006b60:	2b0c      	cmp	r3, #12
 8006b62:	d069      	beq.n	8006c38 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006b64:	4b53      	ldr	r3, [pc, #332]	; (8006cb4 <HAL_RCC_OscConfig+0x780>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d105      	bne.n	8006b7c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006b70:	4b50      	ldr	r3, [pc, #320]	; (8006cb4 <HAL_RCC_OscConfig+0x780>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d001      	beq.n	8006b80 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e0ad      	b.n	8006cdc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006b80:	4b4c      	ldr	r3, [pc, #304]	; (8006cb4 <HAL_RCC_OscConfig+0x780>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a4b      	ldr	r2, [pc, #300]	; (8006cb4 <HAL_RCC_OscConfig+0x780>)
 8006b86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b8a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006b8c:	f7fc fb26 	bl	80031dc <HAL_GetTick>
 8006b90:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b92:	e008      	b.n	8006ba6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b94:	f7fc fb22 	bl	80031dc <HAL_GetTick>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	1ad3      	subs	r3, r2, r3
 8006b9e:	2b02      	cmp	r3, #2
 8006ba0:	d901      	bls.n	8006ba6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8006ba2:	2303      	movs	r3, #3
 8006ba4:	e09a      	b.n	8006cdc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ba6:	4b43      	ldr	r3, [pc, #268]	; (8006cb4 <HAL_RCC_OscConfig+0x780>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d1f0      	bne.n	8006b94 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006bb2:	4b40      	ldr	r3, [pc, #256]	; (8006cb4 <HAL_RCC_OscConfig+0x780>)
 8006bb4:	68da      	ldr	r2, [r3, #12]
 8006bb6:	4b40      	ldr	r3, [pc, #256]	; (8006cb8 <HAL_RCC_OscConfig+0x784>)
 8006bb8:	4013      	ands	r3, r2
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006bc2:	3a01      	subs	r2, #1
 8006bc4:	0112      	lsls	r2, r2, #4
 8006bc6:	4311      	orrs	r1, r2
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006bcc:	0212      	lsls	r2, r2, #8
 8006bce:	4311      	orrs	r1, r2
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006bd4:	0852      	lsrs	r2, r2, #1
 8006bd6:	3a01      	subs	r2, #1
 8006bd8:	0552      	lsls	r2, r2, #21
 8006bda:	4311      	orrs	r1, r2
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006be0:	0852      	lsrs	r2, r2, #1
 8006be2:	3a01      	subs	r2, #1
 8006be4:	0652      	lsls	r2, r2, #25
 8006be6:	4311      	orrs	r1, r2
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006bec:	0912      	lsrs	r2, r2, #4
 8006bee:	0452      	lsls	r2, r2, #17
 8006bf0:	430a      	orrs	r2, r1
 8006bf2:	4930      	ldr	r1, [pc, #192]	; (8006cb4 <HAL_RCC_OscConfig+0x780>)
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006bf8:	4b2e      	ldr	r3, [pc, #184]	; (8006cb4 <HAL_RCC_OscConfig+0x780>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a2d      	ldr	r2, [pc, #180]	; (8006cb4 <HAL_RCC_OscConfig+0x780>)
 8006bfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c02:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006c04:	4b2b      	ldr	r3, [pc, #172]	; (8006cb4 <HAL_RCC_OscConfig+0x780>)
 8006c06:	68db      	ldr	r3, [r3, #12]
 8006c08:	4a2a      	ldr	r2, [pc, #168]	; (8006cb4 <HAL_RCC_OscConfig+0x780>)
 8006c0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c0e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006c10:	f7fc fae4 	bl	80031dc <HAL_GetTick>
 8006c14:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c16:	e008      	b.n	8006c2a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c18:	f7fc fae0 	bl	80031dc <HAL_GetTick>
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	1ad3      	subs	r3, r2, r3
 8006c22:	2b02      	cmp	r3, #2
 8006c24:	d901      	bls.n	8006c2a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8006c26:	2303      	movs	r3, #3
 8006c28:	e058      	b.n	8006cdc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c2a:	4b22      	ldr	r3, [pc, #136]	; (8006cb4 <HAL_RCC_OscConfig+0x780>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d0f0      	beq.n	8006c18 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006c36:	e050      	b.n	8006cda <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	e04f      	b.n	8006cdc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c3c:	4b1d      	ldr	r3, [pc, #116]	; (8006cb4 <HAL_RCC_OscConfig+0x780>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d148      	bne.n	8006cda <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006c48:	4b1a      	ldr	r3, [pc, #104]	; (8006cb4 <HAL_RCC_OscConfig+0x780>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a19      	ldr	r2, [pc, #100]	; (8006cb4 <HAL_RCC_OscConfig+0x780>)
 8006c4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c52:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006c54:	4b17      	ldr	r3, [pc, #92]	; (8006cb4 <HAL_RCC_OscConfig+0x780>)
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	4a16      	ldr	r2, [pc, #88]	; (8006cb4 <HAL_RCC_OscConfig+0x780>)
 8006c5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c5e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006c60:	f7fc fabc 	bl	80031dc <HAL_GetTick>
 8006c64:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c66:	e008      	b.n	8006c7a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c68:	f7fc fab8 	bl	80031dc <HAL_GetTick>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	1ad3      	subs	r3, r2, r3
 8006c72:	2b02      	cmp	r3, #2
 8006c74:	d901      	bls.n	8006c7a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8006c76:	2303      	movs	r3, #3
 8006c78:	e030      	b.n	8006cdc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c7a:	4b0e      	ldr	r3, [pc, #56]	; (8006cb4 <HAL_RCC_OscConfig+0x780>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d0f0      	beq.n	8006c68 <HAL_RCC_OscConfig+0x734>
 8006c86:	e028      	b.n	8006cda <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006c88:	69bb      	ldr	r3, [r7, #24]
 8006c8a:	2b0c      	cmp	r3, #12
 8006c8c:	d023      	beq.n	8006cd6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c8e:	4b09      	ldr	r3, [pc, #36]	; (8006cb4 <HAL_RCC_OscConfig+0x780>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a08      	ldr	r2, [pc, #32]	; (8006cb4 <HAL_RCC_OscConfig+0x780>)
 8006c94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c9a:	f7fc fa9f 	bl	80031dc <HAL_GetTick>
 8006c9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ca0:	e00c      	b.n	8006cbc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ca2:	f7fc fa9b 	bl	80031dc <HAL_GetTick>
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	1ad3      	subs	r3, r2, r3
 8006cac:	2b02      	cmp	r3, #2
 8006cae:	d905      	bls.n	8006cbc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8006cb0:	2303      	movs	r3, #3
 8006cb2:	e013      	b.n	8006cdc <HAL_RCC_OscConfig+0x7a8>
 8006cb4:	40021000 	.word	0x40021000
 8006cb8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006cbc:	4b09      	ldr	r3, [pc, #36]	; (8006ce4 <HAL_RCC_OscConfig+0x7b0>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d1ec      	bne.n	8006ca2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006cc8:	4b06      	ldr	r3, [pc, #24]	; (8006ce4 <HAL_RCC_OscConfig+0x7b0>)
 8006cca:	68da      	ldr	r2, [r3, #12]
 8006ccc:	4905      	ldr	r1, [pc, #20]	; (8006ce4 <HAL_RCC_OscConfig+0x7b0>)
 8006cce:	4b06      	ldr	r3, [pc, #24]	; (8006ce8 <HAL_RCC_OscConfig+0x7b4>)
 8006cd0:	4013      	ands	r3, r2
 8006cd2:	60cb      	str	r3, [r1, #12]
 8006cd4:	e001      	b.n	8006cda <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	e000      	b.n	8006cdc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8006cda:	2300      	movs	r3, #0
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3720      	adds	r7, #32
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	40021000 	.word	0x40021000
 8006ce8:	feeefffc 	.word	0xfeeefffc

08006cec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b084      	sub	sp, #16
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d101      	bne.n	8006d00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	e0e7      	b.n	8006ed0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006d00:	4b75      	ldr	r3, [pc, #468]	; (8006ed8 <HAL_RCC_ClockConfig+0x1ec>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f003 0307 	and.w	r3, r3, #7
 8006d08:	683a      	ldr	r2, [r7, #0]
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d910      	bls.n	8006d30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d0e:	4b72      	ldr	r3, [pc, #456]	; (8006ed8 <HAL_RCC_ClockConfig+0x1ec>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f023 0207 	bic.w	r2, r3, #7
 8006d16:	4970      	ldr	r1, [pc, #448]	; (8006ed8 <HAL_RCC_ClockConfig+0x1ec>)
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d1e:	4b6e      	ldr	r3, [pc, #440]	; (8006ed8 <HAL_RCC_ClockConfig+0x1ec>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f003 0307 	and.w	r3, r3, #7
 8006d26:	683a      	ldr	r2, [r7, #0]
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d001      	beq.n	8006d30 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	e0cf      	b.n	8006ed0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f003 0302 	and.w	r3, r3, #2
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d010      	beq.n	8006d5e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	689a      	ldr	r2, [r3, #8]
 8006d40:	4b66      	ldr	r3, [pc, #408]	; (8006edc <HAL_RCC_ClockConfig+0x1f0>)
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d908      	bls.n	8006d5e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d4c:	4b63      	ldr	r3, [pc, #396]	; (8006edc <HAL_RCC_ClockConfig+0x1f0>)
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	4960      	ldr	r1, [pc, #384]	; (8006edc <HAL_RCC_ClockConfig+0x1f0>)
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f003 0301 	and.w	r3, r3, #1
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d04c      	beq.n	8006e04 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	2b03      	cmp	r3, #3
 8006d70:	d107      	bne.n	8006d82 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d72:	4b5a      	ldr	r3, [pc, #360]	; (8006edc <HAL_RCC_ClockConfig+0x1f0>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d121      	bne.n	8006dc2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e0a6      	b.n	8006ed0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	2b02      	cmp	r3, #2
 8006d88:	d107      	bne.n	8006d9a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006d8a:	4b54      	ldr	r3, [pc, #336]	; (8006edc <HAL_RCC_ClockConfig+0x1f0>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d115      	bne.n	8006dc2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	e09a      	b.n	8006ed0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d107      	bne.n	8006db2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006da2:	4b4e      	ldr	r3, [pc, #312]	; (8006edc <HAL_RCC_ClockConfig+0x1f0>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f003 0302 	and.w	r3, r3, #2
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d109      	bne.n	8006dc2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	e08e      	b.n	8006ed0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006db2:	4b4a      	ldr	r3, [pc, #296]	; (8006edc <HAL_RCC_ClockConfig+0x1f0>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d101      	bne.n	8006dc2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e086      	b.n	8006ed0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006dc2:	4b46      	ldr	r3, [pc, #280]	; (8006edc <HAL_RCC_ClockConfig+0x1f0>)
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	f023 0203 	bic.w	r2, r3, #3
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	4943      	ldr	r1, [pc, #268]	; (8006edc <HAL_RCC_ClockConfig+0x1f0>)
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006dd4:	f7fc fa02 	bl	80031dc <HAL_GetTick>
 8006dd8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dda:	e00a      	b.n	8006df2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ddc:	f7fc f9fe 	bl	80031dc <HAL_GetTick>
 8006de0:	4602      	mov	r2, r0
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	1ad3      	subs	r3, r2, r3
 8006de6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d901      	bls.n	8006df2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006dee:	2303      	movs	r3, #3
 8006df0:	e06e      	b.n	8006ed0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006df2:	4b3a      	ldr	r3, [pc, #232]	; (8006edc <HAL_RCC_ClockConfig+0x1f0>)
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	f003 020c 	and.w	r2, r3, #12
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d1eb      	bne.n	8006ddc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f003 0302 	and.w	r3, r3, #2
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d010      	beq.n	8006e32 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	689a      	ldr	r2, [r3, #8]
 8006e14:	4b31      	ldr	r3, [pc, #196]	; (8006edc <HAL_RCC_ClockConfig+0x1f0>)
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d208      	bcs.n	8006e32 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e20:	4b2e      	ldr	r3, [pc, #184]	; (8006edc <HAL_RCC_ClockConfig+0x1f0>)
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	492b      	ldr	r1, [pc, #172]	; (8006edc <HAL_RCC_ClockConfig+0x1f0>)
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006e32:	4b29      	ldr	r3, [pc, #164]	; (8006ed8 <HAL_RCC_ClockConfig+0x1ec>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f003 0307 	and.w	r3, r3, #7
 8006e3a:	683a      	ldr	r2, [r7, #0]
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d210      	bcs.n	8006e62 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e40:	4b25      	ldr	r3, [pc, #148]	; (8006ed8 <HAL_RCC_ClockConfig+0x1ec>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f023 0207 	bic.w	r2, r3, #7
 8006e48:	4923      	ldr	r1, [pc, #140]	; (8006ed8 <HAL_RCC_ClockConfig+0x1ec>)
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e50:	4b21      	ldr	r3, [pc, #132]	; (8006ed8 <HAL_RCC_ClockConfig+0x1ec>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f003 0307 	and.w	r3, r3, #7
 8006e58:	683a      	ldr	r2, [r7, #0]
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d001      	beq.n	8006e62 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e036      	b.n	8006ed0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f003 0304 	and.w	r3, r3, #4
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d008      	beq.n	8006e80 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e6e:	4b1b      	ldr	r3, [pc, #108]	; (8006edc <HAL_RCC_ClockConfig+0x1f0>)
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	68db      	ldr	r3, [r3, #12]
 8006e7a:	4918      	ldr	r1, [pc, #96]	; (8006edc <HAL_RCC_ClockConfig+0x1f0>)
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f003 0308 	and.w	r3, r3, #8
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d009      	beq.n	8006ea0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006e8c:	4b13      	ldr	r3, [pc, #76]	; (8006edc <HAL_RCC_ClockConfig+0x1f0>)
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	691b      	ldr	r3, [r3, #16]
 8006e98:	00db      	lsls	r3, r3, #3
 8006e9a:	4910      	ldr	r1, [pc, #64]	; (8006edc <HAL_RCC_ClockConfig+0x1f0>)
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006ea0:	f000 f824 	bl	8006eec <HAL_RCC_GetSysClockFreq>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	4b0d      	ldr	r3, [pc, #52]	; (8006edc <HAL_RCC_ClockConfig+0x1f0>)
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	091b      	lsrs	r3, r3, #4
 8006eac:	f003 030f 	and.w	r3, r3, #15
 8006eb0:	490b      	ldr	r1, [pc, #44]	; (8006ee0 <HAL_RCC_ClockConfig+0x1f4>)
 8006eb2:	5ccb      	ldrb	r3, [r1, r3]
 8006eb4:	f003 031f 	and.w	r3, r3, #31
 8006eb8:	fa22 f303 	lsr.w	r3, r2, r3
 8006ebc:	4a09      	ldr	r2, [pc, #36]	; (8006ee4 <HAL_RCC_ClockConfig+0x1f8>)
 8006ebe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006ec0:	4b09      	ldr	r3, [pc, #36]	; (8006ee8 <HAL_RCC_ClockConfig+0x1fc>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f7fc f939 	bl	800313c <HAL_InitTick>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	72fb      	strb	r3, [r7, #11]

  return status;
 8006ece:	7afb      	ldrb	r3, [r7, #11]
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3710      	adds	r7, #16
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}
 8006ed8:	40022000 	.word	0x40022000
 8006edc:	40021000 	.word	0x40021000
 8006ee0:	0800a370 	.word	0x0800a370
 8006ee4:	2000009c 	.word	0x2000009c
 8006ee8:	200000a0 	.word	0x200000a0

08006eec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b089      	sub	sp, #36	; 0x24
 8006ef0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	61fb      	str	r3, [r7, #28]
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006efa:	4b3e      	ldr	r3, [pc, #248]	; (8006ff4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	f003 030c 	and.w	r3, r3, #12
 8006f02:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006f04:	4b3b      	ldr	r3, [pc, #236]	; (8006ff4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006f06:	68db      	ldr	r3, [r3, #12]
 8006f08:	f003 0303 	and.w	r3, r3, #3
 8006f0c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d005      	beq.n	8006f20 <HAL_RCC_GetSysClockFreq+0x34>
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	2b0c      	cmp	r3, #12
 8006f18:	d121      	bne.n	8006f5e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d11e      	bne.n	8006f5e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006f20:	4b34      	ldr	r3, [pc, #208]	; (8006ff4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f003 0308 	and.w	r3, r3, #8
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d107      	bne.n	8006f3c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006f2c:	4b31      	ldr	r3, [pc, #196]	; (8006ff4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006f2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f32:	0a1b      	lsrs	r3, r3, #8
 8006f34:	f003 030f 	and.w	r3, r3, #15
 8006f38:	61fb      	str	r3, [r7, #28]
 8006f3a:	e005      	b.n	8006f48 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006f3c:	4b2d      	ldr	r3, [pc, #180]	; (8006ff4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	091b      	lsrs	r3, r3, #4
 8006f42:	f003 030f 	and.w	r3, r3, #15
 8006f46:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006f48:	4a2b      	ldr	r2, [pc, #172]	; (8006ff8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006f4a:	69fb      	ldr	r3, [r7, #28]
 8006f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f50:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d10d      	bne.n	8006f74 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006f58:	69fb      	ldr	r3, [r7, #28]
 8006f5a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006f5c:	e00a      	b.n	8006f74 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	2b04      	cmp	r3, #4
 8006f62:	d102      	bne.n	8006f6a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006f64:	4b25      	ldr	r3, [pc, #148]	; (8006ffc <HAL_RCC_GetSysClockFreq+0x110>)
 8006f66:	61bb      	str	r3, [r7, #24]
 8006f68:	e004      	b.n	8006f74 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	2b08      	cmp	r3, #8
 8006f6e:	d101      	bne.n	8006f74 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006f70:	4b23      	ldr	r3, [pc, #140]	; (8007000 <HAL_RCC_GetSysClockFreq+0x114>)
 8006f72:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	2b0c      	cmp	r3, #12
 8006f78:	d134      	bne.n	8006fe4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006f7a:	4b1e      	ldr	r3, [pc, #120]	; (8006ff4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006f7c:	68db      	ldr	r3, [r3, #12]
 8006f7e:	f003 0303 	and.w	r3, r3, #3
 8006f82:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	2b02      	cmp	r3, #2
 8006f88:	d003      	beq.n	8006f92 <HAL_RCC_GetSysClockFreq+0xa6>
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	2b03      	cmp	r3, #3
 8006f8e:	d003      	beq.n	8006f98 <HAL_RCC_GetSysClockFreq+0xac>
 8006f90:	e005      	b.n	8006f9e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006f92:	4b1a      	ldr	r3, [pc, #104]	; (8006ffc <HAL_RCC_GetSysClockFreq+0x110>)
 8006f94:	617b      	str	r3, [r7, #20]
      break;
 8006f96:	e005      	b.n	8006fa4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006f98:	4b19      	ldr	r3, [pc, #100]	; (8007000 <HAL_RCC_GetSysClockFreq+0x114>)
 8006f9a:	617b      	str	r3, [r7, #20]
      break;
 8006f9c:	e002      	b.n	8006fa4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006f9e:	69fb      	ldr	r3, [r7, #28]
 8006fa0:	617b      	str	r3, [r7, #20]
      break;
 8006fa2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006fa4:	4b13      	ldr	r3, [pc, #76]	; (8006ff4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006fa6:	68db      	ldr	r3, [r3, #12]
 8006fa8:	091b      	lsrs	r3, r3, #4
 8006faa:	f003 0307 	and.w	r3, r3, #7
 8006fae:	3301      	adds	r3, #1
 8006fb0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006fb2:	4b10      	ldr	r3, [pc, #64]	; (8006ff4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	0a1b      	lsrs	r3, r3, #8
 8006fb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fbc:	697a      	ldr	r2, [r7, #20]
 8006fbe:	fb03 f202 	mul.w	r2, r3, r2
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fc8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006fca:	4b0a      	ldr	r3, [pc, #40]	; (8006ff4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	0e5b      	lsrs	r3, r3, #25
 8006fd0:	f003 0303 	and.w	r3, r3, #3
 8006fd4:	3301      	adds	r3, #1
 8006fd6:	005b      	lsls	r3, r3, #1
 8006fd8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006fda:	697a      	ldr	r2, [r7, #20]
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fe2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006fe4:	69bb      	ldr	r3, [r7, #24]
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3724      	adds	r7, #36	; 0x24
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr
 8006ff2:	bf00      	nop
 8006ff4:	40021000 	.word	0x40021000
 8006ff8:	0800a388 	.word	0x0800a388
 8006ffc:	00f42400 	.word	0x00f42400
 8007000:	007a1200 	.word	0x007a1200

08007004 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007004:	b480      	push	{r7}
 8007006:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007008:	4b03      	ldr	r3, [pc, #12]	; (8007018 <HAL_RCC_GetHCLKFreq+0x14>)
 800700a:	681b      	ldr	r3, [r3, #0]
}
 800700c:	4618      	mov	r0, r3
 800700e:	46bd      	mov	sp, r7
 8007010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007014:	4770      	bx	lr
 8007016:	bf00      	nop
 8007018:	2000009c 	.word	0x2000009c

0800701c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007020:	f7ff fff0 	bl	8007004 <HAL_RCC_GetHCLKFreq>
 8007024:	4602      	mov	r2, r0
 8007026:	4b06      	ldr	r3, [pc, #24]	; (8007040 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	0a1b      	lsrs	r3, r3, #8
 800702c:	f003 0307 	and.w	r3, r3, #7
 8007030:	4904      	ldr	r1, [pc, #16]	; (8007044 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007032:	5ccb      	ldrb	r3, [r1, r3]
 8007034:	f003 031f 	and.w	r3, r3, #31
 8007038:	fa22 f303 	lsr.w	r3, r2, r3
}
 800703c:	4618      	mov	r0, r3
 800703e:	bd80      	pop	{r7, pc}
 8007040:	40021000 	.word	0x40021000
 8007044:	0800a380 	.word	0x0800a380

08007048 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800704c:	f7ff ffda 	bl	8007004 <HAL_RCC_GetHCLKFreq>
 8007050:	4602      	mov	r2, r0
 8007052:	4b06      	ldr	r3, [pc, #24]	; (800706c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	0adb      	lsrs	r3, r3, #11
 8007058:	f003 0307 	and.w	r3, r3, #7
 800705c:	4904      	ldr	r1, [pc, #16]	; (8007070 <HAL_RCC_GetPCLK2Freq+0x28>)
 800705e:	5ccb      	ldrb	r3, [r1, r3]
 8007060:	f003 031f 	and.w	r3, r3, #31
 8007064:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007068:	4618      	mov	r0, r3
 800706a:	bd80      	pop	{r7, pc}
 800706c:	40021000 	.word	0x40021000
 8007070:	0800a380 	.word	0x0800a380

08007074 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b086      	sub	sp, #24
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800707c:	2300      	movs	r3, #0
 800707e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007080:	4b2a      	ldr	r3, [pc, #168]	; (800712c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007088:	2b00      	cmp	r3, #0
 800708a:	d003      	beq.n	8007094 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800708c:	f7fe fd02 	bl	8005a94 <HAL_PWREx_GetVoltageRange>
 8007090:	6178      	str	r0, [r7, #20]
 8007092:	e014      	b.n	80070be <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007094:	4b25      	ldr	r3, [pc, #148]	; (800712c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007098:	4a24      	ldr	r2, [pc, #144]	; (800712c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800709a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800709e:	6593      	str	r3, [r2, #88]	; 0x58
 80070a0:	4b22      	ldr	r3, [pc, #136]	; (800712c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80070a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070a8:	60fb      	str	r3, [r7, #12]
 80070aa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80070ac:	f7fe fcf2 	bl	8005a94 <HAL_PWREx_GetVoltageRange>
 80070b0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80070b2:	4b1e      	ldr	r3, [pc, #120]	; (800712c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80070b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070b6:	4a1d      	ldr	r2, [pc, #116]	; (800712c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80070b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070bc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070c4:	d10b      	bne.n	80070de <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2b80      	cmp	r3, #128	; 0x80
 80070ca:	d919      	bls.n	8007100 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2ba0      	cmp	r3, #160	; 0xa0
 80070d0:	d902      	bls.n	80070d8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80070d2:	2302      	movs	r3, #2
 80070d4:	613b      	str	r3, [r7, #16]
 80070d6:	e013      	b.n	8007100 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80070d8:	2301      	movs	r3, #1
 80070da:	613b      	str	r3, [r7, #16]
 80070dc:	e010      	b.n	8007100 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2b80      	cmp	r3, #128	; 0x80
 80070e2:	d902      	bls.n	80070ea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80070e4:	2303      	movs	r3, #3
 80070e6:	613b      	str	r3, [r7, #16]
 80070e8:	e00a      	b.n	8007100 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2b80      	cmp	r3, #128	; 0x80
 80070ee:	d102      	bne.n	80070f6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80070f0:	2302      	movs	r3, #2
 80070f2:	613b      	str	r3, [r7, #16]
 80070f4:	e004      	b.n	8007100 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2b70      	cmp	r3, #112	; 0x70
 80070fa:	d101      	bne.n	8007100 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80070fc:	2301      	movs	r3, #1
 80070fe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007100:	4b0b      	ldr	r3, [pc, #44]	; (8007130 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f023 0207 	bic.w	r2, r3, #7
 8007108:	4909      	ldr	r1, [pc, #36]	; (8007130 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	4313      	orrs	r3, r2
 800710e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007110:	4b07      	ldr	r3, [pc, #28]	; (8007130 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f003 0307 	and.w	r3, r3, #7
 8007118:	693a      	ldr	r2, [r7, #16]
 800711a:	429a      	cmp	r2, r3
 800711c:	d001      	beq.n	8007122 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800711e:	2301      	movs	r3, #1
 8007120:	e000      	b.n	8007124 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007122:	2300      	movs	r3, #0
}
 8007124:	4618      	mov	r0, r3
 8007126:	3718      	adds	r7, #24
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}
 800712c:	40021000 	.word	0x40021000
 8007130:	40022000 	.word	0x40022000

08007134 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b086      	sub	sp, #24
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800713c:	2300      	movs	r3, #0
 800713e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007140:	2300      	movs	r3, #0
 8007142:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800714c:	2b00      	cmp	r3, #0
 800714e:	d041      	beq.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007154:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007158:	d02a      	beq.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800715a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800715e:	d824      	bhi.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007160:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007164:	d008      	beq.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007166:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800716a:	d81e      	bhi.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 800716c:	2b00      	cmp	r3, #0
 800716e:	d00a      	beq.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007170:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007174:	d010      	beq.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007176:	e018      	b.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007178:	4b86      	ldr	r3, [pc, #536]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800717a:	68db      	ldr	r3, [r3, #12]
 800717c:	4a85      	ldr	r2, [pc, #532]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800717e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007182:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007184:	e015      	b.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	3304      	adds	r3, #4
 800718a:	2100      	movs	r1, #0
 800718c:	4618      	mov	r0, r3
 800718e:	f000 fabb 	bl	8007708 <RCCEx_PLLSAI1_Config>
 8007192:	4603      	mov	r3, r0
 8007194:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007196:	e00c      	b.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	3320      	adds	r3, #32
 800719c:	2100      	movs	r1, #0
 800719e:	4618      	mov	r0, r3
 80071a0:	f000 fba6 	bl	80078f0 <RCCEx_PLLSAI2_Config>
 80071a4:	4603      	mov	r3, r0
 80071a6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80071a8:	e003      	b.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071aa:	2301      	movs	r3, #1
 80071ac:	74fb      	strb	r3, [r7, #19]
      break;
 80071ae:	e000      	b.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80071b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071b2:	7cfb      	ldrb	r3, [r7, #19]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d10b      	bne.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80071b8:	4b76      	ldr	r3, [pc, #472]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80071ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071c6:	4973      	ldr	r1, [pc, #460]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80071c8:	4313      	orrs	r3, r2
 80071ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80071ce:	e001      	b.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071d0:	7cfb      	ldrb	r3, [r7, #19]
 80071d2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d041      	beq.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80071e4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80071e8:	d02a      	beq.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80071ea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80071ee:	d824      	bhi.n	800723a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80071f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80071f4:	d008      	beq.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80071f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80071fa:	d81e      	bhi.n	800723a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d00a      	beq.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8007200:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007204:	d010      	beq.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007206:	e018      	b.n	800723a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007208:	4b62      	ldr	r3, [pc, #392]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800720a:	68db      	ldr	r3, [r3, #12]
 800720c:	4a61      	ldr	r2, [pc, #388]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800720e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007212:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007214:	e015      	b.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	3304      	adds	r3, #4
 800721a:	2100      	movs	r1, #0
 800721c:	4618      	mov	r0, r3
 800721e:	f000 fa73 	bl	8007708 <RCCEx_PLLSAI1_Config>
 8007222:	4603      	mov	r3, r0
 8007224:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007226:	e00c      	b.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	3320      	adds	r3, #32
 800722c:	2100      	movs	r1, #0
 800722e:	4618      	mov	r0, r3
 8007230:	f000 fb5e 	bl	80078f0 <RCCEx_PLLSAI2_Config>
 8007234:	4603      	mov	r3, r0
 8007236:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007238:	e003      	b.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800723a:	2301      	movs	r3, #1
 800723c:	74fb      	strb	r3, [r7, #19]
      break;
 800723e:	e000      	b.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8007240:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007242:	7cfb      	ldrb	r3, [r7, #19]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d10b      	bne.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007248:	4b52      	ldr	r3, [pc, #328]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800724a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800724e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007256:	494f      	ldr	r1, [pc, #316]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007258:	4313      	orrs	r3, r2
 800725a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800725e:	e001      	b.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007260:	7cfb      	ldrb	r3, [r7, #19]
 8007262:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800726c:	2b00      	cmp	r3, #0
 800726e:	f000 80a0 	beq.w	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007272:	2300      	movs	r3, #0
 8007274:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007276:	4b47      	ldr	r3, [pc, #284]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800727a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800727e:	2b00      	cmp	r3, #0
 8007280:	d101      	bne.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8007282:	2301      	movs	r3, #1
 8007284:	e000      	b.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8007286:	2300      	movs	r3, #0
 8007288:	2b00      	cmp	r3, #0
 800728a:	d00d      	beq.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800728c:	4b41      	ldr	r3, [pc, #260]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800728e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007290:	4a40      	ldr	r2, [pc, #256]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007292:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007296:	6593      	str	r3, [r2, #88]	; 0x58
 8007298:	4b3e      	ldr	r3, [pc, #248]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800729a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800729c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072a0:	60bb      	str	r3, [r7, #8]
 80072a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80072a4:	2301      	movs	r3, #1
 80072a6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80072a8:	4b3b      	ldr	r3, [pc, #236]	; (8007398 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a3a      	ldr	r2, [pc, #232]	; (8007398 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80072ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80072b4:	f7fb ff92 	bl	80031dc <HAL_GetTick>
 80072b8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80072ba:	e009      	b.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072bc:	f7fb ff8e 	bl	80031dc <HAL_GetTick>
 80072c0:	4602      	mov	r2, r0
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	1ad3      	subs	r3, r2, r3
 80072c6:	2b02      	cmp	r3, #2
 80072c8:	d902      	bls.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80072ca:	2303      	movs	r3, #3
 80072cc:	74fb      	strb	r3, [r7, #19]
        break;
 80072ce:	e005      	b.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80072d0:	4b31      	ldr	r3, [pc, #196]	; (8007398 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d0ef      	beq.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80072dc:	7cfb      	ldrb	r3, [r7, #19]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d15c      	bne.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80072e2:	4b2c      	ldr	r3, [pc, #176]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80072e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072ec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d01f      	beq.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072fa:	697a      	ldr	r2, [r7, #20]
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d019      	beq.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007300:	4b24      	ldr	r3, [pc, #144]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007306:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800730a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800730c:	4b21      	ldr	r3, [pc, #132]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800730e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007312:	4a20      	ldr	r2, [pc, #128]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007318:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800731c:	4b1d      	ldr	r3, [pc, #116]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800731e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007322:	4a1c      	ldr	r2, [pc, #112]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007324:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007328:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800732c:	4a19      	ldr	r2, [pc, #100]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	f003 0301 	and.w	r3, r3, #1
 800733a:	2b00      	cmp	r3, #0
 800733c:	d016      	beq.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800733e:	f7fb ff4d 	bl	80031dc <HAL_GetTick>
 8007342:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007344:	e00b      	b.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007346:	f7fb ff49 	bl	80031dc <HAL_GetTick>
 800734a:	4602      	mov	r2, r0
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	1ad3      	subs	r3, r2, r3
 8007350:	f241 3288 	movw	r2, #5000	; 0x1388
 8007354:	4293      	cmp	r3, r2
 8007356:	d902      	bls.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8007358:	2303      	movs	r3, #3
 800735a:	74fb      	strb	r3, [r7, #19]
            break;
 800735c:	e006      	b.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800735e:	4b0d      	ldr	r3, [pc, #52]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007364:	f003 0302 	and.w	r3, r3, #2
 8007368:	2b00      	cmp	r3, #0
 800736a:	d0ec      	beq.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800736c:	7cfb      	ldrb	r3, [r7, #19]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d10c      	bne.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007372:	4b08      	ldr	r3, [pc, #32]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007378:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007382:	4904      	ldr	r1, [pc, #16]	; (8007394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007384:	4313      	orrs	r3, r2
 8007386:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800738a:	e009      	b.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800738c:	7cfb      	ldrb	r3, [r7, #19]
 800738e:	74bb      	strb	r3, [r7, #18]
 8007390:	e006      	b.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8007392:	bf00      	nop
 8007394:	40021000 	.word	0x40021000
 8007398:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800739c:	7cfb      	ldrb	r3, [r7, #19]
 800739e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80073a0:	7c7b      	ldrb	r3, [r7, #17]
 80073a2:	2b01      	cmp	r3, #1
 80073a4:	d105      	bne.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80073a6:	4b9e      	ldr	r3, [pc, #632]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073aa:	4a9d      	ldr	r2, [pc, #628]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80073b0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f003 0301 	and.w	r3, r3, #1
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d00a      	beq.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80073be:	4b98      	ldr	r3, [pc, #608]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073c4:	f023 0203 	bic.w	r2, r3, #3
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073cc:	4994      	ldr	r1, [pc, #592]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073ce:	4313      	orrs	r3, r2
 80073d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f003 0302 	and.w	r3, r3, #2
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d00a      	beq.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80073e0:	4b8f      	ldr	r3, [pc, #572]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073e6:	f023 020c 	bic.w	r2, r3, #12
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073ee:	498c      	ldr	r1, [pc, #560]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073f0:	4313      	orrs	r3, r2
 80073f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f003 0304 	and.w	r3, r3, #4
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d00a      	beq.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007402:	4b87      	ldr	r3, [pc, #540]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007408:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007410:	4983      	ldr	r1, [pc, #524]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007412:	4313      	orrs	r3, r2
 8007414:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f003 0308 	and.w	r3, r3, #8
 8007420:	2b00      	cmp	r3, #0
 8007422:	d00a      	beq.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007424:	4b7e      	ldr	r3, [pc, #504]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800742a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007432:	497b      	ldr	r1, [pc, #492]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007434:	4313      	orrs	r3, r2
 8007436:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f003 0310 	and.w	r3, r3, #16
 8007442:	2b00      	cmp	r3, #0
 8007444:	d00a      	beq.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007446:	4b76      	ldr	r3, [pc, #472]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800744c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007454:	4972      	ldr	r1, [pc, #456]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007456:	4313      	orrs	r3, r2
 8007458:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f003 0320 	and.w	r3, r3, #32
 8007464:	2b00      	cmp	r3, #0
 8007466:	d00a      	beq.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007468:	4b6d      	ldr	r3, [pc, #436]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800746a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800746e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007476:	496a      	ldr	r1, [pc, #424]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007478:	4313      	orrs	r3, r2
 800747a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007486:	2b00      	cmp	r3, #0
 8007488:	d00a      	beq.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800748a:	4b65      	ldr	r3, [pc, #404]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800748c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007490:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007498:	4961      	ldr	r1, [pc, #388]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800749a:	4313      	orrs	r3, r2
 800749c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d00a      	beq.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80074ac:	4b5c      	ldr	r3, [pc, #368]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074ba:	4959      	ldr	r1, [pc, #356]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074bc:	4313      	orrs	r3, r2
 80074be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d00a      	beq.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80074ce:	4b54      	ldr	r3, [pc, #336]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074d4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074dc:	4950      	ldr	r1, [pc, #320]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074de:	4313      	orrs	r3, r2
 80074e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d00a      	beq.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80074f0:	4b4b      	ldr	r3, [pc, #300]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074f6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074fe:	4948      	ldr	r1, [pc, #288]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007500:	4313      	orrs	r3, r2
 8007502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800750e:	2b00      	cmp	r3, #0
 8007510:	d00a      	beq.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007512:	4b43      	ldr	r3, [pc, #268]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007518:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007520:	493f      	ldr	r1, [pc, #252]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007522:	4313      	orrs	r3, r2
 8007524:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007530:	2b00      	cmp	r3, #0
 8007532:	d028      	beq.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007534:	4b3a      	ldr	r3, [pc, #232]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800753a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007542:	4937      	ldr	r1, [pc, #220]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007544:	4313      	orrs	r3, r2
 8007546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800754e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007552:	d106      	bne.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007554:	4b32      	ldr	r3, [pc, #200]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007556:	68db      	ldr	r3, [r3, #12]
 8007558:	4a31      	ldr	r2, [pc, #196]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800755a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800755e:	60d3      	str	r3, [r2, #12]
 8007560:	e011      	b.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007566:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800756a:	d10c      	bne.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	3304      	adds	r3, #4
 8007570:	2101      	movs	r1, #1
 8007572:	4618      	mov	r0, r3
 8007574:	f000 f8c8 	bl	8007708 <RCCEx_PLLSAI1_Config>
 8007578:	4603      	mov	r3, r0
 800757a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800757c:	7cfb      	ldrb	r3, [r7, #19]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d001      	beq.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8007582:	7cfb      	ldrb	r3, [r7, #19]
 8007584:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800758e:	2b00      	cmp	r3, #0
 8007590:	d028      	beq.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007592:	4b23      	ldr	r3, [pc, #140]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007598:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075a0:	491f      	ldr	r1, [pc, #124]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80075a2:	4313      	orrs	r3, r2
 80075a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80075b0:	d106      	bne.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80075b2:	4b1b      	ldr	r3, [pc, #108]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80075b4:	68db      	ldr	r3, [r3, #12]
 80075b6:	4a1a      	ldr	r2, [pc, #104]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80075b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80075bc:	60d3      	str	r3, [r2, #12]
 80075be:	e011      	b.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80075c8:	d10c      	bne.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	3304      	adds	r3, #4
 80075ce:	2101      	movs	r1, #1
 80075d0:	4618      	mov	r0, r3
 80075d2:	f000 f899 	bl	8007708 <RCCEx_PLLSAI1_Config>
 80075d6:	4603      	mov	r3, r0
 80075d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80075da:	7cfb      	ldrb	r3, [r7, #19]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d001      	beq.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80075e0:	7cfb      	ldrb	r3, [r7, #19]
 80075e2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d02b      	beq.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80075f0:	4b0b      	ldr	r3, [pc, #44]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80075f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075fe:	4908      	ldr	r1, [pc, #32]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007600:	4313      	orrs	r3, r2
 8007602:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800760a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800760e:	d109      	bne.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007610:	4b03      	ldr	r3, [pc, #12]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007612:	68db      	ldr	r3, [r3, #12]
 8007614:	4a02      	ldr	r2, [pc, #8]	; (8007620 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007616:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800761a:	60d3      	str	r3, [r2, #12]
 800761c:	e014      	b.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800761e:	bf00      	nop
 8007620:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007628:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800762c:	d10c      	bne.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	3304      	adds	r3, #4
 8007632:	2101      	movs	r1, #1
 8007634:	4618      	mov	r0, r3
 8007636:	f000 f867 	bl	8007708 <RCCEx_PLLSAI1_Config>
 800763a:	4603      	mov	r3, r0
 800763c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800763e:	7cfb      	ldrb	r3, [r7, #19]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d001      	beq.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8007644:	7cfb      	ldrb	r3, [r7, #19]
 8007646:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007650:	2b00      	cmp	r3, #0
 8007652:	d02f      	beq.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007654:	4b2b      	ldr	r3, [pc, #172]	; (8007704 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800765a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007662:	4928      	ldr	r1, [pc, #160]	; (8007704 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007664:	4313      	orrs	r3, r2
 8007666:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800766e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007672:	d10d      	bne.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	3304      	adds	r3, #4
 8007678:	2102      	movs	r1, #2
 800767a:	4618      	mov	r0, r3
 800767c:	f000 f844 	bl	8007708 <RCCEx_PLLSAI1_Config>
 8007680:	4603      	mov	r3, r0
 8007682:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007684:	7cfb      	ldrb	r3, [r7, #19]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d014      	beq.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800768a:	7cfb      	ldrb	r3, [r7, #19]
 800768c:	74bb      	strb	r3, [r7, #18]
 800768e:	e011      	b.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007694:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007698:	d10c      	bne.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	3320      	adds	r3, #32
 800769e:	2102      	movs	r1, #2
 80076a0:	4618      	mov	r0, r3
 80076a2:	f000 f925 	bl	80078f0 <RCCEx_PLLSAI2_Config>
 80076a6:	4603      	mov	r3, r0
 80076a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80076aa:	7cfb      	ldrb	r3, [r7, #19]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d001      	beq.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80076b0:	7cfb      	ldrb	r3, [r7, #19]
 80076b2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d00a      	beq.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80076c0:	4b10      	ldr	r3, [pc, #64]	; (8007704 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80076c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076c6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076ce:	490d      	ldr	r1, [pc, #52]	; (8007704 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80076d0:	4313      	orrs	r3, r2
 80076d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d00b      	beq.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80076e2:	4b08      	ldr	r3, [pc, #32]	; (8007704 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80076e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076e8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076f2:	4904      	ldr	r1, [pc, #16]	; (8007704 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80076f4:	4313      	orrs	r3, r2
 80076f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80076fa:	7cbb      	ldrb	r3, [r7, #18]
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3718      	adds	r7, #24
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}
 8007704:	40021000 	.word	0x40021000

08007708 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b084      	sub	sp, #16
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007712:	2300      	movs	r3, #0
 8007714:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007716:	4b75      	ldr	r3, [pc, #468]	; (80078ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8007718:	68db      	ldr	r3, [r3, #12]
 800771a:	f003 0303 	and.w	r3, r3, #3
 800771e:	2b00      	cmp	r3, #0
 8007720:	d018      	beq.n	8007754 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007722:	4b72      	ldr	r3, [pc, #456]	; (80078ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8007724:	68db      	ldr	r3, [r3, #12]
 8007726:	f003 0203 	and.w	r2, r3, #3
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	429a      	cmp	r2, r3
 8007730:	d10d      	bne.n	800774e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
       ||
 8007736:	2b00      	cmp	r3, #0
 8007738:	d009      	beq.n	800774e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800773a:	4b6c      	ldr	r3, [pc, #432]	; (80078ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800773c:	68db      	ldr	r3, [r3, #12]
 800773e:	091b      	lsrs	r3, r3, #4
 8007740:	f003 0307 	and.w	r3, r3, #7
 8007744:	1c5a      	adds	r2, r3, #1
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	685b      	ldr	r3, [r3, #4]
       ||
 800774a:	429a      	cmp	r2, r3
 800774c:	d047      	beq.n	80077de <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800774e:	2301      	movs	r3, #1
 8007750:	73fb      	strb	r3, [r7, #15]
 8007752:	e044      	b.n	80077de <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	2b03      	cmp	r3, #3
 800775a:	d018      	beq.n	800778e <RCCEx_PLLSAI1_Config+0x86>
 800775c:	2b03      	cmp	r3, #3
 800775e:	d825      	bhi.n	80077ac <RCCEx_PLLSAI1_Config+0xa4>
 8007760:	2b01      	cmp	r3, #1
 8007762:	d002      	beq.n	800776a <RCCEx_PLLSAI1_Config+0x62>
 8007764:	2b02      	cmp	r3, #2
 8007766:	d009      	beq.n	800777c <RCCEx_PLLSAI1_Config+0x74>
 8007768:	e020      	b.n	80077ac <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800776a:	4b60      	ldr	r3, [pc, #384]	; (80078ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f003 0302 	and.w	r3, r3, #2
 8007772:	2b00      	cmp	r3, #0
 8007774:	d11d      	bne.n	80077b2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8007776:	2301      	movs	r3, #1
 8007778:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800777a:	e01a      	b.n	80077b2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800777c:	4b5b      	ldr	r3, [pc, #364]	; (80078ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007784:	2b00      	cmp	r3, #0
 8007786:	d116      	bne.n	80077b6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007788:	2301      	movs	r3, #1
 800778a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800778c:	e013      	b.n	80077b6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800778e:	4b57      	ldr	r3, [pc, #348]	; (80078ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007796:	2b00      	cmp	r3, #0
 8007798:	d10f      	bne.n	80077ba <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800779a:	4b54      	ldr	r3, [pc, #336]	; (80078ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d109      	bne.n	80077ba <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80077aa:	e006      	b.n	80077ba <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80077ac:	2301      	movs	r3, #1
 80077ae:	73fb      	strb	r3, [r7, #15]
      break;
 80077b0:	e004      	b.n	80077bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80077b2:	bf00      	nop
 80077b4:	e002      	b.n	80077bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80077b6:	bf00      	nop
 80077b8:	e000      	b.n	80077bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80077ba:	bf00      	nop
    }

    if(status == HAL_OK)
 80077bc:	7bfb      	ldrb	r3, [r7, #15]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d10d      	bne.n	80077de <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80077c2:	4b4a      	ldr	r3, [pc, #296]	; (80078ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80077c4:	68db      	ldr	r3, [r3, #12]
 80077c6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6819      	ldr	r1, [r3, #0]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	3b01      	subs	r3, #1
 80077d4:	011b      	lsls	r3, r3, #4
 80077d6:	430b      	orrs	r3, r1
 80077d8:	4944      	ldr	r1, [pc, #272]	; (80078ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80077da:	4313      	orrs	r3, r2
 80077dc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80077de:	7bfb      	ldrb	r3, [r7, #15]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d17d      	bne.n	80078e0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80077e4:	4b41      	ldr	r3, [pc, #260]	; (80078ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a40      	ldr	r2, [pc, #256]	; (80078ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80077ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80077ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077f0:	f7fb fcf4 	bl	80031dc <HAL_GetTick>
 80077f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80077f6:	e009      	b.n	800780c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80077f8:	f7fb fcf0 	bl	80031dc <HAL_GetTick>
 80077fc:	4602      	mov	r2, r0
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	1ad3      	subs	r3, r2, r3
 8007802:	2b02      	cmp	r3, #2
 8007804:	d902      	bls.n	800780c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007806:	2303      	movs	r3, #3
 8007808:	73fb      	strb	r3, [r7, #15]
        break;
 800780a:	e005      	b.n	8007818 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800780c:	4b37      	ldr	r3, [pc, #220]	; (80078ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007814:	2b00      	cmp	r3, #0
 8007816:	d1ef      	bne.n	80077f8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007818:	7bfb      	ldrb	r3, [r7, #15]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d160      	bne.n	80078e0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d111      	bne.n	8007848 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007824:	4b31      	ldr	r3, [pc, #196]	; (80078ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8007826:	691b      	ldr	r3, [r3, #16]
 8007828:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800782c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	6892      	ldr	r2, [r2, #8]
 8007834:	0211      	lsls	r1, r2, #8
 8007836:	687a      	ldr	r2, [r7, #4]
 8007838:	68d2      	ldr	r2, [r2, #12]
 800783a:	0912      	lsrs	r2, r2, #4
 800783c:	0452      	lsls	r2, r2, #17
 800783e:	430a      	orrs	r2, r1
 8007840:	492a      	ldr	r1, [pc, #168]	; (80078ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8007842:	4313      	orrs	r3, r2
 8007844:	610b      	str	r3, [r1, #16]
 8007846:	e027      	b.n	8007898 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	2b01      	cmp	r3, #1
 800784c:	d112      	bne.n	8007874 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800784e:	4b27      	ldr	r3, [pc, #156]	; (80078ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8007850:	691b      	ldr	r3, [r3, #16]
 8007852:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007856:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800785a:	687a      	ldr	r2, [r7, #4]
 800785c:	6892      	ldr	r2, [r2, #8]
 800785e:	0211      	lsls	r1, r2, #8
 8007860:	687a      	ldr	r2, [r7, #4]
 8007862:	6912      	ldr	r2, [r2, #16]
 8007864:	0852      	lsrs	r2, r2, #1
 8007866:	3a01      	subs	r2, #1
 8007868:	0552      	lsls	r2, r2, #21
 800786a:	430a      	orrs	r2, r1
 800786c:	491f      	ldr	r1, [pc, #124]	; (80078ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800786e:	4313      	orrs	r3, r2
 8007870:	610b      	str	r3, [r1, #16]
 8007872:	e011      	b.n	8007898 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007874:	4b1d      	ldr	r3, [pc, #116]	; (80078ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8007876:	691b      	ldr	r3, [r3, #16]
 8007878:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800787c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	6892      	ldr	r2, [r2, #8]
 8007884:	0211      	lsls	r1, r2, #8
 8007886:	687a      	ldr	r2, [r7, #4]
 8007888:	6952      	ldr	r2, [r2, #20]
 800788a:	0852      	lsrs	r2, r2, #1
 800788c:	3a01      	subs	r2, #1
 800788e:	0652      	lsls	r2, r2, #25
 8007890:	430a      	orrs	r2, r1
 8007892:	4916      	ldr	r1, [pc, #88]	; (80078ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8007894:	4313      	orrs	r3, r2
 8007896:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007898:	4b14      	ldr	r3, [pc, #80]	; (80078ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a13      	ldr	r2, [pc, #76]	; (80078ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800789e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80078a2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078a4:	f7fb fc9a 	bl	80031dc <HAL_GetTick>
 80078a8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80078aa:	e009      	b.n	80078c0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80078ac:	f7fb fc96 	bl	80031dc <HAL_GetTick>
 80078b0:	4602      	mov	r2, r0
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	1ad3      	subs	r3, r2, r3
 80078b6:	2b02      	cmp	r3, #2
 80078b8:	d902      	bls.n	80078c0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80078ba:	2303      	movs	r3, #3
 80078bc:	73fb      	strb	r3, [r7, #15]
          break;
 80078be:	e005      	b.n	80078cc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80078c0:	4b0a      	ldr	r3, [pc, #40]	; (80078ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d0ef      	beq.n	80078ac <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80078cc:	7bfb      	ldrb	r3, [r7, #15]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d106      	bne.n	80078e0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80078d2:	4b06      	ldr	r3, [pc, #24]	; (80078ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80078d4:	691a      	ldr	r2, [r3, #16]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	699b      	ldr	r3, [r3, #24]
 80078da:	4904      	ldr	r1, [pc, #16]	; (80078ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80078dc:	4313      	orrs	r3, r2
 80078de:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80078e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3710      	adds	r7, #16
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	bf00      	nop
 80078ec:	40021000 	.word	0x40021000

080078f0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b084      	sub	sp, #16
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80078fa:	2300      	movs	r3, #0
 80078fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80078fe:	4b6a      	ldr	r3, [pc, #424]	; (8007aa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007900:	68db      	ldr	r3, [r3, #12]
 8007902:	f003 0303 	and.w	r3, r3, #3
 8007906:	2b00      	cmp	r3, #0
 8007908:	d018      	beq.n	800793c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800790a:	4b67      	ldr	r3, [pc, #412]	; (8007aa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	f003 0203 	and.w	r2, r3, #3
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	429a      	cmp	r2, r3
 8007918:	d10d      	bne.n	8007936 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
       ||
 800791e:	2b00      	cmp	r3, #0
 8007920:	d009      	beq.n	8007936 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8007922:	4b61      	ldr	r3, [pc, #388]	; (8007aa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007924:	68db      	ldr	r3, [r3, #12]
 8007926:	091b      	lsrs	r3, r3, #4
 8007928:	f003 0307 	and.w	r3, r3, #7
 800792c:	1c5a      	adds	r2, r3, #1
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	685b      	ldr	r3, [r3, #4]
       ||
 8007932:	429a      	cmp	r2, r3
 8007934:	d047      	beq.n	80079c6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007936:	2301      	movs	r3, #1
 8007938:	73fb      	strb	r3, [r7, #15]
 800793a:	e044      	b.n	80079c6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	2b03      	cmp	r3, #3
 8007942:	d018      	beq.n	8007976 <RCCEx_PLLSAI2_Config+0x86>
 8007944:	2b03      	cmp	r3, #3
 8007946:	d825      	bhi.n	8007994 <RCCEx_PLLSAI2_Config+0xa4>
 8007948:	2b01      	cmp	r3, #1
 800794a:	d002      	beq.n	8007952 <RCCEx_PLLSAI2_Config+0x62>
 800794c:	2b02      	cmp	r3, #2
 800794e:	d009      	beq.n	8007964 <RCCEx_PLLSAI2_Config+0x74>
 8007950:	e020      	b.n	8007994 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007952:	4b55      	ldr	r3, [pc, #340]	; (8007aa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f003 0302 	and.w	r3, r3, #2
 800795a:	2b00      	cmp	r3, #0
 800795c:	d11d      	bne.n	800799a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800795e:	2301      	movs	r3, #1
 8007960:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007962:	e01a      	b.n	800799a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007964:	4b50      	ldr	r3, [pc, #320]	; (8007aa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800796c:	2b00      	cmp	r3, #0
 800796e:	d116      	bne.n	800799e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8007970:	2301      	movs	r3, #1
 8007972:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007974:	e013      	b.n	800799e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007976:	4b4c      	ldr	r3, [pc, #304]	; (8007aa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800797e:	2b00      	cmp	r3, #0
 8007980:	d10f      	bne.n	80079a2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007982:	4b49      	ldr	r3, [pc, #292]	; (8007aa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800798a:	2b00      	cmp	r3, #0
 800798c:	d109      	bne.n	80079a2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800798e:	2301      	movs	r3, #1
 8007990:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007992:	e006      	b.n	80079a2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007994:	2301      	movs	r3, #1
 8007996:	73fb      	strb	r3, [r7, #15]
      break;
 8007998:	e004      	b.n	80079a4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800799a:	bf00      	nop
 800799c:	e002      	b.n	80079a4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800799e:	bf00      	nop
 80079a0:	e000      	b.n	80079a4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80079a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80079a4:	7bfb      	ldrb	r3, [r7, #15]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d10d      	bne.n	80079c6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80079aa:	4b3f      	ldr	r3, [pc, #252]	; (8007aa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80079ac:	68db      	ldr	r3, [r3, #12]
 80079ae:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6819      	ldr	r1, [r3, #0]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	3b01      	subs	r3, #1
 80079bc:	011b      	lsls	r3, r3, #4
 80079be:	430b      	orrs	r3, r1
 80079c0:	4939      	ldr	r1, [pc, #228]	; (8007aa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80079c2:	4313      	orrs	r3, r2
 80079c4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80079c6:	7bfb      	ldrb	r3, [r7, #15]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d167      	bne.n	8007a9c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80079cc:	4b36      	ldr	r3, [pc, #216]	; (8007aa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a35      	ldr	r2, [pc, #212]	; (8007aa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80079d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079d8:	f7fb fc00 	bl	80031dc <HAL_GetTick>
 80079dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80079de:	e009      	b.n	80079f4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80079e0:	f7fb fbfc 	bl	80031dc <HAL_GetTick>
 80079e4:	4602      	mov	r2, r0
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	1ad3      	subs	r3, r2, r3
 80079ea:	2b02      	cmp	r3, #2
 80079ec:	d902      	bls.n	80079f4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80079ee:	2303      	movs	r3, #3
 80079f0:	73fb      	strb	r3, [r7, #15]
        break;
 80079f2:	e005      	b.n	8007a00 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80079f4:	4b2c      	ldr	r3, [pc, #176]	; (8007aa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d1ef      	bne.n	80079e0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007a00:	7bfb      	ldrb	r3, [r7, #15]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d14a      	bne.n	8007a9c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d111      	bne.n	8007a30 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007a0c:	4b26      	ldr	r3, [pc, #152]	; (8007aa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007a0e:	695b      	ldr	r3, [r3, #20]
 8007a10:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8007a14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a18:	687a      	ldr	r2, [r7, #4]
 8007a1a:	6892      	ldr	r2, [r2, #8]
 8007a1c:	0211      	lsls	r1, r2, #8
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	68d2      	ldr	r2, [r2, #12]
 8007a22:	0912      	lsrs	r2, r2, #4
 8007a24:	0452      	lsls	r2, r2, #17
 8007a26:	430a      	orrs	r2, r1
 8007a28:	491f      	ldr	r1, [pc, #124]	; (8007aa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	614b      	str	r3, [r1, #20]
 8007a2e:	e011      	b.n	8007a54 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007a30:	4b1d      	ldr	r3, [pc, #116]	; (8007aa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007a32:	695b      	ldr	r3, [r3, #20]
 8007a34:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007a38:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007a3c:	687a      	ldr	r2, [r7, #4]
 8007a3e:	6892      	ldr	r2, [r2, #8]
 8007a40:	0211      	lsls	r1, r2, #8
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	6912      	ldr	r2, [r2, #16]
 8007a46:	0852      	lsrs	r2, r2, #1
 8007a48:	3a01      	subs	r2, #1
 8007a4a:	0652      	lsls	r2, r2, #25
 8007a4c:	430a      	orrs	r2, r1
 8007a4e:	4916      	ldr	r1, [pc, #88]	; (8007aa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007a50:	4313      	orrs	r3, r2
 8007a52:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007a54:	4b14      	ldr	r3, [pc, #80]	; (8007aa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a13      	ldr	r2, [pc, #76]	; (8007aa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007a5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a5e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a60:	f7fb fbbc 	bl	80031dc <HAL_GetTick>
 8007a64:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007a66:	e009      	b.n	8007a7c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007a68:	f7fb fbb8 	bl	80031dc <HAL_GetTick>
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	1ad3      	subs	r3, r2, r3
 8007a72:	2b02      	cmp	r3, #2
 8007a74:	d902      	bls.n	8007a7c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8007a76:	2303      	movs	r3, #3
 8007a78:	73fb      	strb	r3, [r7, #15]
          break;
 8007a7a:	e005      	b.n	8007a88 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007a7c:	4b0a      	ldr	r3, [pc, #40]	; (8007aa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d0ef      	beq.n	8007a68 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8007a88:	7bfb      	ldrb	r3, [r7, #15]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d106      	bne.n	8007a9c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007a8e:	4b06      	ldr	r3, [pc, #24]	; (8007aa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007a90:	695a      	ldr	r2, [r3, #20]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	695b      	ldr	r3, [r3, #20]
 8007a96:	4904      	ldr	r1, [pc, #16]	; (8007aa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3710      	adds	r7, #16
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}
 8007aa6:	bf00      	nop
 8007aa8:	40021000 	.word	0x40021000

08007aac <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b084      	sub	sp, #16
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d101      	bne.n	8007abe <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	e049      	b.n	8007b52 <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	795b      	ldrb	r3, [r3, #5]
 8007ac2:	b2db      	uxtb	r3, r3
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d105      	bne.n	8007ad4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2200      	movs	r2, #0
 8007acc:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f7fa fd68 	bl	80025a4 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2202      	movs	r2, #2
 8007ad8:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CED */
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	681a      	ldr	r2, [r3, #0]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f042 0204 	orr.w	r2, r2, #4
 8007ae8:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007af4:	2b40      	cmp	r3, #64	; 0x40
 8007af6:	d104      	bne.n	8007b02 <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2204      	movs	r2, #4
 8007afc:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 8007afe:	2301      	movs	r3, #1
 8007b00:	e027      	b.n	8007b52 <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8007b02:	f7fb fb6b 	bl	80031dc <HAL_GetTick>
 8007b06:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8007b08:	e015      	b.n	8007b36 <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8007b0a:	f7fb fb67 	bl	80031dc <HAL_GetTick>
 8007b0e:	4602      	mov	r2, r0
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	1ad3      	subs	r3, r2, r3
 8007b14:	2b02      	cmp	r3, #2
 8007b16:	d90e      	bls.n	8007b36 <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	f003 0304 	and.w	r3, r3, #4
 8007b22:	2b04      	cmp	r3, #4
 8007b24:	d107      	bne.n	8007b36 <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2204      	movs	r2, #4
 8007b2a:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2202      	movs	r2, #2
 8007b30:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 8007b32:	2301      	movs	r3, #1
 8007b34:	e00d      	b.n	8007b52 <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	f003 0304 	and.w	r3, r3, #4
 8007b40:	2b04      	cmp	r3, #4
 8007b42:	d0e2      	beq.n	8007b0a <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2201      	movs	r2, #1
 8007b48:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8007b50:	2300      	movs	r3, #0
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3710      	adds	r7, #16
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}

08007b5a <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8007b5a:	b580      	push	{r7, lr}
 8007b5c:	b084      	sub	sp, #16
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	6078      	str	r0, [r7, #4]
 8007b62:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007b64:	2300      	movs	r3, #0
 8007b66:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	791b      	ldrb	r3, [r3, #4]
 8007b6c:	2b01      	cmp	r3, #1
 8007b6e:	d101      	bne.n	8007b74 <HAL_RNG_GenerateRandomNumber+0x1a>
 8007b70:	2302      	movs	r3, #2
 8007b72:	e044      	b.n	8007bfe <HAL_RNG_GenerateRandomNumber+0xa4>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2201      	movs	r2, #1
 8007b78:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	795b      	ldrb	r3, [r3, #5]
 8007b7e:	b2db      	uxtb	r3, r3
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d133      	bne.n	8007bec <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2202      	movs	r2, #2
 8007b88:	715a      	strb	r2, [r3, #5]
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 8007b8a:	f7fb fb27 	bl	80031dc <HAL_GetTick>
 8007b8e:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8007b90:	e018      	b.n	8007bc4 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8007b92:	f7fb fb23 	bl	80031dc <HAL_GetTick>
 8007b96:	4602      	mov	r2, r0
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	1ad3      	subs	r3, r2, r3
 8007b9c:	2b02      	cmp	r3, #2
 8007b9e:	d911      	bls.n	8007bc4 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	f003 0301 	and.w	r3, r3, #1
 8007baa:	2b01      	cmp	r3, #1
 8007bac:	d00a      	beq.n	8007bc4 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2202      	movs	r2, #2
 8007bb8:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	e01c      	b.n	8007bfe <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	f003 0301 	and.w	r3, r3, #1
 8007bce:	2b01      	cmp	r3, #1
 8007bd0:	d1df      	bne.n	8007b92 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	689a      	ldr	r2, [r3, #8]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	60da      	str	r2, [r3, #12]
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
    }
#else
    *random32bit = hrng->RandomNumber;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	68da      	ldr	r2, [r3, #12]
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	601a      	str	r2, [r3, #0]

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2201      	movs	r2, #1
 8007be8:	715a      	strb	r2, [r3, #5]
 8007bea:	e004      	b.n	8007bf6 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2204      	movs	r2, #4
 8007bf0:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	711a      	strb	r2, [r3, #4]

  return status;
 8007bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3710      	adds	r7, #16
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}

08007c06 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007c06:	b580      	push	{r7, lr}
 8007c08:	b082      	sub	sp, #8
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d101      	bne.n	8007c18 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007c14:	2301      	movs	r3, #1
 8007c16:	e049      	b.n	8007cac <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c1e:	b2db      	uxtb	r3, r3
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d106      	bne.n	8007c32 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2200      	movs	r2, #0
 8007c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f7fa fcd9 	bl	80025e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2202      	movs	r2, #2
 8007c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681a      	ldr	r2, [r3, #0]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	3304      	adds	r3, #4
 8007c42:	4619      	mov	r1, r3
 8007c44:	4610      	mov	r0, r2
 8007c46:	f000 fc3d 	bl	80084c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2201      	movs	r2, #1
 8007c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2201      	movs	r2, #1
 8007c66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2201      	movs	r2, #1
 8007c76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2201      	movs	r2, #1
 8007c86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2201      	movs	r2, #1
 8007c96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2201      	movs	r2, #1
 8007ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007caa:	2300      	movs	r3, #0
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3708      	adds	r7, #8
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b085      	sub	sp, #20
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d001      	beq.n	8007ccc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007cc8:	2301      	movs	r3, #1
 8007cca:	e04f      	b.n	8007d6c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2202      	movs	r2, #2
 8007cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	68da      	ldr	r2, [r3, #12]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f042 0201 	orr.w	r2, r2, #1
 8007ce2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a23      	ldr	r2, [pc, #140]	; (8007d78 <HAL_TIM_Base_Start_IT+0xc4>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d01d      	beq.n	8007d2a <HAL_TIM_Base_Start_IT+0x76>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cf6:	d018      	beq.n	8007d2a <HAL_TIM_Base_Start_IT+0x76>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a1f      	ldr	r2, [pc, #124]	; (8007d7c <HAL_TIM_Base_Start_IT+0xc8>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d013      	beq.n	8007d2a <HAL_TIM_Base_Start_IT+0x76>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a1e      	ldr	r2, [pc, #120]	; (8007d80 <HAL_TIM_Base_Start_IT+0xcc>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d00e      	beq.n	8007d2a <HAL_TIM_Base_Start_IT+0x76>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a1c      	ldr	r2, [pc, #112]	; (8007d84 <HAL_TIM_Base_Start_IT+0xd0>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d009      	beq.n	8007d2a <HAL_TIM_Base_Start_IT+0x76>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a1b      	ldr	r2, [pc, #108]	; (8007d88 <HAL_TIM_Base_Start_IT+0xd4>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d004      	beq.n	8007d2a <HAL_TIM_Base_Start_IT+0x76>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a19      	ldr	r2, [pc, #100]	; (8007d8c <HAL_TIM_Base_Start_IT+0xd8>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d115      	bne.n	8007d56 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	689a      	ldr	r2, [r3, #8]
 8007d30:	4b17      	ldr	r3, [pc, #92]	; (8007d90 <HAL_TIM_Base_Start_IT+0xdc>)
 8007d32:	4013      	ands	r3, r2
 8007d34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2b06      	cmp	r3, #6
 8007d3a:	d015      	beq.n	8007d68 <HAL_TIM_Base_Start_IT+0xb4>
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d42:	d011      	beq.n	8007d68 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	681a      	ldr	r2, [r3, #0]
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f042 0201 	orr.w	r2, r2, #1
 8007d52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d54:	e008      	b.n	8007d68 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	681a      	ldr	r2, [r3, #0]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f042 0201 	orr.w	r2, r2, #1
 8007d64:	601a      	str	r2, [r3, #0]
 8007d66:	e000      	b.n	8007d6a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d68:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007d6a:	2300      	movs	r3, #0
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3714      	adds	r7, #20
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr
 8007d78:	40012c00 	.word	0x40012c00
 8007d7c:	40000400 	.word	0x40000400
 8007d80:	40000800 	.word	0x40000800
 8007d84:	40000c00 	.word	0x40000c00
 8007d88:	40013400 	.word	0x40013400
 8007d8c:	40014000 	.word	0x40014000
 8007d90:	00010007 	.word	0x00010007

08007d94 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b083      	sub	sp, #12
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	68da      	ldr	r2, [r3, #12]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f022 0201 	bic.w	r2, r2, #1
 8007daa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	6a1a      	ldr	r2, [r3, #32]
 8007db2:	f241 1311 	movw	r3, #4369	; 0x1111
 8007db6:	4013      	ands	r3, r2
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d10f      	bne.n	8007ddc <HAL_TIM_Base_Stop_IT+0x48>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	6a1a      	ldr	r2, [r3, #32]
 8007dc2:	f240 4344 	movw	r3, #1092	; 0x444
 8007dc6:	4013      	ands	r3, r2
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d107      	bne.n	8007ddc <HAL_TIM_Base_Stop_IT+0x48>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	681a      	ldr	r2, [r3, #0]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f022 0201 	bic.w	r2, r2, #1
 8007dda:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2201      	movs	r2, #1
 8007de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007de4:	2300      	movs	r3, #0
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	370c      	adds	r7, #12
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr

08007df2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007df2:	b580      	push	{r7, lr}
 8007df4:	b082      	sub	sp, #8
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d101      	bne.n	8007e04 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007e00:	2301      	movs	r3, #1
 8007e02:	e049      	b.n	8007e98 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d106      	bne.n	8007e1e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2200      	movs	r2, #0
 8007e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f000 f841 	bl	8007ea0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2202      	movs	r2, #2
 8007e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681a      	ldr	r2, [r3, #0]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	3304      	adds	r3, #4
 8007e2e:	4619      	mov	r1, r3
 8007e30:	4610      	mov	r0, r2
 8007e32:	f000 fb47 	bl	80084c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2201      	movs	r2, #1
 8007e3a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2201      	movs	r2, #1
 8007e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2201      	movs	r2, #1
 8007e4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2201      	movs	r2, #1
 8007e52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2201      	movs	r2, #1
 8007e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2201      	movs	r2, #1
 8007e62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2201      	movs	r2, #1
 8007e6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2201      	movs	r2, #1
 8007e72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2201      	movs	r2, #1
 8007e7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2201      	movs	r2, #1
 8007e82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2201      	movs	r2, #1
 8007e8a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2201      	movs	r2, #1
 8007e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e96:	2300      	movs	r3, #0
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3708      	adds	r7, #8
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b083      	sub	sp, #12
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007ea8:	bf00      	nop
 8007eaa:	370c      	adds	r7, #12
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr

08007eb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b084      	sub	sp, #16
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	68db      	ldr	r3, [r3, #12]
 8007ec2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	691b      	ldr	r3, [r3, #16]
 8007eca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	f003 0302 	and.w	r3, r3, #2
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d020      	beq.n	8007f18 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	f003 0302 	and.w	r3, r3, #2
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d01b      	beq.n	8007f18 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f06f 0202 	mvn.w	r2, #2
 8007ee8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2201      	movs	r2, #1
 8007eee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	699b      	ldr	r3, [r3, #24]
 8007ef6:	f003 0303 	and.w	r3, r3, #3
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d003      	beq.n	8007f06 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 fac1 	bl	8008486 <HAL_TIM_IC_CaptureCallback>
 8007f04:	e005      	b.n	8007f12 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f000 fab3 	bl	8008472 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f000 fac4 	bl	800849a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2200      	movs	r2, #0
 8007f16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	f003 0304 	and.w	r3, r3, #4
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d020      	beq.n	8007f64 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	f003 0304 	and.w	r3, r3, #4
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d01b      	beq.n	8007f64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f06f 0204 	mvn.w	r2, #4
 8007f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2202      	movs	r2, #2
 8007f3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	699b      	ldr	r3, [r3, #24]
 8007f42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d003      	beq.n	8007f52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 fa9b 	bl	8008486 <HAL_TIM_IC_CaptureCallback>
 8007f50:	e005      	b.n	8007f5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 fa8d 	bl	8008472 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f000 fa9e 	bl	800849a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2200      	movs	r2, #0
 8007f62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	f003 0308 	and.w	r3, r3, #8
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d020      	beq.n	8007fb0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	f003 0308 	and.w	r3, r3, #8
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d01b      	beq.n	8007fb0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f06f 0208 	mvn.w	r2, #8
 8007f80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2204      	movs	r2, #4
 8007f86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	69db      	ldr	r3, [r3, #28]
 8007f8e:	f003 0303 	and.w	r3, r3, #3
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d003      	beq.n	8007f9e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f000 fa75 	bl	8008486 <HAL_TIM_IC_CaptureCallback>
 8007f9c:	e005      	b.n	8007faa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 fa67 	bl	8008472 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f000 fa78 	bl	800849a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2200      	movs	r2, #0
 8007fae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	f003 0310 	and.w	r3, r3, #16
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d020      	beq.n	8007ffc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	f003 0310 	and.w	r3, r3, #16
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d01b      	beq.n	8007ffc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f06f 0210 	mvn.w	r2, #16
 8007fcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2208      	movs	r2, #8
 8007fd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	69db      	ldr	r3, [r3, #28]
 8007fda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d003      	beq.n	8007fea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 fa4f 	bl	8008486 <HAL_TIM_IC_CaptureCallback>
 8007fe8:	e005      	b.n	8007ff6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 fa41 	bl	8008472 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f000 fa52 	bl	800849a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	f003 0301 	and.w	r3, r3, #1
 8008002:	2b00      	cmp	r3, #0
 8008004:	d00c      	beq.n	8008020 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	f003 0301 	and.w	r3, r3, #1
 800800c:	2b00      	cmp	r3, #0
 800800e:	d007      	beq.n	8008020 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f06f 0201 	mvn.w	r2, #1
 8008018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f7fa f814 	bl	8002048 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008026:	2b00      	cmp	r3, #0
 8008028:	d00c      	beq.n	8008044 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008030:	2b00      	cmp	r3, #0
 8008032:	d007      	beq.n	8008044 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800803c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 fedc 	bl	8008dfc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800804a:	2b00      	cmp	r3, #0
 800804c:	d00c      	beq.n	8008068 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008054:	2b00      	cmp	r3, #0
 8008056:	d007      	beq.n	8008068 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 fed4 	bl	8008e10 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800806e:	2b00      	cmp	r3, #0
 8008070:	d00c      	beq.n	800808c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008078:	2b00      	cmp	r3, #0
 800807a:	d007      	beq.n	800808c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f000 fa11 	bl	80084ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	f003 0320 	and.w	r3, r3, #32
 8008092:	2b00      	cmp	r3, #0
 8008094:	d00c      	beq.n	80080b0 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	f003 0320 	and.w	r3, r3, #32
 800809c:	2b00      	cmp	r3, #0
 800809e:	d007      	beq.n	80080b0 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f06f 0220 	mvn.w	r2, #32
 80080a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 fe9c 	bl	8008de8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80080b0:	bf00      	nop
 80080b2:	3710      	adds	r7, #16
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}

080080b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b086      	sub	sp, #24
 80080bc:	af00      	add	r7, sp, #0
 80080be:	60f8      	str	r0, [r7, #12]
 80080c0:	60b9      	str	r1, [r7, #8]
 80080c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80080c4:	2300      	movs	r3, #0
 80080c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080ce:	2b01      	cmp	r3, #1
 80080d0:	d101      	bne.n	80080d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80080d2:	2302      	movs	r3, #2
 80080d4:	e0ff      	b.n	80082d6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2201      	movs	r2, #1
 80080da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2b14      	cmp	r3, #20
 80080e2:	f200 80f0 	bhi.w	80082c6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80080e6:	a201      	add	r2, pc, #4	; (adr r2, 80080ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80080e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ec:	08008141 	.word	0x08008141
 80080f0:	080082c7 	.word	0x080082c7
 80080f4:	080082c7 	.word	0x080082c7
 80080f8:	080082c7 	.word	0x080082c7
 80080fc:	08008181 	.word	0x08008181
 8008100:	080082c7 	.word	0x080082c7
 8008104:	080082c7 	.word	0x080082c7
 8008108:	080082c7 	.word	0x080082c7
 800810c:	080081c3 	.word	0x080081c3
 8008110:	080082c7 	.word	0x080082c7
 8008114:	080082c7 	.word	0x080082c7
 8008118:	080082c7 	.word	0x080082c7
 800811c:	08008203 	.word	0x08008203
 8008120:	080082c7 	.word	0x080082c7
 8008124:	080082c7 	.word	0x080082c7
 8008128:	080082c7 	.word	0x080082c7
 800812c:	08008245 	.word	0x08008245
 8008130:	080082c7 	.word	0x080082c7
 8008134:	080082c7 	.word	0x080082c7
 8008138:	080082c7 	.word	0x080082c7
 800813c:	08008285 	.word	0x08008285
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	68b9      	ldr	r1, [r7, #8]
 8008146:	4618      	mov	r0, r3
 8008148:	f000 fa56 	bl	80085f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	699a      	ldr	r2, [r3, #24]
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f042 0208 	orr.w	r2, r2, #8
 800815a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	699a      	ldr	r2, [r3, #24]
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f022 0204 	bic.w	r2, r2, #4
 800816a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	6999      	ldr	r1, [r3, #24]
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	691a      	ldr	r2, [r3, #16]
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	430a      	orrs	r2, r1
 800817c:	619a      	str	r2, [r3, #24]
      break;
 800817e:	e0a5      	b.n	80082cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	68b9      	ldr	r1, [r7, #8]
 8008186:	4618      	mov	r0, r3
 8008188:	f000 fac6 	bl	8008718 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	699a      	ldr	r2, [r3, #24]
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800819a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	699a      	ldr	r2, [r3, #24]
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	6999      	ldr	r1, [r3, #24]
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	691b      	ldr	r3, [r3, #16]
 80081b6:	021a      	lsls	r2, r3, #8
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	430a      	orrs	r2, r1
 80081be:	619a      	str	r2, [r3, #24]
      break;
 80081c0:	e084      	b.n	80082cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	68b9      	ldr	r1, [r7, #8]
 80081c8:	4618      	mov	r0, r3
 80081ca:	f000 fb2f 	bl	800882c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	69da      	ldr	r2, [r3, #28]
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f042 0208 	orr.w	r2, r2, #8
 80081dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	69da      	ldr	r2, [r3, #28]
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f022 0204 	bic.w	r2, r2, #4
 80081ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	69d9      	ldr	r1, [r3, #28]
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	691a      	ldr	r2, [r3, #16]
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	430a      	orrs	r2, r1
 80081fe:	61da      	str	r2, [r3, #28]
      break;
 8008200:	e064      	b.n	80082cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	68b9      	ldr	r1, [r7, #8]
 8008208:	4618      	mov	r0, r3
 800820a:	f000 fb97 	bl	800893c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	69da      	ldr	r2, [r3, #28]
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800821c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	69da      	ldr	r2, [r3, #28]
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800822c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	69d9      	ldr	r1, [r3, #28]
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	691b      	ldr	r3, [r3, #16]
 8008238:	021a      	lsls	r2, r3, #8
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	430a      	orrs	r2, r1
 8008240:	61da      	str	r2, [r3, #28]
      break;
 8008242:	e043      	b.n	80082cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	68b9      	ldr	r1, [r7, #8]
 800824a:	4618      	mov	r0, r3
 800824c:	f000 fbe0 	bl	8008a10 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f042 0208 	orr.w	r2, r2, #8
 800825e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f022 0204 	bic.w	r2, r2, #4
 800826e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	691a      	ldr	r2, [r3, #16]
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	430a      	orrs	r2, r1
 8008280:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008282:	e023      	b.n	80082cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	68b9      	ldr	r1, [r7, #8]
 800828a:	4618      	mov	r0, r3
 800828c:	f000 fc24 	bl	8008ad8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800829e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082ae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	691b      	ldr	r3, [r3, #16]
 80082ba:	021a      	lsls	r2, r3, #8
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	430a      	orrs	r2, r1
 80082c2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80082c4:	e002      	b.n	80082cc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80082c6:	2301      	movs	r3, #1
 80082c8:	75fb      	strb	r3, [r7, #23]
      break;
 80082ca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2200      	movs	r2, #0
 80082d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80082d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3718      	adds	r7, #24
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}
 80082de:	bf00      	nop

080082e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b084      	sub	sp, #16
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
 80082e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80082ea:	2300      	movs	r3, #0
 80082ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d101      	bne.n	80082fc <HAL_TIM_ConfigClockSource+0x1c>
 80082f8:	2302      	movs	r3, #2
 80082fa:	e0b6      	b.n	800846a <HAL_TIM_ConfigClockSource+0x18a>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2201      	movs	r2, #1
 8008300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2202      	movs	r2, #2
 8008308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	689b      	ldr	r3, [r3, #8]
 8008312:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800831a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800831e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008326:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	68ba      	ldr	r2, [r7, #8]
 800832e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008338:	d03e      	beq.n	80083b8 <HAL_TIM_ConfigClockSource+0xd8>
 800833a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800833e:	f200 8087 	bhi.w	8008450 <HAL_TIM_ConfigClockSource+0x170>
 8008342:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008346:	f000 8086 	beq.w	8008456 <HAL_TIM_ConfigClockSource+0x176>
 800834a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800834e:	d87f      	bhi.n	8008450 <HAL_TIM_ConfigClockSource+0x170>
 8008350:	2b70      	cmp	r3, #112	; 0x70
 8008352:	d01a      	beq.n	800838a <HAL_TIM_ConfigClockSource+0xaa>
 8008354:	2b70      	cmp	r3, #112	; 0x70
 8008356:	d87b      	bhi.n	8008450 <HAL_TIM_ConfigClockSource+0x170>
 8008358:	2b60      	cmp	r3, #96	; 0x60
 800835a:	d050      	beq.n	80083fe <HAL_TIM_ConfigClockSource+0x11e>
 800835c:	2b60      	cmp	r3, #96	; 0x60
 800835e:	d877      	bhi.n	8008450 <HAL_TIM_ConfigClockSource+0x170>
 8008360:	2b50      	cmp	r3, #80	; 0x50
 8008362:	d03c      	beq.n	80083de <HAL_TIM_ConfigClockSource+0xfe>
 8008364:	2b50      	cmp	r3, #80	; 0x50
 8008366:	d873      	bhi.n	8008450 <HAL_TIM_ConfigClockSource+0x170>
 8008368:	2b40      	cmp	r3, #64	; 0x40
 800836a:	d058      	beq.n	800841e <HAL_TIM_ConfigClockSource+0x13e>
 800836c:	2b40      	cmp	r3, #64	; 0x40
 800836e:	d86f      	bhi.n	8008450 <HAL_TIM_ConfigClockSource+0x170>
 8008370:	2b30      	cmp	r3, #48	; 0x30
 8008372:	d064      	beq.n	800843e <HAL_TIM_ConfigClockSource+0x15e>
 8008374:	2b30      	cmp	r3, #48	; 0x30
 8008376:	d86b      	bhi.n	8008450 <HAL_TIM_ConfigClockSource+0x170>
 8008378:	2b20      	cmp	r3, #32
 800837a:	d060      	beq.n	800843e <HAL_TIM_ConfigClockSource+0x15e>
 800837c:	2b20      	cmp	r3, #32
 800837e:	d867      	bhi.n	8008450 <HAL_TIM_ConfigClockSource+0x170>
 8008380:	2b00      	cmp	r3, #0
 8008382:	d05c      	beq.n	800843e <HAL_TIM_ConfigClockSource+0x15e>
 8008384:	2b10      	cmp	r3, #16
 8008386:	d05a      	beq.n	800843e <HAL_TIM_ConfigClockSource+0x15e>
 8008388:	e062      	b.n	8008450 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800839a:	f000 fc7d 	bl	8008c98 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	689b      	ldr	r3, [r3, #8]
 80083a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80083ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	68ba      	ldr	r2, [r7, #8]
 80083b4:	609a      	str	r2, [r3, #8]
      break;
 80083b6:	e04f      	b.n	8008458 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80083c8:	f000 fc66 	bl	8008c98 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	689a      	ldr	r2, [r3, #8]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80083da:	609a      	str	r2, [r3, #8]
      break;
 80083dc:	e03c      	b.n	8008458 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80083ea:	461a      	mov	r2, r3
 80083ec:	f000 fbda 	bl	8008ba4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	2150      	movs	r1, #80	; 0x50
 80083f6:	4618      	mov	r0, r3
 80083f8:	f000 fc33 	bl	8008c62 <TIM_ITRx_SetConfig>
      break;
 80083fc:	e02c      	b.n	8008458 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800840a:	461a      	mov	r2, r3
 800840c:	f000 fbf9 	bl	8008c02 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	2160      	movs	r1, #96	; 0x60
 8008416:	4618      	mov	r0, r3
 8008418:	f000 fc23 	bl	8008c62 <TIM_ITRx_SetConfig>
      break;
 800841c:	e01c      	b.n	8008458 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800842a:	461a      	mov	r2, r3
 800842c:	f000 fbba 	bl	8008ba4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	2140      	movs	r1, #64	; 0x40
 8008436:	4618      	mov	r0, r3
 8008438:	f000 fc13 	bl	8008c62 <TIM_ITRx_SetConfig>
      break;
 800843c:	e00c      	b.n	8008458 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681a      	ldr	r2, [r3, #0]
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4619      	mov	r1, r3
 8008448:	4610      	mov	r0, r2
 800844a:	f000 fc0a 	bl	8008c62 <TIM_ITRx_SetConfig>
      break;
 800844e:	e003      	b.n	8008458 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8008450:	2301      	movs	r3, #1
 8008452:	73fb      	strb	r3, [r7, #15]
      break;
 8008454:	e000      	b.n	8008458 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8008456:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2201      	movs	r2, #1
 800845c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2200      	movs	r2, #0
 8008464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008468:	7bfb      	ldrb	r3, [r7, #15]
}
 800846a:	4618      	mov	r0, r3
 800846c:	3710      	adds	r7, #16
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}

08008472 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008472:	b480      	push	{r7}
 8008474:	b083      	sub	sp, #12
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800847a:	bf00      	nop
 800847c:	370c      	adds	r7, #12
 800847e:	46bd      	mov	sp, r7
 8008480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008484:	4770      	bx	lr

08008486 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008486:	b480      	push	{r7}
 8008488:	b083      	sub	sp, #12
 800848a:	af00      	add	r7, sp, #0
 800848c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800848e:	bf00      	nop
 8008490:	370c      	adds	r7, #12
 8008492:	46bd      	mov	sp, r7
 8008494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008498:	4770      	bx	lr

0800849a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800849a:	b480      	push	{r7}
 800849c:	b083      	sub	sp, #12
 800849e:	af00      	add	r7, sp, #0
 80084a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80084a2:	bf00      	nop
 80084a4:	370c      	adds	r7, #12
 80084a6:	46bd      	mov	sp, r7
 80084a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ac:	4770      	bx	lr

080084ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80084ae:	b480      	push	{r7}
 80084b0:	b083      	sub	sp, #12
 80084b2:	af00      	add	r7, sp, #0
 80084b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80084b6:	bf00      	nop
 80084b8:	370c      	adds	r7, #12
 80084ba:	46bd      	mov	sp, r7
 80084bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c0:	4770      	bx	lr
	...

080084c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b085      	sub	sp, #20
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
 80084cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	4a40      	ldr	r2, [pc, #256]	; (80085d8 <TIM_Base_SetConfig+0x114>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d013      	beq.n	8008504 <TIM_Base_SetConfig+0x40>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084e2:	d00f      	beq.n	8008504 <TIM_Base_SetConfig+0x40>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	4a3d      	ldr	r2, [pc, #244]	; (80085dc <TIM_Base_SetConfig+0x118>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d00b      	beq.n	8008504 <TIM_Base_SetConfig+0x40>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	4a3c      	ldr	r2, [pc, #240]	; (80085e0 <TIM_Base_SetConfig+0x11c>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d007      	beq.n	8008504 <TIM_Base_SetConfig+0x40>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	4a3b      	ldr	r2, [pc, #236]	; (80085e4 <TIM_Base_SetConfig+0x120>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d003      	beq.n	8008504 <TIM_Base_SetConfig+0x40>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	4a3a      	ldr	r2, [pc, #232]	; (80085e8 <TIM_Base_SetConfig+0x124>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d108      	bne.n	8008516 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800850a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	685b      	ldr	r3, [r3, #4]
 8008510:	68fa      	ldr	r2, [r7, #12]
 8008512:	4313      	orrs	r3, r2
 8008514:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	4a2f      	ldr	r2, [pc, #188]	; (80085d8 <TIM_Base_SetConfig+0x114>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d01f      	beq.n	800855e <TIM_Base_SetConfig+0x9a>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008524:	d01b      	beq.n	800855e <TIM_Base_SetConfig+0x9a>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	4a2c      	ldr	r2, [pc, #176]	; (80085dc <TIM_Base_SetConfig+0x118>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d017      	beq.n	800855e <TIM_Base_SetConfig+0x9a>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	4a2b      	ldr	r2, [pc, #172]	; (80085e0 <TIM_Base_SetConfig+0x11c>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d013      	beq.n	800855e <TIM_Base_SetConfig+0x9a>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	4a2a      	ldr	r2, [pc, #168]	; (80085e4 <TIM_Base_SetConfig+0x120>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d00f      	beq.n	800855e <TIM_Base_SetConfig+0x9a>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	4a29      	ldr	r2, [pc, #164]	; (80085e8 <TIM_Base_SetConfig+0x124>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d00b      	beq.n	800855e <TIM_Base_SetConfig+0x9a>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	4a28      	ldr	r2, [pc, #160]	; (80085ec <TIM_Base_SetConfig+0x128>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d007      	beq.n	800855e <TIM_Base_SetConfig+0x9a>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	4a27      	ldr	r2, [pc, #156]	; (80085f0 <TIM_Base_SetConfig+0x12c>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d003      	beq.n	800855e <TIM_Base_SetConfig+0x9a>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	4a26      	ldr	r2, [pc, #152]	; (80085f4 <TIM_Base_SetConfig+0x130>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d108      	bne.n	8008570 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008564:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	68db      	ldr	r3, [r3, #12]
 800856a:	68fa      	ldr	r2, [r7, #12]
 800856c:	4313      	orrs	r3, r2
 800856e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	695b      	ldr	r3, [r3, #20]
 800857a:	4313      	orrs	r3, r2
 800857c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	68fa      	ldr	r2, [r7, #12]
 8008582:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	689a      	ldr	r2, [r3, #8]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	681a      	ldr	r2, [r3, #0]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	4a10      	ldr	r2, [pc, #64]	; (80085d8 <TIM_Base_SetConfig+0x114>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d00f      	beq.n	80085bc <TIM_Base_SetConfig+0xf8>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	4a12      	ldr	r2, [pc, #72]	; (80085e8 <TIM_Base_SetConfig+0x124>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d00b      	beq.n	80085bc <TIM_Base_SetConfig+0xf8>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	4a11      	ldr	r2, [pc, #68]	; (80085ec <TIM_Base_SetConfig+0x128>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d007      	beq.n	80085bc <TIM_Base_SetConfig+0xf8>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	4a10      	ldr	r2, [pc, #64]	; (80085f0 <TIM_Base_SetConfig+0x12c>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d003      	beq.n	80085bc <TIM_Base_SetConfig+0xf8>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	4a0f      	ldr	r2, [pc, #60]	; (80085f4 <TIM_Base_SetConfig+0x130>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d103      	bne.n	80085c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	691a      	ldr	r2, [r3, #16]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2201      	movs	r2, #1
 80085c8:	615a      	str	r2, [r3, #20]
}
 80085ca:	bf00      	nop
 80085cc:	3714      	adds	r7, #20
 80085ce:	46bd      	mov	sp, r7
 80085d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d4:	4770      	bx	lr
 80085d6:	bf00      	nop
 80085d8:	40012c00 	.word	0x40012c00
 80085dc:	40000400 	.word	0x40000400
 80085e0:	40000800 	.word	0x40000800
 80085e4:	40000c00 	.word	0x40000c00
 80085e8:	40013400 	.word	0x40013400
 80085ec:	40014000 	.word	0x40014000
 80085f0:	40014400 	.word	0x40014400
 80085f4:	40014800 	.word	0x40014800

080085f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b087      	sub	sp, #28
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
 8008600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6a1b      	ldr	r3, [r3, #32]
 8008606:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6a1b      	ldr	r3, [r3, #32]
 800860c:	f023 0201 	bic.w	r2, r3, #1
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	699b      	ldr	r3, [r3, #24]
 800861e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800862a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	f023 0303 	bic.w	r3, r3, #3
 8008632:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	68fa      	ldr	r2, [r7, #12]
 800863a:	4313      	orrs	r3, r2
 800863c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	f023 0302 	bic.w	r3, r3, #2
 8008644:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	697a      	ldr	r2, [r7, #20]
 800864c:	4313      	orrs	r3, r2
 800864e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	4a2c      	ldr	r2, [pc, #176]	; (8008704 <TIM_OC1_SetConfig+0x10c>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d00f      	beq.n	8008678 <TIM_OC1_SetConfig+0x80>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	4a2b      	ldr	r2, [pc, #172]	; (8008708 <TIM_OC1_SetConfig+0x110>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d00b      	beq.n	8008678 <TIM_OC1_SetConfig+0x80>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	4a2a      	ldr	r2, [pc, #168]	; (800870c <TIM_OC1_SetConfig+0x114>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d007      	beq.n	8008678 <TIM_OC1_SetConfig+0x80>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	4a29      	ldr	r2, [pc, #164]	; (8008710 <TIM_OC1_SetConfig+0x118>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d003      	beq.n	8008678 <TIM_OC1_SetConfig+0x80>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	4a28      	ldr	r2, [pc, #160]	; (8008714 <TIM_OC1_SetConfig+0x11c>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d10c      	bne.n	8008692 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	f023 0308 	bic.w	r3, r3, #8
 800867e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	68db      	ldr	r3, [r3, #12]
 8008684:	697a      	ldr	r2, [r7, #20]
 8008686:	4313      	orrs	r3, r2
 8008688:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	f023 0304 	bic.w	r3, r3, #4
 8008690:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	4a1b      	ldr	r2, [pc, #108]	; (8008704 <TIM_OC1_SetConfig+0x10c>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d00f      	beq.n	80086ba <TIM_OC1_SetConfig+0xc2>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	4a1a      	ldr	r2, [pc, #104]	; (8008708 <TIM_OC1_SetConfig+0x110>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d00b      	beq.n	80086ba <TIM_OC1_SetConfig+0xc2>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	4a19      	ldr	r2, [pc, #100]	; (800870c <TIM_OC1_SetConfig+0x114>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d007      	beq.n	80086ba <TIM_OC1_SetConfig+0xc2>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	4a18      	ldr	r2, [pc, #96]	; (8008710 <TIM_OC1_SetConfig+0x118>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d003      	beq.n	80086ba <TIM_OC1_SetConfig+0xc2>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	4a17      	ldr	r2, [pc, #92]	; (8008714 <TIM_OC1_SetConfig+0x11c>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d111      	bne.n	80086de <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80086c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80086c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	695b      	ldr	r3, [r3, #20]
 80086ce:	693a      	ldr	r2, [r7, #16]
 80086d0:	4313      	orrs	r3, r2
 80086d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	699b      	ldr	r3, [r3, #24]
 80086d8:	693a      	ldr	r2, [r7, #16]
 80086da:	4313      	orrs	r3, r2
 80086dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	693a      	ldr	r2, [r7, #16]
 80086e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	68fa      	ldr	r2, [r7, #12]
 80086e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	685a      	ldr	r2, [r3, #4]
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	697a      	ldr	r2, [r7, #20]
 80086f6:	621a      	str	r2, [r3, #32]
}
 80086f8:	bf00      	nop
 80086fa:	371c      	adds	r7, #28
 80086fc:	46bd      	mov	sp, r7
 80086fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008702:	4770      	bx	lr
 8008704:	40012c00 	.word	0x40012c00
 8008708:	40013400 	.word	0x40013400
 800870c:	40014000 	.word	0x40014000
 8008710:	40014400 	.word	0x40014400
 8008714:	40014800 	.word	0x40014800

08008718 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008718:	b480      	push	{r7}
 800871a:	b087      	sub	sp, #28
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6a1b      	ldr	r3, [r3, #32]
 8008726:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6a1b      	ldr	r3, [r3, #32]
 800872c:	f023 0210 	bic.w	r2, r3, #16
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	699b      	ldr	r3, [r3, #24]
 800873e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008746:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800874a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008752:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	021b      	lsls	r3, r3, #8
 800875a:	68fa      	ldr	r2, [r7, #12]
 800875c:	4313      	orrs	r3, r2
 800875e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	f023 0320 	bic.w	r3, r3, #32
 8008766:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	689b      	ldr	r3, [r3, #8]
 800876c:	011b      	lsls	r3, r3, #4
 800876e:	697a      	ldr	r2, [r7, #20]
 8008770:	4313      	orrs	r3, r2
 8008772:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	4a28      	ldr	r2, [pc, #160]	; (8008818 <TIM_OC2_SetConfig+0x100>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d003      	beq.n	8008784 <TIM_OC2_SetConfig+0x6c>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	4a27      	ldr	r2, [pc, #156]	; (800881c <TIM_OC2_SetConfig+0x104>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d10d      	bne.n	80087a0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800878a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	68db      	ldr	r3, [r3, #12]
 8008790:	011b      	lsls	r3, r3, #4
 8008792:	697a      	ldr	r2, [r7, #20]
 8008794:	4313      	orrs	r3, r2
 8008796:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800879e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	4a1d      	ldr	r2, [pc, #116]	; (8008818 <TIM_OC2_SetConfig+0x100>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d00f      	beq.n	80087c8 <TIM_OC2_SetConfig+0xb0>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	4a1c      	ldr	r2, [pc, #112]	; (800881c <TIM_OC2_SetConfig+0x104>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d00b      	beq.n	80087c8 <TIM_OC2_SetConfig+0xb0>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	4a1b      	ldr	r2, [pc, #108]	; (8008820 <TIM_OC2_SetConfig+0x108>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d007      	beq.n	80087c8 <TIM_OC2_SetConfig+0xb0>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	4a1a      	ldr	r2, [pc, #104]	; (8008824 <TIM_OC2_SetConfig+0x10c>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d003      	beq.n	80087c8 <TIM_OC2_SetConfig+0xb0>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	4a19      	ldr	r2, [pc, #100]	; (8008828 <TIM_OC2_SetConfig+0x110>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d113      	bne.n	80087f0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80087ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80087d0:	693b      	ldr	r3, [r7, #16]
 80087d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80087d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	695b      	ldr	r3, [r3, #20]
 80087dc:	009b      	lsls	r3, r3, #2
 80087de:	693a      	ldr	r2, [r7, #16]
 80087e0:	4313      	orrs	r3, r2
 80087e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	699b      	ldr	r3, [r3, #24]
 80087e8:	009b      	lsls	r3, r3, #2
 80087ea:	693a      	ldr	r2, [r7, #16]
 80087ec:	4313      	orrs	r3, r2
 80087ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	693a      	ldr	r2, [r7, #16]
 80087f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	68fa      	ldr	r2, [r7, #12]
 80087fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	685a      	ldr	r2, [r3, #4]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	697a      	ldr	r2, [r7, #20]
 8008808:	621a      	str	r2, [r3, #32]
}
 800880a:	bf00      	nop
 800880c:	371c      	adds	r7, #28
 800880e:	46bd      	mov	sp, r7
 8008810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008814:	4770      	bx	lr
 8008816:	bf00      	nop
 8008818:	40012c00 	.word	0x40012c00
 800881c:	40013400 	.word	0x40013400
 8008820:	40014000 	.word	0x40014000
 8008824:	40014400 	.word	0x40014400
 8008828:	40014800 	.word	0x40014800

0800882c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800882c:	b480      	push	{r7}
 800882e:	b087      	sub	sp, #28
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6a1b      	ldr	r3, [r3, #32]
 800883a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6a1b      	ldr	r3, [r3, #32]
 8008840:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	685b      	ldr	r3, [r3, #4]
 800884c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	69db      	ldr	r3, [r3, #28]
 8008852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800885a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800885e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	f023 0303 	bic.w	r3, r3, #3
 8008866:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	68fa      	ldr	r2, [r7, #12]
 800886e:	4313      	orrs	r3, r2
 8008870:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008878:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	689b      	ldr	r3, [r3, #8]
 800887e:	021b      	lsls	r3, r3, #8
 8008880:	697a      	ldr	r2, [r7, #20]
 8008882:	4313      	orrs	r3, r2
 8008884:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	4a27      	ldr	r2, [pc, #156]	; (8008928 <TIM_OC3_SetConfig+0xfc>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d003      	beq.n	8008896 <TIM_OC3_SetConfig+0x6a>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	4a26      	ldr	r2, [pc, #152]	; (800892c <TIM_OC3_SetConfig+0x100>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d10d      	bne.n	80088b2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800889c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	68db      	ldr	r3, [r3, #12]
 80088a2:	021b      	lsls	r3, r3, #8
 80088a4:	697a      	ldr	r2, [r7, #20]
 80088a6:	4313      	orrs	r3, r2
 80088a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80088b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	4a1c      	ldr	r2, [pc, #112]	; (8008928 <TIM_OC3_SetConfig+0xfc>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d00f      	beq.n	80088da <TIM_OC3_SetConfig+0xae>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	4a1b      	ldr	r2, [pc, #108]	; (800892c <TIM_OC3_SetConfig+0x100>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d00b      	beq.n	80088da <TIM_OC3_SetConfig+0xae>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	4a1a      	ldr	r2, [pc, #104]	; (8008930 <TIM_OC3_SetConfig+0x104>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d007      	beq.n	80088da <TIM_OC3_SetConfig+0xae>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	4a19      	ldr	r2, [pc, #100]	; (8008934 <TIM_OC3_SetConfig+0x108>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d003      	beq.n	80088da <TIM_OC3_SetConfig+0xae>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	4a18      	ldr	r2, [pc, #96]	; (8008938 <TIM_OC3_SetConfig+0x10c>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d113      	bne.n	8008902 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80088e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80088e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	695b      	ldr	r3, [r3, #20]
 80088ee:	011b      	lsls	r3, r3, #4
 80088f0:	693a      	ldr	r2, [r7, #16]
 80088f2:	4313      	orrs	r3, r2
 80088f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	699b      	ldr	r3, [r3, #24]
 80088fa:	011b      	lsls	r3, r3, #4
 80088fc:	693a      	ldr	r2, [r7, #16]
 80088fe:	4313      	orrs	r3, r2
 8008900:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	693a      	ldr	r2, [r7, #16]
 8008906:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	68fa      	ldr	r2, [r7, #12]
 800890c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	685a      	ldr	r2, [r3, #4]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	697a      	ldr	r2, [r7, #20]
 800891a:	621a      	str	r2, [r3, #32]
}
 800891c:	bf00      	nop
 800891e:	371c      	adds	r7, #28
 8008920:	46bd      	mov	sp, r7
 8008922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008926:	4770      	bx	lr
 8008928:	40012c00 	.word	0x40012c00
 800892c:	40013400 	.word	0x40013400
 8008930:	40014000 	.word	0x40014000
 8008934:	40014400 	.word	0x40014400
 8008938:	40014800 	.word	0x40014800

0800893c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800893c:	b480      	push	{r7}
 800893e:	b087      	sub	sp, #28
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6a1b      	ldr	r3, [r3, #32]
 800894a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6a1b      	ldr	r3, [r3, #32]
 8008950:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	69db      	ldr	r3, [r3, #28]
 8008962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800896a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800896e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008976:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	021b      	lsls	r3, r3, #8
 800897e:	68fa      	ldr	r2, [r7, #12]
 8008980:	4313      	orrs	r3, r2
 8008982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800898a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	689b      	ldr	r3, [r3, #8]
 8008990:	031b      	lsls	r3, r3, #12
 8008992:	693a      	ldr	r2, [r7, #16]
 8008994:	4313      	orrs	r3, r2
 8008996:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	4a18      	ldr	r2, [pc, #96]	; (80089fc <TIM_OC4_SetConfig+0xc0>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d00f      	beq.n	80089c0 <TIM_OC4_SetConfig+0x84>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	4a17      	ldr	r2, [pc, #92]	; (8008a00 <TIM_OC4_SetConfig+0xc4>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d00b      	beq.n	80089c0 <TIM_OC4_SetConfig+0x84>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	4a16      	ldr	r2, [pc, #88]	; (8008a04 <TIM_OC4_SetConfig+0xc8>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d007      	beq.n	80089c0 <TIM_OC4_SetConfig+0x84>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	4a15      	ldr	r2, [pc, #84]	; (8008a08 <TIM_OC4_SetConfig+0xcc>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d003      	beq.n	80089c0 <TIM_OC4_SetConfig+0x84>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	4a14      	ldr	r2, [pc, #80]	; (8008a0c <TIM_OC4_SetConfig+0xd0>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d109      	bne.n	80089d4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80089c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	695b      	ldr	r3, [r3, #20]
 80089cc:	019b      	lsls	r3, r3, #6
 80089ce:	697a      	ldr	r2, [r7, #20]
 80089d0:	4313      	orrs	r3, r2
 80089d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	697a      	ldr	r2, [r7, #20]
 80089d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	68fa      	ldr	r2, [r7, #12]
 80089de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	685a      	ldr	r2, [r3, #4]
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	693a      	ldr	r2, [r7, #16]
 80089ec:	621a      	str	r2, [r3, #32]
}
 80089ee:	bf00      	nop
 80089f0:	371c      	adds	r7, #28
 80089f2:	46bd      	mov	sp, r7
 80089f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f8:	4770      	bx	lr
 80089fa:	bf00      	nop
 80089fc:	40012c00 	.word	0x40012c00
 8008a00:	40013400 	.word	0x40013400
 8008a04:	40014000 	.word	0x40014000
 8008a08:	40014400 	.word	0x40014400
 8008a0c:	40014800 	.word	0x40014800

08008a10 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008a10:	b480      	push	{r7}
 8008a12:	b087      	sub	sp, #28
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
 8008a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6a1b      	ldr	r3, [r3, #32]
 8008a1e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6a1b      	ldr	r3, [r3, #32]
 8008a24:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	68fa      	ldr	r2, [r7, #12]
 8008a4a:	4313      	orrs	r3, r2
 8008a4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008a4e:	693b      	ldr	r3, [r7, #16]
 8008a50:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008a54:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	689b      	ldr	r3, [r3, #8]
 8008a5a:	041b      	lsls	r3, r3, #16
 8008a5c:	693a      	ldr	r2, [r7, #16]
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	4a17      	ldr	r2, [pc, #92]	; (8008ac4 <TIM_OC5_SetConfig+0xb4>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d00f      	beq.n	8008a8a <TIM_OC5_SetConfig+0x7a>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	4a16      	ldr	r2, [pc, #88]	; (8008ac8 <TIM_OC5_SetConfig+0xb8>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d00b      	beq.n	8008a8a <TIM_OC5_SetConfig+0x7a>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	4a15      	ldr	r2, [pc, #84]	; (8008acc <TIM_OC5_SetConfig+0xbc>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d007      	beq.n	8008a8a <TIM_OC5_SetConfig+0x7a>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	4a14      	ldr	r2, [pc, #80]	; (8008ad0 <TIM_OC5_SetConfig+0xc0>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d003      	beq.n	8008a8a <TIM_OC5_SetConfig+0x7a>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	4a13      	ldr	r2, [pc, #76]	; (8008ad4 <TIM_OC5_SetConfig+0xc4>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d109      	bne.n	8008a9e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a90:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	695b      	ldr	r3, [r3, #20]
 8008a96:	021b      	lsls	r3, r3, #8
 8008a98:	697a      	ldr	r2, [r7, #20]
 8008a9a:	4313      	orrs	r3, r2
 8008a9c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	697a      	ldr	r2, [r7, #20]
 8008aa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	68fa      	ldr	r2, [r7, #12]
 8008aa8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	685a      	ldr	r2, [r3, #4]
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	693a      	ldr	r2, [r7, #16]
 8008ab6:	621a      	str	r2, [r3, #32]
}
 8008ab8:	bf00      	nop
 8008aba:	371c      	adds	r7, #28
 8008abc:	46bd      	mov	sp, r7
 8008abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac2:	4770      	bx	lr
 8008ac4:	40012c00 	.word	0x40012c00
 8008ac8:	40013400 	.word	0x40013400
 8008acc:	40014000 	.word	0x40014000
 8008ad0:	40014400 	.word	0x40014400
 8008ad4:	40014800 	.word	0x40014800

08008ad8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b087      	sub	sp, #28
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6a1b      	ldr	r3, [r3, #32]
 8008ae6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6a1b      	ldr	r3, [r3, #32]
 8008aec:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	685b      	ldr	r3, [r3, #4]
 8008af8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008b06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	021b      	lsls	r3, r3, #8
 8008b12:	68fa      	ldr	r2, [r7, #12]
 8008b14:	4313      	orrs	r3, r2
 8008b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008b1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	689b      	ldr	r3, [r3, #8]
 8008b24:	051b      	lsls	r3, r3, #20
 8008b26:	693a      	ldr	r2, [r7, #16]
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	4a18      	ldr	r2, [pc, #96]	; (8008b90 <TIM_OC6_SetConfig+0xb8>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d00f      	beq.n	8008b54 <TIM_OC6_SetConfig+0x7c>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	4a17      	ldr	r2, [pc, #92]	; (8008b94 <TIM_OC6_SetConfig+0xbc>)
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d00b      	beq.n	8008b54 <TIM_OC6_SetConfig+0x7c>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	4a16      	ldr	r2, [pc, #88]	; (8008b98 <TIM_OC6_SetConfig+0xc0>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d007      	beq.n	8008b54 <TIM_OC6_SetConfig+0x7c>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	4a15      	ldr	r2, [pc, #84]	; (8008b9c <TIM_OC6_SetConfig+0xc4>)
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d003      	beq.n	8008b54 <TIM_OC6_SetConfig+0x7c>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	4a14      	ldr	r2, [pc, #80]	; (8008ba0 <TIM_OC6_SetConfig+0xc8>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d109      	bne.n	8008b68 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008b5a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	695b      	ldr	r3, [r3, #20]
 8008b60:	029b      	lsls	r3, r3, #10
 8008b62:	697a      	ldr	r2, [r7, #20]
 8008b64:	4313      	orrs	r3, r2
 8008b66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	697a      	ldr	r2, [r7, #20]
 8008b6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	68fa      	ldr	r2, [r7, #12]
 8008b72:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	685a      	ldr	r2, [r3, #4]
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	693a      	ldr	r2, [r7, #16]
 8008b80:	621a      	str	r2, [r3, #32]
}
 8008b82:	bf00      	nop
 8008b84:	371c      	adds	r7, #28
 8008b86:	46bd      	mov	sp, r7
 8008b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8c:	4770      	bx	lr
 8008b8e:	bf00      	nop
 8008b90:	40012c00 	.word	0x40012c00
 8008b94:	40013400 	.word	0x40013400
 8008b98:	40014000 	.word	0x40014000
 8008b9c:	40014400 	.word	0x40014400
 8008ba0:	40014800 	.word	0x40014800

08008ba4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b087      	sub	sp, #28
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	60f8      	str	r0, [r7, #12]
 8008bac:	60b9      	str	r1, [r7, #8]
 8008bae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	6a1b      	ldr	r3, [r3, #32]
 8008bb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	6a1b      	ldr	r3, [r3, #32]
 8008bba:	f023 0201 	bic.w	r2, r3, #1
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	699b      	ldr	r3, [r3, #24]
 8008bc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008bce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	011b      	lsls	r3, r3, #4
 8008bd4:	693a      	ldr	r2, [r7, #16]
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	f023 030a 	bic.w	r3, r3, #10
 8008be0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008be2:	697a      	ldr	r2, [r7, #20]
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	4313      	orrs	r3, r2
 8008be8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	693a      	ldr	r2, [r7, #16]
 8008bee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	697a      	ldr	r2, [r7, #20]
 8008bf4:	621a      	str	r2, [r3, #32]
}
 8008bf6:	bf00      	nop
 8008bf8:	371c      	adds	r7, #28
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c00:	4770      	bx	lr

08008c02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c02:	b480      	push	{r7}
 8008c04:	b087      	sub	sp, #28
 8008c06:	af00      	add	r7, sp, #0
 8008c08:	60f8      	str	r0, [r7, #12]
 8008c0a:	60b9      	str	r1, [r7, #8]
 8008c0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	6a1b      	ldr	r3, [r3, #32]
 8008c12:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	6a1b      	ldr	r3, [r3, #32]
 8008c18:	f023 0210 	bic.w	r2, r3, #16
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	699b      	ldr	r3, [r3, #24]
 8008c24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008c2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	031b      	lsls	r3, r3, #12
 8008c32:	693a      	ldr	r2, [r7, #16]
 8008c34:	4313      	orrs	r3, r2
 8008c36:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008c3e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	011b      	lsls	r3, r3, #4
 8008c44:	697a      	ldr	r2, [r7, #20]
 8008c46:	4313      	orrs	r3, r2
 8008c48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	693a      	ldr	r2, [r7, #16]
 8008c4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	697a      	ldr	r2, [r7, #20]
 8008c54:	621a      	str	r2, [r3, #32]
}
 8008c56:	bf00      	nop
 8008c58:	371c      	adds	r7, #28
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c60:	4770      	bx	lr

08008c62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008c62:	b480      	push	{r7}
 8008c64:	b085      	sub	sp, #20
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	6078      	str	r0, [r7, #4]
 8008c6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	689b      	ldr	r3, [r3, #8]
 8008c70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008c7a:	683a      	ldr	r2, [r7, #0]
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	4313      	orrs	r3, r2
 8008c80:	f043 0307 	orr.w	r3, r3, #7
 8008c84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	68fa      	ldr	r2, [r7, #12]
 8008c8a:	609a      	str	r2, [r3, #8]
}
 8008c8c:	bf00      	nop
 8008c8e:	3714      	adds	r7, #20
 8008c90:	46bd      	mov	sp, r7
 8008c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c96:	4770      	bx	lr

08008c98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b087      	sub	sp, #28
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	60f8      	str	r0, [r7, #12]
 8008ca0:	60b9      	str	r1, [r7, #8]
 8008ca2:	607a      	str	r2, [r7, #4]
 8008ca4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	689b      	ldr	r3, [r3, #8]
 8008caa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008cb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	021a      	lsls	r2, r3, #8
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	431a      	orrs	r2, r3
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	697a      	ldr	r2, [r7, #20]
 8008cc2:	4313      	orrs	r3, r2
 8008cc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	697a      	ldr	r2, [r7, #20]
 8008cca:	609a      	str	r2, [r3, #8]
}
 8008ccc:	bf00      	nop
 8008cce:	371c      	adds	r7, #28
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd6:	4770      	bx	lr

08008cd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b085      	sub	sp, #20
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
 8008ce0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ce8:	2b01      	cmp	r3, #1
 8008cea:	d101      	bne.n	8008cf0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008cec:	2302      	movs	r3, #2
 8008cee:	e068      	b.n	8008dc2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2202      	movs	r2, #2
 8008cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	685b      	ldr	r3, [r3, #4]
 8008d06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	689b      	ldr	r3, [r3, #8]
 8008d0e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4a2e      	ldr	r2, [pc, #184]	; (8008dd0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d004      	beq.n	8008d24 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	4a2d      	ldr	r2, [pc, #180]	; (8008dd4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d108      	bne.n	8008d36 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008d2a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	68fa      	ldr	r2, [r7, #12]
 8008d32:	4313      	orrs	r3, r2
 8008d34:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d3c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	68fa      	ldr	r2, [r7, #12]
 8008d44:	4313      	orrs	r3, r2
 8008d46:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	68fa      	ldr	r2, [r7, #12]
 8008d4e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4a1e      	ldr	r2, [pc, #120]	; (8008dd0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d01d      	beq.n	8008d96 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d62:	d018      	beq.n	8008d96 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4a1b      	ldr	r2, [pc, #108]	; (8008dd8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d013      	beq.n	8008d96 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4a1a      	ldr	r2, [pc, #104]	; (8008ddc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d00e      	beq.n	8008d96 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	4a18      	ldr	r2, [pc, #96]	; (8008de0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d009      	beq.n	8008d96 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	4a13      	ldr	r2, [pc, #76]	; (8008dd4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d004      	beq.n	8008d96 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4a14      	ldr	r2, [pc, #80]	; (8008de4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d10c      	bne.n	8008db0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	689b      	ldr	r3, [r3, #8]
 8008da2:	68ba      	ldr	r2, [r7, #8]
 8008da4:	4313      	orrs	r3, r2
 8008da6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	68ba      	ldr	r2, [r7, #8]
 8008dae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2201      	movs	r2, #1
 8008db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008dc0:	2300      	movs	r3, #0
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3714      	adds	r7, #20
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dcc:	4770      	bx	lr
 8008dce:	bf00      	nop
 8008dd0:	40012c00 	.word	0x40012c00
 8008dd4:	40013400 	.word	0x40013400
 8008dd8:	40000400 	.word	0x40000400
 8008ddc:	40000800 	.word	0x40000800
 8008de0:	40000c00 	.word	0x40000c00
 8008de4:	40014000 	.word	0x40014000

08008de8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008de8:	b480      	push	{r7}
 8008dea:	b083      	sub	sp, #12
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008df0:	bf00      	nop
 8008df2:	370c      	adds	r7, #12
 8008df4:	46bd      	mov	sp, r7
 8008df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfa:	4770      	bx	lr

08008dfc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b083      	sub	sp, #12
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008e04:	bf00      	nop
 8008e06:	370c      	adds	r7, #12
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0e:	4770      	bx	lr

08008e10 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b083      	sub	sp, #12
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008e18:	bf00      	nop
 8008e1a:	370c      	adds	r7, #12
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e22:	4770      	bx	lr

08008e24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b082      	sub	sp, #8
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d101      	bne.n	8008e36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008e32:	2301      	movs	r3, #1
 8008e34:	e040      	b.n	8008eb8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d106      	bne.n	8008e4c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2200      	movs	r2, #0
 8008e42:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f7f9 fc3c 	bl	80026c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2224      	movs	r2, #36	; 0x24
 8008e50:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	681a      	ldr	r2, [r3, #0]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f022 0201 	bic.w	r2, r2, #1
 8008e60:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d002      	beq.n	8008e70 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f000 fb6a 	bl	8009544 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f000 f8af 	bl	8008fd4 <UART_SetConfig>
 8008e76:	4603      	mov	r3, r0
 8008e78:	2b01      	cmp	r3, #1
 8008e7a:	d101      	bne.n	8008e80 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	e01b      	b.n	8008eb8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	685a      	ldr	r2, [r3, #4]
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008e8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	689a      	ldr	r2, [r3, #8]
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008e9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	681a      	ldr	r2, [r3, #0]
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f042 0201 	orr.w	r2, r2, #1
 8008eae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f000 fbe9 	bl	8009688 <UART_CheckIdleState>
 8008eb6:	4603      	mov	r3, r0
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3708      	adds	r7, #8
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}

08008ec0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b08a      	sub	sp, #40	; 0x28
 8008ec4:	af02      	add	r7, sp, #8
 8008ec6:	60f8      	str	r0, [r7, #12]
 8008ec8:	60b9      	str	r1, [r7, #8]
 8008eca:	603b      	str	r3, [r7, #0]
 8008ecc:	4613      	mov	r3, r2
 8008ece:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ed4:	2b20      	cmp	r3, #32
 8008ed6:	d178      	bne.n	8008fca <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d002      	beq.n	8008ee4 <HAL_UART_Transmit+0x24>
 8008ede:	88fb      	ldrh	r3, [r7, #6]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d101      	bne.n	8008ee8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	e071      	b.n	8008fcc <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	2200      	movs	r2, #0
 8008eec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	2221      	movs	r2, #33	; 0x21
 8008ef4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008ef6:	f7fa f971 	bl	80031dc <HAL_GetTick>
 8008efa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	88fa      	ldrh	r2, [r7, #6]
 8008f00:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	88fa      	ldrh	r2, [r7, #6]
 8008f08:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	689b      	ldr	r3, [r3, #8]
 8008f10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f14:	d108      	bne.n	8008f28 <HAL_UART_Transmit+0x68>
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	691b      	ldr	r3, [r3, #16]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d104      	bne.n	8008f28 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	61bb      	str	r3, [r7, #24]
 8008f26:	e003      	b.n	8008f30 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008f30:	e030      	b.n	8008f94 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	9300      	str	r3, [sp, #0]
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	2180      	movs	r1, #128	; 0x80
 8008f3c:	68f8      	ldr	r0, [r7, #12]
 8008f3e:	f000 fc4b 	bl	80097d8 <UART_WaitOnFlagUntilTimeout>
 8008f42:	4603      	mov	r3, r0
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d004      	beq.n	8008f52 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	2220      	movs	r2, #32
 8008f4c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8008f4e:	2303      	movs	r3, #3
 8008f50:	e03c      	b.n	8008fcc <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8008f52:	69fb      	ldr	r3, [r7, #28]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d10b      	bne.n	8008f70 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008f58:	69bb      	ldr	r3, [r7, #24]
 8008f5a:	881a      	ldrh	r2, [r3, #0]
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008f64:	b292      	uxth	r2, r2
 8008f66:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008f68:	69bb      	ldr	r3, [r7, #24]
 8008f6a:	3302      	adds	r3, #2
 8008f6c:	61bb      	str	r3, [r7, #24]
 8008f6e:	e008      	b.n	8008f82 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008f70:	69fb      	ldr	r3, [r7, #28]
 8008f72:	781a      	ldrb	r2, [r3, #0]
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	b292      	uxth	r2, r2
 8008f7a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008f7c:	69fb      	ldr	r3, [r7, #28]
 8008f7e:	3301      	adds	r3, #1
 8008f80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008f88:	b29b      	uxth	r3, r3
 8008f8a:	3b01      	subs	r3, #1
 8008f8c:	b29a      	uxth	r2, r3
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008f9a:	b29b      	uxth	r3, r3
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d1c8      	bne.n	8008f32 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	9300      	str	r3, [sp, #0]
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	2140      	movs	r1, #64	; 0x40
 8008faa:	68f8      	ldr	r0, [r7, #12]
 8008fac:	f000 fc14 	bl	80097d8 <UART_WaitOnFlagUntilTimeout>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d004      	beq.n	8008fc0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2220      	movs	r2, #32
 8008fba:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8008fbc:	2303      	movs	r3, #3
 8008fbe:	e005      	b.n	8008fcc <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	2220      	movs	r2, #32
 8008fc4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	e000      	b.n	8008fcc <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8008fca:	2302      	movs	r3, #2
  }
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	3720      	adds	r7, #32
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd80      	pop	{r7, pc}

08008fd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008fd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008fd8:	b08a      	sub	sp, #40	; 0x28
 8008fda:	af00      	add	r7, sp, #0
 8008fdc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	689a      	ldr	r2, [r3, #8]
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	691b      	ldr	r3, [r3, #16]
 8008fec:	431a      	orrs	r2, r3
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	695b      	ldr	r3, [r3, #20]
 8008ff2:	431a      	orrs	r2, r3
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	69db      	ldr	r3, [r3, #28]
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	681a      	ldr	r2, [r3, #0]
 8009002:	4ba4      	ldr	r3, [pc, #656]	; (8009294 <UART_SetConfig+0x2c0>)
 8009004:	4013      	ands	r3, r2
 8009006:	68fa      	ldr	r2, [r7, #12]
 8009008:	6812      	ldr	r2, [r2, #0]
 800900a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800900c:	430b      	orrs	r3, r1
 800900e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	685b      	ldr	r3, [r3, #4]
 8009016:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	68da      	ldr	r2, [r3, #12]
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	430a      	orrs	r2, r1
 8009024:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	699b      	ldr	r3, [r3, #24]
 800902a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	4a99      	ldr	r2, [pc, #612]	; (8009298 <UART_SetConfig+0x2c4>)
 8009032:	4293      	cmp	r3, r2
 8009034:	d004      	beq.n	8009040 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	6a1b      	ldr	r3, [r3, #32]
 800903a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800903c:	4313      	orrs	r3, r2
 800903e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	689b      	ldr	r3, [r3, #8]
 8009046:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009050:	430a      	orrs	r2, r1
 8009052:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	4a90      	ldr	r2, [pc, #576]	; (800929c <UART_SetConfig+0x2c8>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d126      	bne.n	80090ac <UART_SetConfig+0xd8>
 800905e:	4b90      	ldr	r3, [pc, #576]	; (80092a0 <UART_SetConfig+0x2cc>)
 8009060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009064:	f003 0303 	and.w	r3, r3, #3
 8009068:	2b03      	cmp	r3, #3
 800906a:	d81b      	bhi.n	80090a4 <UART_SetConfig+0xd0>
 800906c:	a201      	add	r2, pc, #4	; (adr r2, 8009074 <UART_SetConfig+0xa0>)
 800906e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009072:	bf00      	nop
 8009074:	08009085 	.word	0x08009085
 8009078:	08009095 	.word	0x08009095
 800907c:	0800908d 	.word	0x0800908d
 8009080:	0800909d 	.word	0x0800909d
 8009084:	2301      	movs	r3, #1
 8009086:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800908a:	e116      	b.n	80092ba <UART_SetConfig+0x2e6>
 800908c:	2302      	movs	r3, #2
 800908e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009092:	e112      	b.n	80092ba <UART_SetConfig+0x2e6>
 8009094:	2304      	movs	r3, #4
 8009096:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800909a:	e10e      	b.n	80092ba <UART_SetConfig+0x2e6>
 800909c:	2308      	movs	r3, #8
 800909e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80090a2:	e10a      	b.n	80092ba <UART_SetConfig+0x2e6>
 80090a4:	2310      	movs	r3, #16
 80090a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80090aa:	e106      	b.n	80092ba <UART_SetConfig+0x2e6>
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	4a7c      	ldr	r2, [pc, #496]	; (80092a4 <UART_SetConfig+0x2d0>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d138      	bne.n	8009128 <UART_SetConfig+0x154>
 80090b6:	4b7a      	ldr	r3, [pc, #488]	; (80092a0 <UART_SetConfig+0x2cc>)
 80090b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090bc:	f003 030c 	and.w	r3, r3, #12
 80090c0:	2b0c      	cmp	r3, #12
 80090c2:	d82d      	bhi.n	8009120 <UART_SetConfig+0x14c>
 80090c4:	a201      	add	r2, pc, #4	; (adr r2, 80090cc <UART_SetConfig+0xf8>)
 80090c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090ca:	bf00      	nop
 80090cc:	08009101 	.word	0x08009101
 80090d0:	08009121 	.word	0x08009121
 80090d4:	08009121 	.word	0x08009121
 80090d8:	08009121 	.word	0x08009121
 80090dc:	08009111 	.word	0x08009111
 80090e0:	08009121 	.word	0x08009121
 80090e4:	08009121 	.word	0x08009121
 80090e8:	08009121 	.word	0x08009121
 80090ec:	08009109 	.word	0x08009109
 80090f0:	08009121 	.word	0x08009121
 80090f4:	08009121 	.word	0x08009121
 80090f8:	08009121 	.word	0x08009121
 80090fc:	08009119 	.word	0x08009119
 8009100:	2300      	movs	r3, #0
 8009102:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009106:	e0d8      	b.n	80092ba <UART_SetConfig+0x2e6>
 8009108:	2302      	movs	r3, #2
 800910a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800910e:	e0d4      	b.n	80092ba <UART_SetConfig+0x2e6>
 8009110:	2304      	movs	r3, #4
 8009112:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009116:	e0d0      	b.n	80092ba <UART_SetConfig+0x2e6>
 8009118:	2308      	movs	r3, #8
 800911a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800911e:	e0cc      	b.n	80092ba <UART_SetConfig+0x2e6>
 8009120:	2310      	movs	r3, #16
 8009122:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009126:	e0c8      	b.n	80092ba <UART_SetConfig+0x2e6>
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	4a5e      	ldr	r2, [pc, #376]	; (80092a8 <UART_SetConfig+0x2d4>)
 800912e:	4293      	cmp	r3, r2
 8009130:	d125      	bne.n	800917e <UART_SetConfig+0x1aa>
 8009132:	4b5b      	ldr	r3, [pc, #364]	; (80092a0 <UART_SetConfig+0x2cc>)
 8009134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009138:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800913c:	2b30      	cmp	r3, #48	; 0x30
 800913e:	d016      	beq.n	800916e <UART_SetConfig+0x19a>
 8009140:	2b30      	cmp	r3, #48	; 0x30
 8009142:	d818      	bhi.n	8009176 <UART_SetConfig+0x1a2>
 8009144:	2b20      	cmp	r3, #32
 8009146:	d00a      	beq.n	800915e <UART_SetConfig+0x18a>
 8009148:	2b20      	cmp	r3, #32
 800914a:	d814      	bhi.n	8009176 <UART_SetConfig+0x1a2>
 800914c:	2b00      	cmp	r3, #0
 800914e:	d002      	beq.n	8009156 <UART_SetConfig+0x182>
 8009150:	2b10      	cmp	r3, #16
 8009152:	d008      	beq.n	8009166 <UART_SetConfig+0x192>
 8009154:	e00f      	b.n	8009176 <UART_SetConfig+0x1a2>
 8009156:	2300      	movs	r3, #0
 8009158:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800915c:	e0ad      	b.n	80092ba <UART_SetConfig+0x2e6>
 800915e:	2302      	movs	r3, #2
 8009160:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009164:	e0a9      	b.n	80092ba <UART_SetConfig+0x2e6>
 8009166:	2304      	movs	r3, #4
 8009168:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800916c:	e0a5      	b.n	80092ba <UART_SetConfig+0x2e6>
 800916e:	2308      	movs	r3, #8
 8009170:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009174:	e0a1      	b.n	80092ba <UART_SetConfig+0x2e6>
 8009176:	2310      	movs	r3, #16
 8009178:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800917c:	e09d      	b.n	80092ba <UART_SetConfig+0x2e6>
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	4a4a      	ldr	r2, [pc, #296]	; (80092ac <UART_SetConfig+0x2d8>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d125      	bne.n	80091d4 <UART_SetConfig+0x200>
 8009188:	4b45      	ldr	r3, [pc, #276]	; (80092a0 <UART_SetConfig+0x2cc>)
 800918a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800918e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009192:	2bc0      	cmp	r3, #192	; 0xc0
 8009194:	d016      	beq.n	80091c4 <UART_SetConfig+0x1f0>
 8009196:	2bc0      	cmp	r3, #192	; 0xc0
 8009198:	d818      	bhi.n	80091cc <UART_SetConfig+0x1f8>
 800919a:	2b80      	cmp	r3, #128	; 0x80
 800919c:	d00a      	beq.n	80091b4 <UART_SetConfig+0x1e0>
 800919e:	2b80      	cmp	r3, #128	; 0x80
 80091a0:	d814      	bhi.n	80091cc <UART_SetConfig+0x1f8>
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d002      	beq.n	80091ac <UART_SetConfig+0x1d8>
 80091a6:	2b40      	cmp	r3, #64	; 0x40
 80091a8:	d008      	beq.n	80091bc <UART_SetConfig+0x1e8>
 80091aa:	e00f      	b.n	80091cc <UART_SetConfig+0x1f8>
 80091ac:	2300      	movs	r3, #0
 80091ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80091b2:	e082      	b.n	80092ba <UART_SetConfig+0x2e6>
 80091b4:	2302      	movs	r3, #2
 80091b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80091ba:	e07e      	b.n	80092ba <UART_SetConfig+0x2e6>
 80091bc:	2304      	movs	r3, #4
 80091be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80091c2:	e07a      	b.n	80092ba <UART_SetConfig+0x2e6>
 80091c4:	2308      	movs	r3, #8
 80091c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80091ca:	e076      	b.n	80092ba <UART_SetConfig+0x2e6>
 80091cc:	2310      	movs	r3, #16
 80091ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80091d2:	e072      	b.n	80092ba <UART_SetConfig+0x2e6>
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	4a35      	ldr	r2, [pc, #212]	; (80092b0 <UART_SetConfig+0x2dc>)
 80091da:	4293      	cmp	r3, r2
 80091dc:	d12a      	bne.n	8009234 <UART_SetConfig+0x260>
 80091de:	4b30      	ldr	r3, [pc, #192]	; (80092a0 <UART_SetConfig+0x2cc>)
 80091e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80091ec:	d01a      	beq.n	8009224 <UART_SetConfig+0x250>
 80091ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80091f2:	d81b      	bhi.n	800922c <UART_SetConfig+0x258>
 80091f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80091f8:	d00c      	beq.n	8009214 <UART_SetConfig+0x240>
 80091fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80091fe:	d815      	bhi.n	800922c <UART_SetConfig+0x258>
 8009200:	2b00      	cmp	r3, #0
 8009202:	d003      	beq.n	800920c <UART_SetConfig+0x238>
 8009204:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009208:	d008      	beq.n	800921c <UART_SetConfig+0x248>
 800920a:	e00f      	b.n	800922c <UART_SetConfig+0x258>
 800920c:	2300      	movs	r3, #0
 800920e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009212:	e052      	b.n	80092ba <UART_SetConfig+0x2e6>
 8009214:	2302      	movs	r3, #2
 8009216:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800921a:	e04e      	b.n	80092ba <UART_SetConfig+0x2e6>
 800921c:	2304      	movs	r3, #4
 800921e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009222:	e04a      	b.n	80092ba <UART_SetConfig+0x2e6>
 8009224:	2308      	movs	r3, #8
 8009226:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800922a:	e046      	b.n	80092ba <UART_SetConfig+0x2e6>
 800922c:	2310      	movs	r3, #16
 800922e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009232:	e042      	b.n	80092ba <UART_SetConfig+0x2e6>
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	4a17      	ldr	r2, [pc, #92]	; (8009298 <UART_SetConfig+0x2c4>)
 800923a:	4293      	cmp	r3, r2
 800923c:	d13a      	bne.n	80092b4 <UART_SetConfig+0x2e0>
 800923e:	4b18      	ldr	r3, [pc, #96]	; (80092a0 <UART_SetConfig+0x2cc>)
 8009240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009244:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009248:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800924c:	d01a      	beq.n	8009284 <UART_SetConfig+0x2b0>
 800924e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009252:	d81b      	bhi.n	800928c <UART_SetConfig+0x2b8>
 8009254:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009258:	d00c      	beq.n	8009274 <UART_SetConfig+0x2a0>
 800925a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800925e:	d815      	bhi.n	800928c <UART_SetConfig+0x2b8>
 8009260:	2b00      	cmp	r3, #0
 8009262:	d003      	beq.n	800926c <UART_SetConfig+0x298>
 8009264:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009268:	d008      	beq.n	800927c <UART_SetConfig+0x2a8>
 800926a:	e00f      	b.n	800928c <UART_SetConfig+0x2b8>
 800926c:	2300      	movs	r3, #0
 800926e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009272:	e022      	b.n	80092ba <UART_SetConfig+0x2e6>
 8009274:	2302      	movs	r3, #2
 8009276:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800927a:	e01e      	b.n	80092ba <UART_SetConfig+0x2e6>
 800927c:	2304      	movs	r3, #4
 800927e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009282:	e01a      	b.n	80092ba <UART_SetConfig+0x2e6>
 8009284:	2308      	movs	r3, #8
 8009286:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800928a:	e016      	b.n	80092ba <UART_SetConfig+0x2e6>
 800928c:	2310      	movs	r3, #16
 800928e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009292:	e012      	b.n	80092ba <UART_SetConfig+0x2e6>
 8009294:	efff69f3 	.word	0xefff69f3
 8009298:	40008000 	.word	0x40008000
 800929c:	40013800 	.word	0x40013800
 80092a0:	40021000 	.word	0x40021000
 80092a4:	40004400 	.word	0x40004400
 80092a8:	40004800 	.word	0x40004800
 80092ac:	40004c00 	.word	0x40004c00
 80092b0:	40005000 	.word	0x40005000
 80092b4:	2310      	movs	r3, #16
 80092b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	4a9f      	ldr	r2, [pc, #636]	; (800953c <UART_SetConfig+0x568>)
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d17a      	bne.n	80093ba <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80092c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80092c8:	2b08      	cmp	r3, #8
 80092ca:	d824      	bhi.n	8009316 <UART_SetConfig+0x342>
 80092cc:	a201      	add	r2, pc, #4	; (adr r2, 80092d4 <UART_SetConfig+0x300>)
 80092ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092d2:	bf00      	nop
 80092d4:	080092f9 	.word	0x080092f9
 80092d8:	08009317 	.word	0x08009317
 80092dc:	08009301 	.word	0x08009301
 80092e0:	08009317 	.word	0x08009317
 80092e4:	08009307 	.word	0x08009307
 80092e8:	08009317 	.word	0x08009317
 80092ec:	08009317 	.word	0x08009317
 80092f0:	08009317 	.word	0x08009317
 80092f4:	0800930f 	.word	0x0800930f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80092f8:	f7fd fe90 	bl	800701c <HAL_RCC_GetPCLK1Freq>
 80092fc:	61f8      	str	r0, [r7, #28]
        break;
 80092fe:	e010      	b.n	8009322 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009300:	4b8f      	ldr	r3, [pc, #572]	; (8009540 <UART_SetConfig+0x56c>)
 8009302:	61fb      	str	r3, [r7, #28]
        break;
 8009304:	e00d      	b.n	8009322 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009306:	f7fd fdf1 	bl	8006eec <HAL_RCC_GetSysClockFreq>
 800930a:	61f8      	str	r0, [r7, #28]
        break;
 800930c:	e009      	b.n	8009322 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800930e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009312:	61fb      	str	r3, [r7, #28]
        break;
 8009314:	e005      	b.n	8009322 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8009316:	2300      	movs	r3, #0
 8009318:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800931a:	2301      	movs	r3, #1
 800931c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009320:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009322:	69fb      	ldr	r3, [r7, #28]
 8009324:	2b00      	cmp	r3, #0
 8009326:	f000 80fb 	beq.w	8009520 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	685a      	ldr	r2, [r3, #4]
 800932e:	4613      	mov	r3, r2
 8009330:	005b      	lsls	r3, r3, #1
 8009332:	4413      	add	r3, r2
 8009334:	69fa      	ldr	r2, [r7, #28]
 8009336:	429a      	cmp	r2, r3
 8009338:	d305      	bcc.n	8009346 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	685b      	ldr	r3, [r3, #4]
 800933e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009340:	69fa      	ldr	r2, [r7, #28]
 8009342:	429a      	cmp	r2, r3
 8009344:	d903      	bls.n	800934e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8009346:	2301      	movs	r3, #1
 8009348:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800934c:	e0e8      	b.n	8009520 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800934e:	69fb      	ldr	r3, [r7, #28]
 8009350:	2200      	movs	r2, #0
 8009352:	461c      	mov	r4, r3
 8009354:	4615      	mov	r5, r2
 8009356:	f04f 0200 	mov.w	r2, #0
 800935a:	f04f 0300 	mov.w	r3, #0
 800935e:	022b      	lsls	r3, r5, #8
 8009360:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8009364:	0222      	lsls	r2, r4, #8
 8009366:	68f9      	ldr	r1, [r7, #12]
 8009368:	6849      	ldr	r1, [r1, #4]
 800936a:	0849      	lsrs	r1, r1, #1
 800936c:	2000      	movs	r0, #0
 800936e:	4688      	mov	r8, r1
 8009370:	4681      	mov	r9, r0
 8009372:	eb12 0a08 	adds.w	sl, r2, r8
 8009376:	eb43 0b09 	adc.w	fp, r3, r9
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	685b      	ldr	r3, [r3, #4]
 800937e:	2200      	movs	r2, #0
 8009380:	603b      	str	r3, [r7, #0]
 8009382:	607a      	str	r2, [r7, #4]
 8009384:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009388:	4650      	mov	r0, sl
 800938a:	4659      	mov	r1, fp
 800938c:	f7f7 fac6 	bl	800091c <__aeabi_uldivmod>
 8009390:	4602      	mov	r2, r0
 8009392:	460b      	mov	r3, r1
 8009394:	4613      	mov	r3, r2
 8009396:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009398:	69bb      	ldr	r3, [r7, #24]
 800939a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800939e:	d308      	bcc.n	80093b2 <UART_SetConfig+0x3de>
 80093a0:	69bb      	ldr	r3, [r7, #24]
 80093a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80093a6:	d204      	bcs.n	80093b2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	69ba      	ldr	r2, [r7, #24]
 80093ae:	60da      	str	r2, [r3, #12]
 80093b0:	e0b6      	b.n	8009520 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80093b2:	2301      	movs	r3, #1
 80093b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80093b8:	e0b2      	b.n	8009520 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	69db      	ldr	r3, [r3, #28]
 80093be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093c2:	d15e      	bne.n	8009482 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80093c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80093c8:	2b08      	cmp	r3, #8
 80093ca:	d828      	bhi.n	800941e <UART_SetConfig+0x44a>
 80093cc:	a201      	add	r2, pc, #4	; (adr r2, 80093d4 <UART_SetConfig+0x400>)
 80093ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093d2:	bf00      	nop
 80093d4:	080093f9 	.word	0x080093f9
 80093d8:	08009401 	.word	0x08009401
 80093dc:	08009409 	.word	0x08009409
 80093e0:	0800941f 	.word	0x0800941f
 80093e4:	0800940f 	.word	0x0800940f
 80093e8:	0800941f 	.word	0x0800941f
 80093ec:	0800941f 	.word	0x0800941f
 80093f0:	0800941f 	.word	0x0800941f
 80093f4:	08009417 	.word	0x08009417
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80093f8:	f7fd fe10 	bl	800701c <HAL_RCC_GetPCLK1Freq>
 80093fc:	61f8      	str	r0, [r7, #28]
        break;
 80093fe:	e014      	b.n	800942a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009400:	f7fd fe22 	bl	8007048 <HAL_RCC_GetPCLK2Freq>
 8009404:	61f8      	str	r0, [r7, #28]
        break;
 8009406:	e010      	b.n	800942a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009408:	4b4d      	ldr	r3, [pc, #308]	; (8009540 <UART_SetConfig+0x56c>)
 800940a:	61fb      	str	r3, [r7, #28]
        break;
 800940c:	e00d      	b.n	800942a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800940e:	f7fd fd6d 	bl	8006eec <HAL_RCC_GetSysClockFreq>
 8009412:	61f8      	str	r0, [r7, #28]
        break;
 8009414:	e009      	b.n	800942a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009416:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800941a:	61fb      	str	r3, [r7, #28]
        break;
 800941c:	e005      	b.n	800942a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800941e:	2300      	movs	r3, #0
 8009420:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009422:	2301      	movs	r3, #1
 8009424:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009428:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800942a:	69fb      	ldr	r3, [r7, #28]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d077      	beq.n	8009520 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009430:	69fb      	ldr	r3, [r7, #28]
 8009432:	005a      	lsls	r2, r3, #1
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	685b      	ldr	r3, [r3, #4]
 8009438:	085b      	lsrs	r3, r3, #1
 800943a:	441a      	add	r2, r3
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	685b      	ldr	r3, [r3, #4]
 8009440:	fbb2 f3f3 	udiv	r3, r2, r3
 8009444:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009446:	69bb      	ldr	r3, [r7, #24]
 8009448:	2b0f      	cmp	r3, #15
 800944a:	d916      	bls.n	800947a <UART_SetConfig+0x4a6>
 800944c:	69bb      	ldr	r3, [r7, #24]
 800944e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009452:	d212      	bcs.n	800947a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009454:	69bb      	ldr	r3, [r7, #24]
 8009456:	b29b      	uxth	r3, r3
 8009458:	f023 030f 	bic.w	r3, r3, #15
 800945c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800945e:	69bb      	ldr	r3, [r7, #24]
 8009460:	085b      	lsrs	r3, r3, #1
 8009462:	b29b      	uxth	r3, r3
 8009464:	f003 0307 	and.w	r3, r3, #7
 8009468:	b29a      	uxth	r2, r3
 800946a:	8afb      	ldrh	r3, [r7, #22]
 800946c:	4313      	orrs	r3, r2
 800946e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	8afa      	ldrh	r2, [r7, #22]
 8009476:	60da      	str	r2, [r3, #12]
 8009478:	e052      	b.n	8009520 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800947a:	2301      	movs	r3, #1
 800947c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009480:	e04e      	b.n	8009520 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009482:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009486:	2b08      	cmp	r3, #8
 8009488:	d827      	bhi.n	80094da <UART_SetConfig+0x506>
 800948a:	a201      	add	r2, pc, #4	; (adr r2, 8009490 <UART_SetConfig+0x4bc>)
 800948c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009490:	080094b5 	.word	0x080094b5
 8009494:	080094bd 	.word	0x080094bd
 8009498:	080094c5 	.word	0x080094c5
 800949c:	080094db 	.word	0x080094db
 80094a0:	080094cb 	.word	0x080094cb
 80094a4:	080094db 	.word	0x080094db
 80094a8:	080094db 	.word	0x080094db
 80094ac:	080094db 	.word	0x080094db
 80094b0:	080094d3 	.word	0x080094d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80094b4:	f7fd fdb2 	bl	800701c <HAL_RCC_GetPCLK1Freq>
 80094b8:	61f8      	str	r0, [r7, #28]
        break;
 80094ba:	e014      	b.n	80094e6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80094bc:	f7fd fdc4 	bl	8007048 <HAL_RCC_GetPCLK2Freq>
 80094c0:	61f8      	str	r0, [r7, #28]
        break;
 80094c2:	e010      	b.n	80094e6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80094c4:	4b1e      	ldr	r3, [pc, #120]	; (8009540 <UART_SetConfig+0x56c>)
 80094c6:	61fb      	str	r3, [r7, #28]
        break;
 80094c8:	e00d      	b.n	80094e6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80094ca:	f7fd fd0f 	bl	8006eec <HAL_RCC_GetSysClockFreq>
 80094ce:	61f8      	str	r0, [r7, #28]
        break;
 80094d0:	e009      	b.n	80094e6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80094d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80094d6:	61fb      	str	r3, [r7, #28]
        break;
 80094d8:	e005      	b.n	80094e6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80094da:	2300      	movs	r3, #0
 80094dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80094de:	2301      	movs	r3, #1
 80094e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80094e4:	bf00      	nop
    }

    if (pclk != 0U)
 80094e6:	69fb      	ldr	r3, [r7, #28]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d019      	beq.n	8009520 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	685b      	ldr	r3, [r3, #4]
 80094f0:	085a      	lsrs	r2, r3, #1
 80094f2:	69fb      	ldr	r3, [r7, #28]
 80094f4:	441a      	add	r2, r3
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	685b      	ldr	r3, [r3, #4]
 80094fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80094fe:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009500:	69bb      	ldr	r3, [r7, #24]
 8009502:	2b0f      	cmp	r3, #15
 8009504:	d909      	bls.n	800951a <UART_SetConfig+0x546>
 8009506:	69bb      	ldr	r3, [r7, #24]
 8009508:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800950c:	d205      	bcs.n	800951a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800950e:	69bb      	ldr	r3, [r7, #24]
 8009510:	b29a      	uxth	r2, r3
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	60da      	str	r2, [r3, #12]
 8009518:	e002      	b.n	8009520 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800951a:	2301      	movs	r3, #1
 800951c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	2200      	movs	r2, #0
 8009524:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	2200      	movs	r2, #0
 800952a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800952c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8009530:	4618      	mov	r0, r3
 8009532:	3728      	adds	r7, #40	; 0x28
 8009534:	46bd      	mov	sp, r7
 8009536:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800953a:	bf00      	nop
 800953c:	40008000 	.word	0x40008000
 8009540:	00f42400 	.word	0x00f42400

08009544 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009544:	b480      	push	{r7}
 8009546:	b083      	sub	sp, #12
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009550:	f003 0308 	and.w	r3, r3, #8
 8009554:	2b00      	cmp	r3, #0
 8009556:	d00a      	beq.n	800956e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	685b      	ldr	r3, [r3, #4]
 800955e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	430a      	orrs	r2, r1
 800956c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009572:	f003 0301 	and.w	r3, r3, #1
 8009576:	2b00      	cmp	r3, #0
 8009578:	d00a      	beq.n	8009590 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	685b      	ldr	r3, [r3, #4]
 8009580:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	430a      	orrs	r2, r1
 800958e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009594:	f003 0302 	and.w	r3, r3, #2
 8009598:	2b00      	cmp	r3, #0
 800959a:	d00a      	beq.n	80095b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	685b      	ldr	r3, [r3, #4]
 80095a2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	430a      	orrs	r2, r1
 80095b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b6:	f003 0304 	and.w	r3, r3, #4
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d00a      	beq.n	80095d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	685b      	ldr	r3, [r3, #4]
 80095c4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	430a      	orrs	r2, r1
 80095d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d8:	f003 0310 	and.w	r3, r3, #16
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d00a      	beq.n	80095f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	689b      	ldr	r3, [r3, #8]
 80095e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	430a      	orrs	r2, r1
 80095f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095fa:	f003 0320 	and.w	r3, r3, #32
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d00a      	beq.n	8009618 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	689b      	ldr	r3, [r3, #8]
 8009608:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	430a      	orrs	r2, r1
 8009616:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800961c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009620:	2b00      	cmp	r3, #0
 8009622:	d01a      	beq.n	800965a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	685b      	ldr	r3, [r3, #4]
 800962a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	430a      	orrs	r2, r1
 8009638:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800963e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009642:	d10a      	bne.n	800965a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	685b      	ldr	r3, [r3, #4]
 800964a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	430a      	orrs	r2, r1
 8009658:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800965e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009662:	2b00      	cmp	r3, #0
 8009664:	d00a      	beq.n	800967c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	685b      	ldr	r3, [r3, #4]
 800966c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	430a      	orrs	r2, r1
 800967a:	605a      	str	r2, [r3, #4]
  }
}
 800967c:	bf00      	nop
 800967e:	370c      	adds	r7, #12
 8009680:	46bd      	mov	sp, r7
 8009682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009686:	4770      	bx	lr

08009688 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b098      	sub	sp, #96	; 0x60
 800968c:	af02      	add	r7, sp, #8
 800968e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2200      	movs	r2, #0
 8009694:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009698:	f7f9 fda0 	bl	80031dc <HAL_GetTick>
 800969c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f003 0308 	and.w	r3, r3, #8
 80096a8:	2b08      	cmp	r3, #8
 80096aa:	d12e      	bne.n	800970a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80096ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80096b0:	9300      	str	r3, [sp, #0]
 80096b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096b4:	2200      	movs	r2, #0
 80096b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f000 f88c 	bl	80097d8 <UART_WaitOnFlagUntilTimeout>
 80096c0:	4603      	mov	r3, r0
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d021      	beq.n	800970a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ce:	e853 3f00 	ldrex	r3, [r3]
 80096d2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80096d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80096da:	653b      	str	r3, [r7, #80]	; 0x50
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	461a      	mov	r2, r3
 80096e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096e4:	647b      	str	r3, [r7, #68]	; 0x44
 80096e6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80096ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80096ec:	e841 2300 	strex	r3, r2, [r1]
 80096f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80096f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d1e6      	bne.n	80096c6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2220      	movs	r2, #32
 80096fc:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2200      	movs	r2, #0
 8009702:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009706:	2303      	movs	r3, #3
 8009708:	e062      	b.n	80097d0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f003 0304 	and.w	r3, r3, #4
 8009714:	2b04      	cmp	r3, #4
 8009716:	d149      	bne.n	80097ac <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009718:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800971c:	9300      	str	r3, [sp, #0]
 800971e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009720:	2200      	movs	r2, #0
 8009722:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f000 f856 	bl	80097d8 <UART_WaitOnFlagUntilTimeout>
 800972c:	4603      	mov	r3, r0
 800972e:	2b00      	cmp	r3, #0
 8009730:	d03c      	beq.n	80097ac <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800973a:	e853 3f00 	ldrex	r3, [r3]
 800973e:	623b      	str	r3, [r7, #32]
   return(result);
 8009740:	6a3b      	ldr	r3, [r7, #32]
 8009742:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009746:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	461a      	mov	r2, r3
 800974e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009750:	633b      	str	r3, [r7, #48]	; 0x30
 8009752:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009754:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009756:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009758:	e841 2300 	strex	r3, r2, [r1]
 800975c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800975e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009760:	2b00      	cmp	r3, #0
 8009762:	d1e6      	bne.n	8009732 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	3308      	adds	r3, #8
 800976a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	e853 3f00 	ldrex	r3, [r3]
 8009772:	60fb      	str	r3, [r7, #12]
   return(result);
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	f023 0301 	bic.w	r3, r3, #1
 800977a:	64bb      	str	r3, [r7, #72]	; 0x48
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	3308      	adds	r3, #8
 8009782:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009784:	61fa      	str	r2, [r7, #28]
 8009786:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009788:	69b9      	ldr	r1, [r7, #24]
 800978a:	69fa      	ldr	r2, [r7, #28]
 800978c:	e841 2300 	strex	r3, r2, [r1]
 8009790:	617b      	str	r3, [r7, #20]
   return(result);
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d1e5      	bne.n	8009764 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2220      	movs	r2, #32
 800979c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2200      	movs	r2, #0
 80097a4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80097a8:	2303      	movs	r3, #3
 80097aa:	e011      	b.n	80097d0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2220      	movs	r2, #32
 80097b0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2220      	movs	r2, #32
 80097b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2200      	movs	r2, #0
 80097be:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2200      	movs	r2, #0
 80097c4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2200      	movs	r2, #0
 80097ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80097ce:	2300      	movs	r3, #0
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	3758      	adds	r7, #88	; 0x58
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}

080097d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b084      	sub	sp, #16
 80097dc:	af00      	add	r7, sp, #0
 80097de:	60f8      	str	r0, [r7, #12]
 80097e0:	60b9      	str	r1, [r7, #8]
 80097e2:	603b      	str	r3, [r7, #0]
 80097e4:	4613      	mov	r3, r2
 80097e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80097e8:	e049      	b.n	800987e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80097ea:	69bb      	ldr	r3, [r7, #24]
 80097ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097f0:	d045      	beq.n	800987e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80097f2:	f7f9 fcf3 	bl	80031dc <HAL_GetTick>
 80097f6:	4602      	mov	r2, r0
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	1ad3      	subs	r3, r2, r3
 80097fc:	69ba      	ldr	r2, [r7, #24]
 80097fe:	429a      	cmp	r2, r3
 8009800:	d302      	bcc.n	8009808 <UART_WaitOnFlagUntilTimeout+0x30>
 8009802:	69bb      	ldr	r3, [r7, #24]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d101      	bne.n	800980c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009808:	2303      	movs	r3, #3
 800980a:	e048      	b.n	800989e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f003 0304 	and.w	r3, r3, #4
 8009816:	2b00      	cmp	r3, #0
 8009818:	d031      	beq.n	800987e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	69db      	ldr	r3, [r3, #28]
 8009820:	f003 0308 	and.w	r3, r3, #8
 8009824:	2b08      	cmp	r3, #8
 8009826:	d110      	bne.n	800984a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	2208      	movs	r2, #8
 800982e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009830:	68f8      	ldr	r0, [r7, #12]
 8009832:	f000 f838 	bl	80098a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	2208      	movs	r2, #8
 800983a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	2200      	movs	r2, #0
 8009842:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8009846:	2301      	movs	r3, #1
 8009848:	e029      	b.n	800989e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	69db      	ldr	r3, [r3, #28]
 8009850:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009854:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009858:	d111      	bne.n	800987e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009862:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009864:	68f8      	ldr	r0, [r7, #12]
 8009866:	f000 f81e 	bl	80098a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	2220      	movs	r2, #32
 800986e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	2200      	movs	r2, #0
 8009876:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800987a:	2303      	movs	r3, #3
 800987c:	e00f      	b.n	800989e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	69da      	ldr	r2, [r3, #28]
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	4013      	ands	r3, r2
 8009888:	68ba      	ldr	r2, [r7, #8]
 800988a:	429a      	cmp	r2, r3
 800988c:	bf0c      	ite	eq
 800988e:	2301      	moveq	r3, #1
 8009890:	2300      	movne	r3, #0
 8009892:	b2db      	uxtb	r3, r3
 8009894:	461a      	mov	r2, r3
 8009896:	79fb      	ldrb	r3, [r7, #7]
 8009898:	429a      	cmp	r2, r3
 800989a:	d0a6      	beq.n	80097ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800989c:	2300      	movs	r3, #0
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3710      	adds	r7, #16
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}

080098a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80098a6:	b480      	push	{r7}
 80098a8:	b095      	sub	sp, #84	; 0x54
 80098aa:	af00      	add	r7, sp, #0
 80098ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098b6:	e853 3f00 	ldrex	r3, [r3]
 80098ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80098bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80098c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	461a      	mov	r2, r3
 80098ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098cc:	643b      	str	r3, [r7, #64]	; 0x40
 80098ce:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80098d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80098d4:	e841 2300 	strex	r3, r2, [r1]
 80098d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80098da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d1e6      	bne.n	80098ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	3308      	adds	r3, #8
 80098e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098e8:	6a3b      	ldr	r3, [r7, #32]
 80098ea:	e853 3f00 	ldrex	r3, [r3]
 80098ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80098f0:	69fb      	ldr	r3, [r7, #28]
 80098f2:	f023 0301 	bic.w	r3, r3, #1
 80098f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	3308      	adds	r3, #8
 80098fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009900:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009902:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009904:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009906:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009908:	e841 2300 	strex	r3, r2, [r1]
 800990c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800990e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009910:	2b00      	cmp	r3, #0
 8009912:	d1e5      	bne.n	80098e0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009918:	2b01      	cmp	r3, #1
 800991a:	d118      	bne.n	800994e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	e853 3f00 	ldrex	r3, [r3]
 8009928:	60bb      	str	r3, [r7, #8]
   return(result);
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	f023 0310 	bic.w	r3, r3, #16
 8009930:	647b      	str	r3, [r7, #68]	; 0x44
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	461a      	mov	r2, r3
 8009938:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800993a:	61bb      	str	r3, [r7, #24]
 800993c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800993e:	6979      	ldr	r1, [r7, #20]
 8009940:	69ba      	ldr	r2, [r7, #24]
 8009942:	e841 2300 	strex	r3, r2, [r1]
 8009946:	613b      	str	r3, [r7, #16]
   return(result);
 8009948:	693b      	ldr	r3, [r7, #16]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d1e6      	bne.n	800991c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2220      	movs	r2, #32
 8009952:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2200      	movs	r2, #0
 800995a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2200      	movs	r2, #0
 8009960:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009962:	bf00      	nop
 8009964:	3754      	adds	r7, #84	; 0x54
 8009966:	46bd      	mov	sp, r7
 8009968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996c:	4770      	bx	lr
	...

08009970 <arm_sin_f32>:
 8009970:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80099f0 <arm_sin_f32+0x80>
 8009974:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009978:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800997c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009980:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8009984:	d504      	bpl.n	8009990 <arm_sin_f32+0x20>
 8009986:	ee17 3a90 	vmov	r3, s15
 800998a:	3b01      	subs	r3, #1
 800998c:	ee07 3a90 	vmov	s15, r3
 8009990:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009994:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80099f4 <arm_sin_f32+0x84>
 8009998:	ee30 0a67 	vsub.f32	s0, s0, s15
 800999c:	ee20 0a07 	vmul.f32	s0, s0, s14
 80099a0:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80099a4:	ee17 3a90 	vmov	r3, s15
 80099a8:	b29b      	uxth	r3, r3
 80099aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099ae:	d21a      	bcs.n	80099e6 <arm_sin_f32+0x76>
 80099b0:	ee07 3a90 	vmov	s15, r3
 80099b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099b8:	1c59      	adds	r1, r3, #1
 80099ba:	ee30 0a67 	vsub.f32	s0, s0, s15
 80099be:	4a0e      	ldr	r2, [pc, #56]	; (80099f8 <arm_sin_f32+0x88>)
 80099c0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80099c4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80099c8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80099cc:	ed93 7a00 	vldr	s14, [r3]
 80099d0:	edd2 6a00 	vldr	s13, [r2]
 80099d4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80099d8:	ee20 0a26 	vmul.f32	s0, s0, s13
 80099dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80099e0:	ee37 0a80 	vadd.f32	s0, s15, s0
 80099e4:	4770      	bx	lr
 80099e6:	ee30 0a47 	vsub.f32	s0, s0, s14
 80099ea:	2101      	movs	r1, #1
 80099ec:	2300      	movs	r3, #0
 80099ee:	e7e6      	b.n	80099be <arm_sin_f32+0x4e>
 80099f0:	3e22f983 	.word	0x3e22f983
 80099f4:	44000000 	.word	0x44000000
 80099f8:	0800a3b8 	.word	0x0800a3b8

080099fc <siprintf>:
 80099fc:	b40e      	push	{r1, r2, r3}
 80099fe:	b500      	push	{lr}
 8009a00:	b09c      	sub	sp, #112	; 0x70
 8009a02:	ab1d      	add	r3, sp, #116	; 0x74
 8009a04:	9002      	str	r0, [sp, #8]
 8009a06:	9006      	str	r0, [sp, #24]
 8009a08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009a0c:	4809      	ldr	r0, [pc, #36]	; (8009a34 <siprintf+0x38>)
 8009a0e:	9107      	str	r1, [sp, #28]
 8009a10:	9104      	str	r1, [sp, #16]
 8009a12:	4909      	ldr	r1, [pc, #36]	; (8009a38 <siprintf+0x3c>)
 8009a14:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a18:	9105      	str	r1, [sp, #20]
 8009a1a:	6800      	ldr	r0, [r0, #0]
 8009a1c:	9301      	str	r3, [sp, #4]
 8009a1e:	a902      	add	r1, sp, #8
 8009a20:	f000 f992 	bl	8009d48 <_svfiprintf_r>
 8009a24:	9b02      	ldr	r3, [sp, #8]
 8009a26:	2200      	movs	r2, #0
 8009a28:	701a      	strb	r2, [r3, #0]
 8009a2a:	b01c      	add	sp, #112	; 0x70
 8009a2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a30:	b003      	add	sp, #12
 8009a32:	4770      	bx	lr
 8009a34:	200000f4 	.word	0x200000f4
 8009a38:	ffff0208 	.word	0xffff0208

08009a3c <memset>:
 8009a3c:	4402      	add	r2, r0
 8009a3e:	4603      	mov	r3, r0
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d100      	bne.n	8009a46 <memset+0xa>
 8009a44:	4770      	bx	lr
 8009a46:	f803 1b01 	strb.w	r1, [r3], #1
 8009a4a:	e7f9      	b.n	8009a40 <memset+0x4>

08009a4c <__errno>:
 8009a4c:	4b01      	ldr	r3, [pc, #4]	; (8009a54 <__errno+0x8>)
 8009a4e:	6818      	ldr	r0, [r3, #0]
 8009a50:	4770      	bx	lr
 8009a52:	bf00      	nop
 8009a54:	200000f4 	.word	0x200000f4

08009a58 <__libc_init_array>:
 8009a58:	b570      	push	{r4, r5, r6, lr}
 8009a5a:	4d0d      	ldr	r5, [pc, #52]	; (8009a90 <__libc_init_array+0x38>)
 8009a5c:	4c0d      	ldr	r4, [pc, #52]	; (8009a94 <__libc_init_array+0x3c>)
 8009a5e:	1b64      	subs	r4, r4, r5
 8009a60:	10a4      	asrs	r4, r4, #2
 8009a62:	2600      	movs	r6, #0
 8009a64:	42a6      	cmp	r6, r4
 8009a66:	d109      	bne.n	8009a7c <__libc_init_array+0x24>
 8009a68:	4d0b      	ldr	r5, [pc, #44]	; (8009a98 <__libc_init_array+0x40>)
 8009a6a:	4c0c      	ldr	r4, [pc, #48]	; (8009a9c <__libc_init_array+0x44>)
 8009a6c:	f000 fc6a 	bl	800a344 <_init>
 8009a70:	1b64      	subs	r4, r4, r5
 8009a72:	10a4      	asrs	r4, r4, #2
 8009a74:	2600      	movs	r6, #0
 8009a76:	42a6      	cmp	r6, r4
 8009a78:	d105      	bne.n	8009a86 <__libc_init_array+0x2e>
 8009a7a:	bd70      	pop	{r4, r5, r6, pc}
 8009a7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a80:	4798      	blx	r3
 8009a82:	3601      	adds	r6, #1
 8009a84:	e7ee      	b.n	8009a64 <__libc_init_array+0xc>
 8009a86:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a8a:	4798      	blx	r3
 8009a8c:	3601      	adds	r6, #1
 8009a8e:	e7f2      	b.n	8009a76 <__libc_init_array+0x1e>
 8009a90:	0800abf8 	.word	0x0800abf8
 8009a94:	0800abf8 	.word	0x0800abf8
 8009a98:	0800abf8 	.word	0x0800abf8
 8009a9c:	0800abfc 	.word	0x0800abfc

08009aa0 <__retarget_lock_acquire_recursive>:
 8009aa0:	4770      	bx	lr

08009aa2 <__retarget_lock_release_recursive>:
 8009aa2:	4770      	bx	lr

08009aa4 <_free_r>:
 8009aa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009aa6:	2900      	cmp	r1, #0
 8009aa8:	d044      	beq.n	8009b34 <_free_r+0x90>
 8009aaa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009aae:	9001      	str	r0, [sp, #4]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	f1a1 0404 	sub.w	r4, r1, #4
 8009ab6:	bfb8      	it	lt
 8009ab8:	18e4      	addlt	r4, r4, r3
 8009aba:	f000 f8df 	bl	8009c7c <__malloc_lock>
 8009abe:	4a1e      	ldr	r2, [pc, #120]	; (8009b38 <_free_r+0x94>)
 8009ac0:	9801      	ldr	r0, [sp, #4]
 8009ac2:	6813      	ldr	r3, [r2, #0]
 8009ac4:	b933      	cbnz	r3, 8009ad4 <_free_r+0x30>
 8009ac6:	6063      	str	r3, [r4, #4]
 8009ac8:	6014      	str	r4, [r2, #0]
 8009aca:	b003      	add	sp, #12
 8009acc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009ad0:	f000 b8da 	b.w	8009c88 <__malloc_unlock>
 8009ad4:	42a3      	cmp	r3, r4
 8009ad6:	d908      	bls.n	8009aea <_free_r+0x46>
 8009ad8:	6825      	ldr	r5, [r4, #0]
 8009ada:	1961      	adds	r1, r4, r5
 8009adc:	428b      	cmp	r3, r1
 8009ade:	bf01      	itttt	eq
 8009ae0:	6819      	ldreq	r1, [r3, #0]
 8009ae2:	685b      	ldreq	r3, [r3, #4]
 8009ae4:	1949      	addeq	r1, r1, r5
 8009ae6:	6021      	streq	r1, [r4, #0]
 8009ae8:	e7ed      	b.n	8009ac6 <_free_r+0x22>
 8009aea:	461a      	mov	r2, r3
 8009aec:	685b      	ldr	r3, [r3, #4]
 8009aee:	b10b      	cbz	r3, 8009af4 <_free_r+0x50>
 8009af0:	42a3      	cmp	r3, r4
 8009af2:	d9fa      	bls.n	8009aea <_free_r+0x46>
 8009af4:	6811      	ldr	r1, [r2, #0]
 8009af6:	1855      	adds	r5, r2, r1
 8009af8:	42a5      	cmp	r5, r4
 8009afa:	d10b      	bne.n	8009b14 <_free_r+0x70>
 8009afc:	6824      	ldr	r4, [r4, #0]
 8009afe:	4421      	add	r1, r4
 8009b00:	1854      	adds	r4, r2, r1
 8009b02:	42a3      	cmp	r3, r4
 8009b04:	6011      	str	r1, [r2, #0]
 8009b06:	d1e0      	bne.n	8009aca <_free_r+0x26>
 8009b08:	681c      	ldr	r4, [r3, #0]
 8009b0a:	685b      	ldr	r3, [r3, #4]
 8009b0c:	6053      	str	r3, [r2, #4]
 8009b0e:	440c      	add	r4, r1
 8009b10:	6014      	str	r4, [r2, #0]
 8009b12:	e7da      	b.n	8009aca <_free_r+0x26>
 8009b14:	d902      	bls.n	8009b1c <_free_r+0x78>
 8009b16:	230c      	movs	r3, #12
 8009b18:	6003      	str	r3, [r0, #0]
 8009b1a:	e7d6      	b.n	8009aca <_free_r+0x26>
 8009b1c:	6825      	ldr	r5, [r4, #0]
 8009b1e:	1961      	adds	r1, r4, r5
 8009b20:	428b      	cmp	r3, r1
 8009b22:	bf04      	itt	eq
 8009b24:	6819      	ldreq	r1, [r3, #0]
 8009b26:	685b      	ldreq	r3, [r3, #4]
 8009b28:	6063      	str	r3, [r4, #4]
 8009b2a:	bf04      	itt	eq
 8009b2c:	1949      	addeq	r1, r1, r5
 8009b2e:	6021      	streq	r1, [r4, #0]
 8009b30:	6054      	str	r4, [r2, #4]
 8009b32:	e7ca      	b.n	8009aca <_free_r+0x26>
 8009b34:	b003      	add	sp, #12
 8009b36:	bd30      	pop	{r4, r5, pc}
 8009b38:	20002d30 	.word	0x20002d30

08009b3c <sbrk_aligned>:
 8009b3c:	b570      	push	{r4, r5, r6, lr}
 8009b3e:	4e0e      	ldr	r6, [pc, #56]	; (8009b78 <sbrk_aligned+0x3c>)
 8009b40:	460c      	mov	r4, r1
 8009b42:	6831      	ldr	r1, [r6, #0]
 8009b44:	4605      	mov	r5, r0
 8009b46:	b911      	cbnz	r1, 8009b4e <sbrk_aligned+0x12>
 8009b48:	f000 fba6 	bl	800a298 <_sbrk_r>
 8009b4c:	6030      	str	r0, [r6, #0]
 8009b4e:	4621      	mov	r1, r4
 8009b50:	4628      	mov	r0, r5
 8009b52:	f000 fba1 	bl	800a298 <_sbrk_r>
 8009b56:	1c43      	adds	r3, r0, #1
 8009b58:	d00a      	beq.n	8009b70 <sbrk_aligned+0x34>
 8009b5a:	1cc4      	adds	r4, r0, #3
 8009b5c:	f024 0403 	bic.w	r4, r4, #3
 8009b60:	42a0      	cmp	r0, r4
 8009b62:	d007      	beq.n	8009b74 <sbrk_aligned+0x38>
 8009b64:	1a21      	subs	r1, r4, r0
 8009b66:	4628      	mov	r0, r5
 8009b68:	f000 fb96 	bl	800a298 <_sbrk_r>
 8009b6c:	3001      	adds	r0, #1
 8009b6e:	d101      	bne.n	8009b74 <sbrk_aligned+0x38>
 8009b70:	f04f 34ff 	mov.w	r4, #4294967295
 8009b74:	4620      	mov	r0, r4
 8009b76:	bd70      	pop	{r4, r5, r6, pc}
 8009b78:	20002d34 	.word	0x20002d34

08009b7c <_malloc_r>:
 8009b7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b80:	1ccd      	adds	r5, r1, #3
 8009b82:	f025 0503 	bic.w	r5, r5, #3
 8009b86:	3508      	adds	r5, #8
 8009b88:	2d0c      	cmp	r5, #12
 8009b8a:	bf38      	it	cc
 8009b8c:	250c      	movcc	r5, #12
 8009b8e:	2d00      	cmp	r5, #0
 8009b90:	4607      	mov	r7, r0
 8009b92:	db01      	blt.n	8009b98 <_malloc_r+0x1c>
 8009b94:	42a9      	cmp	r1, r5
 8009b96:	d905      	bls.n	8009ba4 <_malloc_r+0x28>
 8009b98:	230c      	movs	r3, #12
 8009b9a:	603b      	str	r3, [r7, #0]
 8009b9c:	2600      	movs	r6, #0
 8009b9e:	4630      	mov	r0, r6
 8009ba0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ba4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009c78 <_malloc_r+0xfc>
 8009ba8:	f000 f868 	bl	8009c7c <__malloc_lock>
 8009bac:	f8d8 3000 	ldr.w	r3, [r8]
 8009bb0:	461c      	mov	r4, r3
 8009bb2:	bb5c      	cbnz	r4, 8009c0c <_malloc_r+0x90>
 8009bb4:	4629      	mov	r1, r5
 8009bb6:	4638      	mov	r0, r7
 8009bb8:	f7ff ffc0 	bl	8009b3c <sbrk_aligned>
 8009bbc:	1c43      	adds	r3, r0, #1
 8009bbe:	4604      	mov	r4, r0
 8009bc0:	d155      	bne.n	8009c6e <_malloc_r+0xf2>
 8009bc2:	f8d8 4000 	ldr.w	r4, [r8]
 8009bc6:	4626      	mov	r6, r4
 8009bc8:	2e00      	cmp	r6, #0
 8009bca:	d145      	bne.n	8009c58 <_malloc_r+0xdc>
 8009bcc:	2c00      	cmp	r4, #0
 8009bce:	d048      	beq.n	8009c62 <_malloc_r+0xe6>
 8009bd0:	6823      	ldr	r3, [r4, #0]
 8009bd2:	4631      	mov	r1, r6
 8009bd4:	4638      	mov	r0, r7
 8009bd6:	eb04 0903 	add.w	r9, r4, r3
 8009bda:	f000 fb5d 	bl	800a298 <_sbrk_r>
 8009bde:	4581      	cmp	r9, r0
 8009be0:	d13f      	bne.n	8009c62 <_malloc_r+0xe6>
 8009be2:	6821      	ldr	r1, [r4, #0]
 8009be4:	1a6d      	subs	r5, r5, r1
 8009be6:	4629      	mov	r1, r5
 8009be8:	4638      	mov	r0, r7
 8009bea:	f7ff ffa7 	bl	8009b3c <sbrk_aligned>
 8009bee:	3001      	adds	r0, #1
 8009bf0:	d037      	beq.n	8009c62 <_malloc_r+0xe6>
 8009bf2:	6823      	ldr	r3, [r4, #0]
 8009bf4:	442b      	add	r3, r5
 8009bf6:	6023      	str	r3, [r4, #0]
 8009bf8:	f8d8 3000 	ldr.w	r3, [r8]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d038      	beq.n	8009c72 <_malloc_r+0xf6>
 8009c00:	685a      	ldr	r2, [r3, #4]
 8009c02:	42a2      	cmp	r2, r4
 8009c04:	d12b      	bne.n	8009c5e <_malloc_r+0xe2>
 8009c06:	2200      	movs	r2, #0
 8009c08:	605a      	str	r2, [r3, #4]
 8009c0a:	e00f      	b.n	8009c2c <_malloc_r+0xb0>
 8009c0c:	6822      	ldr	r2, [r4, #0]
 8009c0e:	1b52      	subs	r2, r2, r5
 8009c10:	d41f      	bmi.n	8009c52 <_malloc_r+0xd6>
 8009c12:	2a0b      	cmp	r2, #11
 8009c14:	d917      	bls.n	8009c46 <_malloc_r+0xca>
 8009c16:	1961      	adds	r1, r4, r5
 8009c18:	42a3      	cmp	r3, r4
 8009c1a:	6025      	str	r5, [r4, #0]
 8009c1c:	bf18      	it	ne
 8009c1e:	6059      	strne	r1, [r3, #4]
 8009c20:	6863      	ldr	r3, [r4, #4]
 8009c22:	bf08      	it	eq
 8009c24:	f8c8 1000 	streq.w	r1, [r8]
 8009c28:	5162      	str	r2, [r4, r5]
 8009c2a:	604b      	str	r3, [r1, #4]
 8009c2c:	4638      	mov	r0, r7
 8009c2e:	f104 060b 	add.w	r6, r4, #11
 8009c32:	f000 f829 	bl	8009c88 <__malloc_unlock>
 8009c36:	f026 0607 	bic.w	r6, r6, #7
 8009c3a:	1d23      	adds	r3, r4, #4
 8009c3c:	1af2      	subs	r2, r6, r3
 8009c3e:	d0ae      	beq.n	8009b9e <_malloc_r+0x22>
 8009c40:	1b9b      	subs	r3, r3, r6
 8009c42:	50a3      	str	r3, [r4, r2]
 8009c44:	e7ab      	b.n	8009b9e <_malloc_r+0x22>
 8009c46:	42a3      	cmp	r3, r4
 8009c48:	6862      	ldr	r2, [r4, #4]
 8009c4a:	d1dd      	bne.n	8009c08 <_malloc_r+0x8c>
 8009c4c:	f8c8 2000 	str.w	r2, [r8]
 8009c50:	e7ec      	b.n	8009c2c <_malloc_r+0xb0>
 8009c52:	4623      	mov	r3, r4
 8009c54:	6864      	ldr	r4, [r4, #4]
 8009c56:	e7ac      	b.n	8009bb2 <_malloc_r+0x36>
 8009c58:	4634      	mov	r4, r6
 8009c5a:	6876      	ldr	r6, [r6, #4]
 8009c5c:	e7b4      	b.n	8009bc8 <_malloc_r+0x4c>
 8009c5e:	4613      	mov	r3, r2
 8009c60:	e7cc      	b.n	8009bfc <_malloc_r+0x80>
 8009c62:	230c      	movs	r3, #12
 8009c64:	603b      	str	r3, [r7, #0]
 8009c66:	4638      	mov	r0, r7
 8009c68:	f000 f80e 	bl	8009c88 <__malloc_unlock>
 8009c6c:	e797      	b.n	8009b9e <_malloc_r+0x22>
 8009c6e:	6025      	str	r5, [r4, #0]
 8009c70:	e7dc      	b.n	8009c2c <_malloc_r+0xb0>
 8009c72:	605b      	str	r3, [r3, #4]
 8009c74:	deff      	udf	#255	; 0xff
 8009c76:	bf00      	nop
 8009c78:	20002d30 	.word	0x20002d30

08009c7c <__malloc_lock>:
 8009c7c:	4801      	ldr	r0, [pc, #4]	; (8009c84 <__malloc_lock+0x8>)
 8009c7e:	f7ff bf0f 	b.w	8009aa0 <__retarget_lock_acquire_recursive>
 8009c82:	bf00      	nop
 8009c84:	20002d2c 	.word	0x20002d2c

08009c88 <__malloc_unlock>:
 8009c88:	4801      	ldr	r0, [pc, #4]	; (8009c90 <__malloc_unlock+0x8>)
 8009c8a:	f7ff bf0a 	b.w	8009aa2 <__retarget_lock_release_recursive>
 8009c8e:	bf00      	nop
 8009c90:	20002d2c 	.word	0x20002d2c

08009c94 <__ssputs_r>:
 8009c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c98:	688e      	ldr	r6, [r1, #8]
 8009c9a:	461f      	mov	r7, r3
 8009c9c:	42be      	cmp	r6, r7
 8009c9e:	680b      	ldr	r3, [r1, #0]
 8009ca0:	4682      	mov	sl, r0
 8009ca2:	460c      	mov	r4, r1
 8009ca4:	4690      	mov	r8, r2
 8009ca6:	d82c      	bhi.n	8009d02 <__ssputs_r+0x6e>
 8009ca8:	898a      	ldrh	r2, [r1, #12]
 8009caa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009cae:	d026      	beq.n	8009cfe <__ssputs_r+0x6a>
 8009cb0:	6965      	ldr	r5, [r4, #20]
 8009cb2:	6909      	ldr	r1, [r1, #16]
 8009cb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009cb8:	eba3 0901 	sub.w	r9, r3, r1
 8009cbc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009cc0:	1c7b      	adds	r3, r7, #1
 8009cc2:	444b      	add	r3, r9
 8009cc4:	106d      	asrs	r5, r5, #1
 8009cc6:	429d      	cmp	r5, r3
 8009cc8:	bf38      	it	cc
 8009cca:	461d      	movcc	r5, r3
 8009ccc:	0553      	lsls	r3, r2, #21
 8009cce:	d527      	bpl.n	8009d20 <__ssputs_r+0x8c>
 8009cd0:	4629      	mov	r1, r5
 8009cd2:	f7ff ff53 	bl	8009b7c <_malloc_r>
 8009cd6:	4606      	mov	r6, r0
 8009cd8:	b360      	cbz	r0, 8009d34 <__ssputs_r+0xa0>
 8009cda:	6921      	ldr	r1, [r4, #16]
 8009cdc:	464a      	mov	r2, r9
 8009cde:	f000 faeb 	bl	800a2b8 <memcpy>
 8009ce2:	89a3      	ldrh	r3, [r4, #12]
 8009ce4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009ce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cec:	81a3      	strh	r3, [r4, #12]
 8009cee:	6126      	str	r6, [r4, #16]
 8009cf0:	6165      	str	r5, [r4, #20]
 8009cf2:	444e      	add	r6, r9
 8009cf4:	eba5 0509 	sub.w	r5, r5, r9
 8009cf8:	6026      	str	r6, [r4, #0]
 8009cfa:	60a5      	str	r5, [r4, #8]
 8009cfc:	463e      	mov	r6, r7
 8009cfe:	42be      	cmp	r6, r7
 8009d00:	d900      	bls.n	8009d04 <__ssputs_r+0x70>
 8009d02:	463e      	mov	r6, r7
 8009d04:	6820      	ldr	r0, [r4, #0]
 8009d06:	4632      	mov	r2, r6
 8009d08:	4641      	mov	r1, r8
 8009d0a:	f000 faab 	bl	800a264 <memmove>
 8009d0e:	68a3      	ldr	r3, [r4, #8]
 8009d10:	1b9b      	subs	r3, r3, r6
 8009d12:	60a3      	str	r3, [r4, #8]
 8009d14:	6823      	ldr	r3, [r4, #0]
 8009d16:	4433      	add	r3, r6
 8009d18:	6023      	str	r3, [r4, #0]
 8009d1a:	2000      	movs	r0, #0
 8009d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d20:	462a      	mov	r2, r5
 8009d22:	f000 fad7 	bl	800a2d4 <_realloc_r>
 8009d26:	4606      	mov	r6, r0
 8009d28:	2800      	cmp	r0, #0
 8009d2a:	d1e0      	bne.n	8009cee <__ssputs_r+0x5a>
 8009d2c:	6921      	ldr	r1, [r4, #16]
 8009d2e:	4650      	mov	r0, sl
 8009d30:	f7ff feb8 	bl	8009aa4 <_free_r>
 8009d34:	230c      	movs	r3, #12
 8009d36:	f8ca 3000 	str.w	r3, [sl]
 8009d3a:	89a3      	ldrh	r3, [r4, #12]
 8009d3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d40:	81a3      	strh	r3, [r4, #12]
 8009d42:	f04f 30ff 	mov.w	r0, #4294967295
 8009d46:	e7e9      	b.n	8009d1c <__ssputs_r+0x88>

08009d48 <_svfiprintf_r>:
 8009d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d4c:	4698      	mov	r8, r3
 8009d4e:	898b      	ldrh	r3, [r1, #12]
 8009d50:	061b      	lsls	r3, r3, #24
 8009d52:	b09d      	sub	sp, #116	; 0x74
 8009d54:	4607      	mov	r7, r0
 8009d56:	460d      	mov	r5, r1
 8009d58:	4614      	mov	r4, r2
 8009d5a:	d50e      	bpl.n	8009d7a <_svfiprintf_r+0x32>
 8009d5c:	690b      	ldr	r3, [r1, #16]
 8009d5e:	b963      	cbnz	r3, 8009d7a <_svfiprintf_r+0x32>
 8009d60:	2140      	movs	r1, #64	; 0x40
 8009d62:	f7ff ff0b 	bl	8009b7c <_malloc_r>
 8009d66:	6028      	str	r0, [r5, #0]
 8009d68:	6128      	str	r0, [r5, #16]
 8009d6a:	b920      	cbnz	r0, 8009d76 <_svfiprintf_r+0x2e>
 8009d6c:	230c      	movs	r3, #12
 8009d6e:	603b      	str	r3, [r7, #0]
 8009d70:	f04f 30ff 	mov.w	r0, #4294967295
 8009d74:	e0d0      	b.n	8009f18 <_svfiprintf_r+0x1d0>
 8009d76:	2340      	movs	r3, #64	; 0x40
 8009d78:	616b      	str	r3, [r5, #20]
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	9309      	str	r3, [sp, #36]	; 0x24
 8009d7e:	2320      	movs	r3, #32
 8009d80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d84:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d88:	2330      	movs	r3, #48	; 0x30
 8009d8a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009f30 <_svfiprintf_r+0x1e8>
 8009d8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d92:	f04f 0901 	mov.w	r9, #1
 8009d96:	4623      	mov	r3, r4
 8009d98:	469a      	mov	sl, r3
 8009d9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d9e:	b10a      	cbz	r2, 8009da4 <_svfiprintf_r+0x5c>
 8009da0:	2a25      	cmp	r2, #37	; 0x25
 8009da2:	d1f9      	bne.n	8009d98 <_svfiprintf_r+0x50>
 8009da4:	ebba 0b04 	subs.w	fp, sl, r4
 8009da8:	d00b      	beq.n	8009dc2 <_svfiprintf_r+0x7a>
 8009daa:	465b      	mov	r3, fp
 8009dac:	4622      	mov	r2, r4
 8009dae:	4629      	mov	r1, r5
 8009db0:	4638      	mov	r0, r7
 8009db2:	f7ff ff6f 	bl	8009c94 <__ssputs_r>
 8009db6:	3001      	adds	r0, #1
 8009db8:	f000 80a9 	beq.w	8009f0e <_svfiprintf_r+0x1c6>
 8009dbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009dbe:	445a      	add	r2, fp
 8009dc0:	9209      	str	r2, [sp, #36]	; 0x24
 8009dc2:	f89a 3000 	ldrb.w	r3, [sl]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	f000 80a1 	beq.w	8009f0e <_svfiprintf_r+0x1c6>
 8009dcc:	2300      	movs	r3, #0
 8009dce:	f04f 32ff 	mov.w	r2, #4294967295
 8009dd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009dd6:	f10a 0a01 	add.w	sl, sl, #1
 8009dda:	9304      	str	r3, [sp, #16]
 8009ddc:	9307      	str	r3, [sp, #28]
 8009dde:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009de2:	931a      	str	r3, [sp, #104]	; 0x68
 8009de4:	4654      	mov	r4, sl
 8009de6:	2205      	movs	r2, #5
 8009de8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dec:	4850      	ldr	r0, [pc, #320]	; (8009f30 <_svfiprintf_r+0x1e8>)
 8009dee:	f7f6 f9ef 	bl	80001d0 <memchr>
 8009df2:	9a04      	ldr	r2, [sp, #16]
 8009df4:	b9d8      	cbnz	r0, 8009e2e <_svfiprintf_r+0xe6>
 8009df6:	06d0      	lsls	r0, r2, #27
 8009df8:	bf44      	itt	mi
 8009dfa:	2320      	movmi	r3, #32
 8009dfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e00:	0711      	lsls	r1, r2, #28
 8009e02:	bf44      	itt	mi
 8009e04:	232b      	movmi	r3, #43	; 0x2b
 8009e06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e0a:	f89a 3000 	ldrb.w	r3, [sl]
 8009e0e:	2b2a      	cmp	r3, #42	; 0x2a
 8009e10:	d015      	beq.n	8009e3e <_svfiprintf_r+0xf6>
 8009e12:	9a07      	ldr	r2, [sp, #28]
 8009e14:	4654      	mov	r4, sl
 8009e16:	2000      	movs	r0, #0
 8009e18:	f04f 0c0a 	mov.w	ip, #10
 8009e1c:	4621      	mov	r1, r4
 8009e1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e22:	3b30      	subs	r3, #48	; 0x30
 8009e24:	2b09      	cmp	r3, #9
 8009e26:	d94d      	bls.n	8009ec4 <_svfiprintf_r+0x17c>
 8009e28:	b1b0      	cbz	r0, 8009e58 <_svfiprintf_r+0x110>
 8009e2a:	9207      	str	r2, [sp, #28]
 8009e2c:	e014      	b.n	8009e58 <_svfiprintf_r+0x110>
 8009e2e:	eba0 0308 	sub.w	r3, r0, r8
 8009e32:	fa09 f303 	lsl.w	r3, r9, r3
 8009e36:	4313      	orrs	r3, r2
 8009e38:	9304      	str	r3, [sp, #16]
 8009e3a:	46a2      	mov	sl, r4
 8009e3c:	e7d2      	b.n	8009de4 <_svfiprintf_r+0x9c>
 8009e3e:	9b03      	ldr	r3, [sp, #12]
 8009e40:	1d19      	adds	r1, r3, #4
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	9103      	str	r1, [sp, #12]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	bfbb      	ittet	lt
 8009e4a:	425b      	neglt	r3, r3
 8009e4c:	f042 0202 	orrlt.w	r2, r2, #2
 8009e50:	9307      	strge	r3, [sp, #28]
 8009e52:	9307      	strlt	r3, [sp, #28]
 8009e54:	bfb8      	it	lt
 8009e56:	9204      	strlt	r2, [sp, #16]
 8009e58:	7823      	ldrb	r3, [r4, #0]
 8009e5a:	2b2e      	cmp	r3, #46	; 0x2e
 8009e5c:	d10c      	bne.n	8009e78 <_svfiprintf_r+0x130>
 8009e5e:	7863      	ldrb	r3, [r4, #1]
 8009e60:	2b2a      	cmp	r3, #42	; 0x2a
 8009e62:	d134      	bne.n	8009ece <_svfiprintf_r+0x186>
 8009e64:	9b03      	ldr	r3, [sp, #12]
 8009e66:	1d1a      	adds	r2, r3, #4
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	9203      	str	r2, [sp, #12]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	bfb8      	it	lt
 8009e70:	f04f 33ff 	movlt.w	r3, #4294967295
 8009e74:	3402      	adds	r4, #2
 8009e76:	9305      	str	r3, [sp, #20]
 8009e78:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009f40 <_svfiprintf_r+0x1f8>
 8009e7c:	7821      	ldrb	r1, [r4, #0]
 8009e7e:	2203      	movs	r2, #3
 8009e80:	4650      	mov	r0, sl
 8009e82:	f7f6 f9a5 	bl	80001d0 <memchr>
 8009e86:	b138      	cbz	r0, 8009e98 <_svfiprintf_r+0x150>
 8009e88:	9b04      	ldr	r3, [sp, #16]
 8009e8a:	eba0 000a 	sub.w	r0, r0, sl
 8009e8e:	2240      	movs	r2, #64	; 0x40
 8009e90:	4082      	lsls	r2, r0
 8009e92:	4313      	orrs	r3, r2
 8009e94:	3401      	adds	r4, #1
 8009e96:	9304      	str	r3, [sp, #16]
 8009e98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e9c:	4825      	ldr	r0, [pc, #148]	; (8009f34 <_svfiprintf_r+0x1ec>)
 8009e9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ea2:	2206      	movs	r2, #6
 8009ea4:	f7f6 f994 	bl	80001d0 <memchr>
 8009ea8:	2800      	cmp	r0, #0
 8009eaa:	d038      	beq.n	8009f1e <_svfiprintf_r+0x1d6>
 8009eac:	4b22      	ldr	r3, [pc, #136]	; (8009f38 <_svfiprintf_r+0x1f0>)
 8009eae:	bb1b      	cbnz	r3, 8009ef8 <_svfiprintf_r+0x1b0>
 8009eb0:	9b03      	ldr	r3, [sp, #12]
 8009eb2:	3307      	adds	r3, #7
 8009eb4:	f023 0307 	bic.w	r3, r3, #7
 8009eb8:	3308      	adds	r3, #8
 8009eba:	9303      	str	r3, [sp, #12]
 8009ebc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ebe:	4433      	add	r3, r6
 8009ec0:	9309      	str	r3, [sp, #36]	; 0x24
 8009ec2:	e768      	b.n	8009d96 <_svfiprintf_r+0x4e>
 8009ec4:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ec8:	460c      	mov	r4, r1
 8009eca:	2001      	movs	r0, #1
 8009ecc:	e7a6      	b.n	8009e1c <_svfiprintf_r+0xd4>
 8009ece:	2300      	movs	r3, #0
 8009ed0:	3401      	adds	r4, #1
 8009ed2:	9305      	str	r3, [sp, #20]
 8009ed4:	4619      	mov	r1, r3
 8009ed6:	f04f 0c0a 	mov.w	ip, #10
 8009eda:	4620      	mov	r0, r4
 8009edc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ee0:	3a30      	subs	r2, #48	; 0x30
 8009ee2:	2a09      	cmp	r2, #9
 8009ee4:	d903      	bls.n	8009eee <_svfiprintf_r+0x1a6>
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d0c6      	beq.n	8009e78 <_svfiprintf_r+0x130>
 8009eea:	9105      	str	r1, [sp, #20]
 8009eec:	e7c4      	b.n	8009e78 <_svfiprintf_r+0x130>
 8009eee:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ef2:	4604      	mov	r4, r0
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	e7f0      	b.n	8009eda <_svfiprintf_r+0x192>
 8009ef8:	ab03      	add	r3, sp, #12
 8009efa:	9300      	str	r3, [sp, #0]
 8009efc:	462a      	mov	r2, r5
 8009efe:	4b0f      	ldr	r3, [pc, #60]	; (8009f3c <_svfiprintf_r+0x1f4>)
 8009f00:	a904      	add	r1, sp, #16
 8009f02:	4638      	mov	r0, r7
 8009f04:	f3af 8000 	nop.w
 8009f08:	1c42      	adds	r2, r0, #1
 8009f0a:	4606      	mov	r6, r0
 8009f0c:	d1d6      	bne.n	8009ebc <_svfiprintf_r+0x174>
 8009f0e:	89ab      	ldrh	r3, [r5, #12]
 8009f10:	065b      	lsls	r3, r3, #25
 8009f12:	f53f af2d 	bmi.w	8009d70 <_svfiprintf_r+0x28>
 8009f16:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f18:	b01d      	add	sp, #116	; 0x74
 8009f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f1e:	ab03      	add	r3, sp, #12
 8009f20:	9300      	str	r3, [sp, #0]
 8009f22:	462a      	mov	r2, r5
 8009f24:	4b05      	ldr	r3, [pc, #20]	; (8009f3c <_svfiprintf_r+0x1f4>)
 8009f26:	a904      	add	r1, sp, #16
 8009f28:	4638      	mov	r0, r7
 8009f2a:	f000 f879 	bl	800a020 <_printf_i>
 8009f2e:	e7eb      	b.n	8009f08 <_svfiprintf_r+0x1c0>
 8009f30:	0800abbc 	.word	0x0800abbc
 8009f34:	0800abc6 	.word	0x0800abc6
 8009f38:	00000000 	.word	0x00000000
 8009f3c:	08009c95 	.word	0x08009c95
 8009f40:	0800abc2 	.word	0x0800abc2

08009f44 <_printf_common>:
 8009f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f48:	4616      	mov	r6, r2
 8009f4a:	4699      	mov	r9, r3
 8009f4c:	688a      	ldr	r2, [r1, #8]
 8009f4e:	690b      	ldr	r3, [r1, #16]
 8009f50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009f54:	4293      	cmp	r3, r2
 8009f56:	bfb8      	it	lt
 8009f58:	4613      	movlt	r3, r2
 8009f5a:	6033      	str	r3, [r6, #0]
 8009f5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009f60:	4607      	mov	r7, r0
 8009f62:	460c      	mov	r4, r1
 8009f64:	b10a      	cbz	r2, 8009f6a <_printf_common+0x26>
 8009f66:	3301      	adds	r3, #1
 8009f68:	6033      	str	r3, [r6, #0]
 8009f6a:	6823      	ldr	r3, [r4, #0]
 8009f6c:	0699      	lsls	r1, r3, #26
 8009f6e:	bf42      	ittt	mi
 8009f70:	6833      	ldrmi	r3, [r6, #0]
 8009f72:	3302      	addmi	r3, #2
 8009f74:	6033      	strmi	r3, [r6, #0]
 8009f76:	6825      	ldr	r5, [r4, #0]
 8009f78:	f015 0506 	ands.w	r5, r5, #6
 8009f7c:	d106      	bne.n	8009f8c <_printf_common+0x48>
 8009f7e:	f104 0a19 	add.w	sl, r4, #25
 8009f82:	68e3      	ldr	r3, [r4, #12]
 8009f84:	6832      	ldr	r2, [r6, #0]
 8009f86:	1a9b      	subs	r3, r3, r2
 8009f88:	42ab      	cmp	r3, r5
 8009f8a:	dc26      	bgt.n	8009fda <_printf_common+0x96>
 8009f8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009f90:	1e13      	subs	r3, r2, #0
 8009f92:	6822      	ldr	r2, [r4, #0]
 8009f94:	bf18      	it	ne
 8009f96:	2301      	movne	r3, #1
 8009f98:	0692      	lsls	r2, r2, #26
 8009f9a:	d42b      	bmi.n	8009ff4 <_printf_common+0xb0>
 8009f9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009fa0:	4649      	mov	r1, r9
 8009fa2:	4638      	mov	r0, r7
 8009fa4:	47c0      	blx	r8
 8009fa6:	3001      	adds	r0, #1
 8009fa8:	d01e      	beq.n	8009fe8 <_printf_common+0xa4>
 8009faa:	6823      	ldr	r3, [r4, #0]
 8009fac:	6922      	ldr	r2, [r4, #16]
 8009fae:	f003 0306 	and.w	r3, r3, #6
 8009fb2:	2b04      	cmp	r3, #4
 8009fb4:	bf02      	ittt	eq
 8009fb6:	68e5      	ldreq	r5, [r4, #12]
 8009fb8:	6833      	ldreq	r3, [r6, #0]
 8009fba:	1aed      	subeq	r5, r5, r3
 8009fbc:	68a3      	ldr	r3, [r4, #8]
 8009fbe:	bf0c      	ite	eq
 8009fc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009fc4:	2500      	movne	r5, #0
 8009fc6:	4293      	cmp	r3, r2
 8009fc8:	bfc4      	itt	gt
 8009fca:	1a9b      	subgt	r3, r3, r2
 8009fcc:	18ed      	addgt	r5, r5, r3
 8009fce:	2600      	movs	r6, #0
 8009fd0:	341a      	adds	r4, #26
 8009fd2:	42b5      	cmp	r5, r6
 8009fd4:	d11a      	bne.n	800a00c <_printf_common+0xc8>
 8009fd6:	2000      	movs	r0, #0
 8009fd8:	e008      	b.n	8009fec <_printf_common+0xa8>
 8009fda:	2301      	movs	r3, #1
 8009fdc:	4652      	mov	r2, sl
 8009fde:	4649      	mov	r1, r9
 8009fe0:	4638      	mov	r0, r7
 8009fe2:	47c0      	blx	r8
 8009fe4:	3001      	adds	r0, #1
 8009fe6:	d103      	bne.n	8009ff0 <_printf_common+0xac>
 8009fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8009fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ff0:	3501      	adds	r5, #1
 8009ff2:	e7c6      	b.n	8009f82 <_printf_common+0x3e>
 8009ff4:	18e1      	adds	r1, r4, r3
 8009ff6:	1c5a      	adds	r2, r3, #1
 8009ff8:	2030      	movs	r0, #48	; 0x30
 8009ffa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009ffe:	4422      	add	r2, r4
 800a000:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a004:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a008:	3302      	adds	r3, #2
 800a00a:	e7c7      	b.n	8009f9c <_printf_common+0x58>
 800a00c:	2301      	movs	r3, #1
 800a00e:	4622      	mov	r2, r4
 800a010:	4649      	mov	r1, r9
 800a012:	4638      	mov	r0, r7
 800a014:	47c0      	blx	r8
 800a016:	3001      	adds	r0, #1
 800a018:	d0e6      	beq.n	8009fe8 <_printf_common+0xa4>
 800a01a:	3601      	adds	r6, #1
 800a01c:	e7d9      	b.n	8009fd2 <_printf_common+0x8e>
	...

0800a020 <_printf_i>:
 800a020:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a024:	7e0f      	ldrb	r7, [r1, #24]
 800a026:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a028:	2f78      	cmp	r7, #120	; 0x78
 800a02a:	4691      	mov	r9, r2
 800a02c:	4680      	mov	r8, r0
 800a02e:	460c      	mov	r4, r1
 800a030:	469a      	mov	sl, r3
 800a032:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a036:	d807      	bhi.n	800a048 <_printf_i+0x28>
 800a038:	2f62      	cmp	r7, #98	; 0x62
 800a03a:	d80a      	bhi.n	800a052 <_printf_i+0x32>
 800a03c:	2f00      	cmp	r7, #0
 800a03e:	f000 80d4 	beq.w	800a1ea <_printf_i+0x1ca>
 800a042:	2f58      	cmp	r7, #88	; 0x58
 800a044:	f000 80c0 	beq.w	800a1c8 <_printf_i+0x1a8>
 800a048:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a04c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a050:	e03a      	b.n	800a0c8 <_printf_i+0xa8>
 800a052:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a056:	2b15      	cmp	r3, #21
 800a058:	d8f6      	bhi.n	800a048 <_printf_i+0x28>
 800a05a:	a101      	add	r1, pc, #4	; (adr r1, 800a060 <_printf_i+0x40>)
 800a05c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a060:	0800a0b9 	.word	0x0800a0b9
 800a064:	0800a0cd 	.word	0x0800a0cd
 800a068:	0800a049 	.word	0x0800a049
 800a06c:	0800a049 	.word	0x0800a049
 800a070:	0800a049 	.word	0x0800a049
 800a074:	0800a049 	.word	0x0800a049
 800a078:	0800a0cd 	.word	0x0800a0cd
 800a07c:	0800a049 	.word	0x0800a049
 800a080:	0800a049 	.word	0x0800a049
 800a084:	0800a049 	.word	0x0800a049
 800a088:	0800a049 	.word	0x0800a049
 800a08c:	0800a1d1 	.word	0x0800a1d1
 800a090:	0800a0f9 	.word	0x0800a0f9
 800a094:	0800a18b 	.word	0x0800a18b
 800a098:	0800a049 	.word	0x0800a049
 800a09c:	0800a049 	.word	0x0800a049
 800a0a0:	0800a1f3 	.word	0x0800a1f3
 800a0a4:	0800a049 	.word	0x0800a049
 800a0a8:	0800a0f9 	.word	0x0800a0f9
 800a0ac:	0800a049 	.word	0x0800a049
 800a0b0:	0800a049 	.word	0x0800a049
 800a0b4:	0800a193 	.word	0x0800a193
 800a0b8:	682b      	ldr	r3, [r5, #0]
 800a0ba:	1d1a      	adds	r2, r3, #4
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	602a      	str	r2, [r5, #0]
 800a0c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a0c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	e09f      	b.n	800a20c <_printf_i+0x1ec>
 800a0cc:	6820      	ldr	r0, [r4, #0]
 800a0ce:	682b      	ldr	r3, [r5, #0]
 800a0d0:	0607      	lsls	r7, r0, #24
 800a0d2:	f103 0104 	add.w	r1, r3, #4
 800a0d6:	6029      	str	r1, [r5, #0]
 800a0d8:	d501      	bpl.n	800a0de <_printf_i+0xbe>
 800a0da:	681e      	ldr	r6, [r3, #0]
 800a0dc:	e003      	b.n	800a0e6 <_printf_i+0xc6>
 800a0de:	0646      	lsls	r6, r0, #25
 800a0e0:	d5fb      	bpl.n	800a0da <_printf_i+0xba>
 800a0e2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a0e6:	2e00      	cmp	r6, #0
 800a0e8:	da03      	bge.n	800a0f2 <_printf_i+0xd2>
 800a0ea:	232d      	movs	r3, #45	; 0x2d
 800a0ec:	4276      	negs	r6, r6
 800a0ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a0f2:	485a      	ldr	r0, [pc, #360]	; (800a25c <_printf_i+0x23c>)
 800a0f4:	230a      	movs	r3, #10
 800a0f6:	e012      	b.n	800a11e <_printf_i+0xfe>
 800a0f8:	682b      	ldr	r3, [r5, #0]
 800a0fa:	6820      	ldr	r0, [r4, #0]
 800a0fc:	1d19      	adds	r1, r3, #4
 800a0fe:	6029      	str	r1, [r5, #0]
 800a100:	0605      	lsls	r5, r0, #24
 800a102:	d501      	bpl.n	800a108 <_printf_i+0xe8>
 800a104:	681e      	ldr	r6, [r3, #0]
 800a106:	e002      	b.n	800a10e <_printf_i+0xee>
 800a108:	0641      	lsls	r1, r0, #25
 800a10a:	d5fb      	bpl.n	800a104 <_printf_i+0xe4>
 800a10c:	881e      	ldrh	r6, [r3, #0]
 800a10e:	4853      	ldr	r0, [pc, #332]	; (800a25c <_printf_i+0x23c>)
 800a110:	2f6f      	cmp	r7, #111	; 0x6f
 800a112:	bf0c      	ite	eq
 800a114:	2308      	moveq	r3, #8
 800a116:	230a      	movne	r3, #10
 800a118:	2100      	movs	r1, #0
 800a11a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a11e:	6865      	ldr	r5, [r4, #4]
 800a120:	60a5      	str	r5, [r4, #8]
 800a122:	2d00      	cmp	r5, #0
 800a124:	bfa2      	ittt	ge
 800a126:	6821      	ldrge	r1, [r4, #0]
 800a128:	f021 0104 	bicge.w	r1, r1, #4
 800a12c:	6021      	strge	r1, [r4, #0]
 800a12e:	b90e      	cbnz	r6, 800a134 <_printf_i+0x114>
 800a130:	2d00      	cmp	r5, #0
 800a132:	d04b      	beq.n	800a1cc <_printf_i+0x1ac>
 800a134:	4615      	mov	r5, r2
 800a136:	fbb6 f1f3 	udiv	r1, r6, r3
 800a13a:	fb03 6711 	mls	r7, r3, r1, r6
 800a13e:	5dc7      	ldrb	r7, [r0, r7]
 800a140:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a144:	4637      	mov	r7, r6
 800a146:	42bb      	cmp	r3, r7
 800a148:	460e      	mov	r6, r1
 800a14a:	d9f4      	bls.n	800a136 <_printf_i+0x116>
 800a14c:	2b08      	cmp	r3, #8
 800a14e:	d10b      	bne.n	800a168 <_printf_i+0x148>
 800a150:	6823      	ldr	r3, [r4, #0]
 800a152:	07de      	lsls	r6, r3, #31
 800a154:	d508      	bpl.n	800a168 <_printf_i+0x148>
 800a156:	6923      	ldr	r3, [r4, #16]
 800a158:	6861      	ldr	r1, [r4, #4]
 800a15a:	4299      	cmp	r1, r3
 800a15c:	bfde      	ittt	le
 800a15e:	2330      	movle	r3, #48	; 0x30
 800a160:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a164:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a168:	1b52      	subs	r2, r2, r5
 800a16a:	6122      	str	r2, [r4, #16]
 800a16c:	f8cd a000 	str.w	sl, [sp]
 800a170:	464b      	mov	r3, r9
 800a172:	aa03      	add	r2, sp, #12
 800a174:	4621      	mov	r1, r4
 800a176:	4640      	mov	r0, r8
 800a178:	f7ff fee4 	bl	8009f44 <_printf_common>
 800a17c:	3001      	adds	r0, #1
 800a17e:	d14a      	bne.n	800a216 <_printf_i+0x1f6>
 800a180:	f04f 30ff 	mov.w	r0, #4294967295
 800a184:	b004      	add	sp, #16
 800a186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a18a:	6823      	ldr	r3, [r4, #0]
 800a18c:	f043 0320 	orr.w	r3, r3, #32
 800a190:	6023      	str	r3, [r4, #0]
 800a192:	4833      	ldr	r0, [pc, #204]	; (800a260 <_printf_i+0x240>)
 800a194:	2778      	movs	r7, #120	; 0x78
 800a196:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a19a:	6823      	ldr	r3, [r4, #0]
 800a19c:	6829      	ldr	r1, [r5, #0]
 800a19e:	061f      	lsls	r7, r3, #24
 800a1a0:	f851 6b04 	ldr.w	r6, [r1], #4
 800a1a4:	d402      	bmi.n	800a1ac <_printf_i+0x18c>
 800a1a6:	065f      	lsls	r7, r3, #25
 800a1a8:	bf48      	it	mi
 800a1aa:	b2b6      	uxthmi	r6, r6
 800a1ac:	07df      	lsls	r7, r3, #31
 800a1ae:	bf48      	it	mi
 800a1b0:	f043 0320 	orrmi.w	r3, r3, #32
 800a1b4:	6029      	str	r1, [r5, #0]
 800a1b6:	bf48      	it	mi
 800a1b8:	6023      	strmi	r3, [r4, #0]
 800a1ba:	b91e      	cbnz	r6, 800a1c4 <_printf_i+0x1a4>
 800a1bc:	6823      	ldr	r3, [r4, #0]
 800a1be:	f023 0320 	bic.w	r3, r3, #32
 800a1c2:	6023      	str	r3, [r4, #0]
 800a1c4:	2310      	movs	r3, #16
 800a1c6:	e7a7      	b.n	800a118 <_printf_i+0xf8>
 800a1c8:	4824      	ldr	r0, [pc, #144]	; (800a25c <_printf_i+0x23c>)
 800a1ca:	e7e4      	b.n	800a196 <_printf_i+0x176>
 800a1cc:	4615      	mov	r5, r2
 800a1ce:	e7bd      	b.n	800a14c <_printf_i+0x12c>
 800a1d0:	682b      	ldr	r3, [r5, #0]
 800a1d2:	6826      	ldr	r6, [r4, #0]
 800a1d4:	6961      	ldr	r1, [r4, #20]
 800a1d6:	1d18      	adds	r0, r3, #4
 800a1d8:	6028      	str	r0, [r5, #0]
 800a1da:	0635      	lsls	r5, r6, #24
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	d501      	bpl.n	800a1e4 <_printf_i+0x1c4>
 800a1e0:	6019      	str	r1, [r3, #0]
 800a1e2:	e002      	b.n	800a1ea <_printf_i+0x1ca>
 800a1e4:	0670      	lsls	r0, r6, #25
 800a1e6:	d5fb      	bpl.n	800a1e0 <_printf_i+0x1c0>
 800a1e8:	8019      	strh	r1, [r3, #0]
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	6123      	str	r3, [r4, #16]
 800a1ee:	4615      	mov	r5, r2
 800a1f0:	e7bc      	b.n	800a16c <_printf_i+0x14c>
 800a1f2:	682b      	ldr	r3, [r5, #0]
 800a1f4:	1d1a      	adds	r2, r3, #4
 800a1f6:	602a      	str	r2, [r5, #0]
 800a1f8:	681d      	ldr	r5, [r3, #0]
 800a1fa:	6862      	ldr	r2, [r4, #4]
 800a1fc:	2100      	movs	r1, #0
 800a1fe:	4628      	mov	r0, r5
 800a200:	f7f5 ffe6 	bl	80001d0 <memchr>
 800a204:	b108      	cbz	r0, 800a20a <_printf_i+0x1ea>
 800a206:	1b40      	subs	r0, r0, r5
 800a208:	6060      	str	r0, [r4, #4]
 800a20a:	6863      	ldr	r3, [r4, #4]
 800a20c:	6123      	str	r3, [r4, #16]
 800a20e:	2300      	movs	r3, #0
 800a210:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a214:	e7aa      	b.n	800a16c <_printf_i+0x14c>
 800a216:	6923      	ldr	r3, [r4, #16]
 800a218:	462a      	mov	r2, r5
 800a21a:	4649      	mov	r1, r9
 800a21c:	4640      	mov	r0, r8
 800a21e:	47d0      	blx	sl
 800a220:	3001      	adds	r0, #1
 800a222:	d0ad      	beq.n	800a180 <_printf_i+0x160>
 800a224:	6823      	ldr	r3, [r4, #0]
 800a226:	079b      	lsls	r3, r3, #30
 800a228:	d413      	bmi.n	800a252 <_printf_i+0x232>
 800a22a:	68e0      	ldr	r0, [r4, #12]
 800a22c:	9b03      	ldr	r3, [sp, #12]
 800a22e:	4298      	cmp	r0, r3
 800a230:	bfb8      	it	lt
 800a232:	4618      	movlt	r0, r3
 800a234:	e7a6      	b.n	800a184 <_printf_i+0x164>
 800a236:	2301      	movs	r3, #1
 800a238:	4632      	mov	r2, r6
 800a23a:	4649      	mov	r1, r9
 800a23c:	4640      	mov	r0, r8
 800a23e:	47d0      	blx	sl
 800a240:	3001      	adds	r0, #1
 800a242:	d09d      	beq.n	800a180 <_printf_i+0x160>
 800a244:	3501      	adds	r5, #1
 800a246:	68e3      	ldr	r3, [r4, #12]
 800a248:	9903      	ldr	r1, [sp, #12]
 800a24a:	1a5b      	subs	r3, r3, r1
 800a24c:	42ab      	cmp	r3, r5
 800a24e:	dcf2      	bgt.n	800a236 <_printf_i+0x216>
 800a250:	e7eb      	b.n	800a22a <_printf_i+0x20a>
 800a252:	2500      	movs	r5, #0
 800a254:	f104 0619 	add.w	r6, r4, #25
 800a258:	e7f5      	b.n	800a246 <_printf_i+0x226>
 800a25a:	bf00      	nop
 800a25c:	0800abcd 	.word	0x0800abcd
 800a260:	0800abde 	.word	0x0800abde

0800a264 <memmove>:
 800a264:	4288      	cmp	r0, r1
 800a266:	b510      	push	{r4, lr}
 800a268:	eb01 0402 	add.w	r4, r1, r2
 800a26c:	d902      	bls.n	800a274 <memmove+0x10>
 800a26e:	4284      	cmp	r4, r0
 800a270:	4623      	mov	r3, r4
 800a272:	d807      	bhi.n	800a284 <memmove+0x20>
 800a274:	1e43      	subs	r3, r0, #1
 800a276:	42a1      	cmp	r1, r4
 800a278:	d008      	beq.n	800a28c <memmove+0x28>
 800a27a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a27e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a282:	e7f8      	b.n	800a276 <memmove+0x12>
 800a284:	4402      	add	r2, r0
 800a286:	4601      	mov	r1, r0
 800a288:	428a      	cmp	r2, r1
 800a28a:	d100      	bne.n	800a28e <memmove+0x2a>
 800a28c:	bd10      	pop	{r4, pc}
 800a28e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a292:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a296:	e7f7      	b.n	800a288 <memmove+0x24>

0800a298 <_sbrk_r>:
 800a298:	b538      	push	{r3, r4, r5, lr}
 800a29a:	4d06      	ldr	r5, [pc, #24]	; (800a2b4 <_sbrk_r+0x1c>)
 800a29c:	2300      	movs	r3, #0
 800a29e:	4604      	mov	r4, r0
 800a2a0:	4608      	mov	r0, r1
 800a2a2:	602b      	str	r3, [r5, #0]
 800a2a4:	f7f8 fad0 	bl	8002848 <_sbrk>
 800a2a8:	1c43      	adds	r3, r0, #1
 800a2aa:	d102      	bne.n	800a2b2 <_sbrk_r+0x1a>
 800a2ac:	682b      	ldr	r3, [r5, #0]
 800a2ae:	b103      	cbz	r3, 800a2b2 <_sbrk_r+0x1a>
 800a2b0:	6023      	str	r3, [r4, #0]
 800a2b2:	bd38      	pop	{r3, r4, r5, pc}
 800a2b4:	20002d28 	.word	0x20002d28

0800a2b8 <memcpy>:
 800a2b8:	440a      	add	r2, r1
 800a2ba:	4291      	cmp	r1, r2
 800a2bc:	f100 33ff 	add.w	r3, r0, #4294967295
 800a2c0:	d100      	bne.n	800a2c4 <memcpy+0xc>
 800a2c2:	4770      	bx	lr
 800a2c4:	b510      	push	{r4, lr}
 800a2c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a2ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a2ce:	4291      	cmp	r1, r2
 800a2d0:	d1f9      	bne.n	800a2c6 <memcpy+0xe>
 800a2d2:	bd10      	pop	{r4, pc}

0800a2d4 <_realloc_r>:
 800a2d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2d8:	4680      	mov	r8, r0
 800a2da:	4614      	mov	r4, r2
 800a2dc:	460e      	mov	r6, r1
 800a2de:	b921      	cbnz	r1, 800a2ea <_realloc_r+0x16>
 800a2e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2e4:	4611      	mov	r1, r2
 800a2e6:	f7ff bc49 	b.w	8009b7c <_malloc_r>
 800a2ea:	b92a      	cbnz	r2, 800a2f8 <_realloc_r+0x24>
 800a2ec:	f7ff fbda 	bl	8009aa4 <_free_r>
 800a2f0:	4625      	mov	r5, r4
 800a2f2:	4628      	mov	r0, r5
 800a2f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2f8:	f000 f81b 	bl	800a332 <_malloc_usable_size_r>
 800a2fc:	4284      	cmp	r4, r0
 800a2fe:	4607      	mov	r7, r0
 800a300:	d802      	bhi.n	800a308 <_realloc_r+0x34>
 800a302:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a306:	d812      	bhi.n	800a32e <_realloc_r+0x5a>
 800a308:	4621      	mov	r1, r4
 800a30a:	4640      	mov	r0, r8
 800a30c:	f7ff fc36 	bl	8009b7c <_malloc_r>
 800a310:	4605      	mov	r5, r0
 800a312:	2800      	cmp	r0, #0
 800a314:	d0ed      	beq.n	800a2f2 <_realloc_r+0x1e>
 800a316:	42bc      	cmp	r4, r7
 800a318:	4622      	mov	r2, r4
 800a31a:	4631      	mov	r1, r6
 800a31c:	bf28      	it	cs
 800a31e:	463a      	movcs	r2, r7
 800a320:	f7ff ffca 	bl	800a2b8 <memcpy>
 800a324:	4631      	mov	r1, r6
 800a326:	4640      	mov	r0, r8
 800a328:	f7ff fbbc 	bl	8009aa4 <_free_r>
 800a32c:	e7e1      	b.n	800a2f2 <_realloc_r+0x1e>
 800a32e:	4635      	mov	r5, r6
 800a330:	e7df      	b.n	800a2f2 <_realloc_r+0x1e>

0800a332 <_malloc_usable_size_r>:
 800a332:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a336:	1f18      	subs	r0, r3, #4
 800a338:	2b00      	cmp	r3, #0
 800a33a:	bfbc      	itt	lt
 800a33c:	580b      	ldrlt	r3, [r1, r0]
 800a33e:	18c0      	addlt	r0, r0, r3
 800a340:	4770      	bx	lr
	...

0800a344 <_init>:
 800a344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a346:	bf00      	nop
 800a348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a34a:	bc08      	pop	{r3}
 800a34c:	469e      	mov	lr, r3
 800a34e:	4770      	bx	lr

0800a350 <_fini>:
 800a350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a352:	bf00      	nop
 800a354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a356:	bc08      	pop	{r3}
 800a358:	469e      	mov	lr, r3
 800a35a:	4770      	bx	lr
